<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nodeJs介绍和ES6语法</title>
      <link href="/2019/07/01/9.nodeJs/1.nodeJS%E4%BB%8B%E7%BB%8D%E5%92%8CES6%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/07/01/9.nodeJs/1.nodeJS%E4%BB%8B%E7%BB%8D%E5%92%8CES6%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h1><h2 id="1-什么是node-js"><a href="#1-什么是node-js" class="headerlink" title="1.什么是node.js"></a>1.什么是node.js</h2><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。<br>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。</p><h2 id="2-nodeJs中javascript的组成部分"><a href="#2-nodeJs中javascript的组成部分" class="headerlink" title="2.nodeJs中javascript的组成部分"></a>2.nodeJs中javascript的组成部分</h2><p>ECMAscript核心 + 全局成员 + 核心API模块<br>nodejs无需操作浏览器，没有BOM和DOM的概念，取而代之的是全局成员和核心API</p><h2 id="3-nodejs可以做什么"><a href="#3-nodejs可以做什么" class="headerlink" title="3.nodejs可以做什么"></a>3.nodejs可以做什么</h2><p>使用JavaScript编写后端API接口或者网站<br>使用nodejs开发一些工具或包<br>基于socket技术开发即时通讯项目<br>基于electron环境开发桌面软件</p><h2 id="4-运行nodeJS的方式"><a href="#4-运行nodeJS的方式" class="headerlink" title="4.运行nodeJS的方式"></a>4.运行nodeJS的方式</h2><p>1）在powershell或者vscode的终端中输入 node xxx.js<br>2）使用repl方式 先输入node，进入repl命令，再输入js代码</p><h2 id="5-path环境变量"><a href="#5-path环境变量" class="headerlink" title="5.path环境变量"></a>5.path环境变量</h2><p>在Windows的高级系统设置里 设置Path环境变量为应用程序的路径 这样就可以在命令行快速启动应用程序</p><h1 id="二、ES6常用语法"><a href="#二、ES6常用语法" class="headerlink" title="二、ES6常用语法"></a>二、ES6常用语法</h1><h2 id="1-let和const声明变量"><a href="#1-let和const声明变量" class="headerlink" title="1.let和const声明变量"></a>1.let和const声明变量</h2><p>使用var定义的变量存在 预解析 变量提升 的问题；<br>使用var定义的变量没有块级{}作用域，容易造成变量污染</p><p>用let定义的变量 不会产生变量提升 只能先定义再使用；会产生块级作用域，在{}之外不能访问<br>用const声明的常量 除了具有let的特点外 必须要给初始值 且不能被重新赋值 </p><h2 id="2-解构赋值"><a href="#2-解构赋值" class="headerlink" title="2.解构赋值"></a>2.解构赋值</h2><p>从对象中把属性解放出来，当做变量来使用。语法：    <code>let {属性名1, 属性名2} = 对象名</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; </span><br><span class="line">name = <span class="string">"liuxiao"</span>,</span><br><span class="line">age = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>:username,age&#125; = person</span><br><span class="line"><span class="built_in">console</span>.log(username)  <span class="comment">//name可以重命名为username</span></span><br></pre></td></tr></table></figure><h2 id="3-箭头函数"><a href="#3-箭头函数" class="headerlink" title="3.箭头函数"></a>3.箭头函数</h2><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(形参) =&gt; &#123;函数体&#125;;</span><br></pre></td></tr></table></figure><p>箭头函数实际上是一个匿名函数，没有函数名，没有function关键字<br>箭头函数内部的this永远指向外部的this<br>也可以给箭头函数起名字： let Add = (形参) =&gt; {函数体};</p><p>箭头函数的变体： </p><ul><li>1.如果左侧形参只有一个，左侧的 () 可以省略</li><li>2.如果右侧函数体代码只有一行，右侧的 {} 可以省略，默认会返回执行结果，不能再添加return</li><li>3.如果满足上面两个条件，可以同时省略 () 和 {}</li></ul><h2 id="4-定义对象中的属性和方法的快捷方式"><a href="#4-定义对象中的属性和方法的快捷方式" class="headerlink" title="4.定义对象中的属性和方法的快捷方式"></a>4.定义对象中的属性和方法的快捷方式</h2><p>语法： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"zs"</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123;name,age,show,say()&#123;&#125;&#125;</span><br></pre></td></tr></table></figure><p>对象的属性名 和 变量名相同时，不用再写一次变量名，相当于”name”:name 省略成name ; 方法同理<br>对象内定义方法时 <code>say(){}</code> 相当于<code>say: function(){}</code></p>]]></content>
      
      
      <categories>
          
          <category> nodeJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodeJs </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/2019/06/26/0.tips/3.%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2019/06/26/0.tips/3.%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-使用Jq插件上传"><a href="#1-使用Jq插件上传" class="headerlink" title="1.使用Jq插件上传"></a>1.使用Jq插件上传</h2><p>使用jQuery-fileupload插件<br>1.引入以下三个文件：</p><ul><li>jquery.ui.widget.js</li><li>jquery.iframe-transport.js</li><li>jquery.fileupload.js</li></ul><p>2.file表单元素设置<br><code>name=&#39;file&#39;</code><br><code>data-url=&quot;后台接口地址&quot;</code></p><p>3.js里对表单控件操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#fileUpload'</span>).fileupload(&#123;</span><br><span class="line">    dataType: <span class="string">'json'</span>,</span><br><span class="line">    done: <span class="function"><span class="keyword">function</span> (<span class="params">e, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> imgUrl= data._response.result.picAddr;</span><br><span class="line">        $(<span class="string">"#showBrand"</span>).attr(<span class="string">"src"</span>,imgUrl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-使用ajax上传文件"><a href="#2-使用ajax上传文件" class="headerlink" title="2.使用ajax上传文件"></a>2.使用ajax上传文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#file"</span>).on(<span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> file = <span class="keyword">this</span>.files[<span class="number">0</span>]; <span class="comment">//是一个对象 存储了此图片相关的信息</span></span><br><span class="line">        <span class="keyword">var</span> filedata = <span class="keyword">new</span> FormData(); <span class="comment">//是一个对象 类型为FormData</span></span><br><span class="line">        filedata.append(<span class="string">"file"</span>, file); <span class="comment">//往此对象内部添加图片相关信息</span></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">"post"</span>,</span><br><span class="line">            url: <span class="string">"/category/addSecondCategoryPic"</span>,</span><br><span class="line">            data: filedata,</span><br><span class="line">            contentType: <span class="literal">false</span>, <span class="comment">//设置之后文件类型变为multipart/form-data</span></span><br><span class="line">            processData: <span class="literal">false</span>, <span class="comment">//不需要进行数据转换 用原格式发送</span></span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                brandLogo = res.picAddr;</span><br><span class="line">                $(<span class="string">".brandimg"</span>).attr(<span class="string">"src"</span>, brandLogo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><ul><li>contentType 类型：Boolean<br>作用是告诉服务器，浏览器发来了什么数据；一般情况下，我们不需要设置它。默认值为’application/x-www-form-urlencoded; charset=UTF-8’；<br>上传文件时，我们会将content-type设置成flase，这样在发送请求时，请求头里content-Type会变成multipart/form-data</li></ul><ul><li>processData  类型：Boolean<br>默认值: true。默认情况下，通过data选项传递进来的数据，如果是一个对象(技术上讲只要不是字符串)，都会处理转化成一个查询字符串，以配合默认内容类型 “application/x-www-form-urlencoded”。如果要发送 DOM 树信息或其它不希望转换的信息，设置为 false。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器touchmove事件存在的问题</title>
      <link href="/2019/06/21/8.diary/4.%E6%B5%8F%E8%A7%88%E5%99%A8touchmove%E4%BA%8B%E4%BB%B6%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2019/06/21/8.diary/4.%E6%B5%8F%E8%A7%88%E5%99%A8touchmove%E4%BA%8B%E4%BB%B6%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>最近做项目经常在 chrome 的控制台看到如下提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Unable to preventDefault inside passive event listener due to target being treated as passive. </span><br><span class="line">See https://www.chromestatus.com/features/5093566007214080</span><br></pre></td></tr></table></figure><p>于是 Google 了一番，找到这篇文章，有了详细解释。<a href="https://developers.google.com/web/updates/2017/01/scrolling-intervention" target="_blank" rel="noopener">Making touch scrolling fast by default</a></p><p>简而言之：</p><p>由于浏览器必须要在执行事件处理函数之后，才能知道有没有掉用过 preventDefault() ，这就导致了浏览器不能及时响应滚动，略有延迟。</p><p>所以为了让页面滚动的效果如丝般顺滑，从 chrome56 开始，在 window、document 和 body 上注册的 touchstart 和 touchmove 事件处理函数，会默认为是 passive: true。浏览器忽略 preventDefault() 就可以第一时间滚动了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">举例：</span><br><span class="line">window.addEventListener(&apos;touchmove&apos;, func) 效果和下面一句一样</span><br><span class="line">window.addEventListener(&apos;touchmove&apos;, func, &#123; passive: true &#125;)</span><br></pre></td></tr></table></figure><p>这就导致了一个问题：</p><p>如果在以上这 3 个元素的 touchstart 和 touchmove 事件处理函数中调用 e.preventDefault() ，会被浏览器忽略掉，并不会阻止默认行为。<br>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  height: 2000px;</span><br><span class="line">  background: linear-gradient(to bottom, red, green);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在 chrome56 中，照样滚动，而且控制台会有提示，blablabla</span><br><span class="line">window.addEventListener(&apos;touchmove&apos;, e =&gt; e.preventDefault())</span><br></pre></td></tr></table></figure><p>那么如何解决这个问题呢？不让控制台提示，而且 preventDefault() 有效果呢？<br>两个方案：<br>1、注册处理函数时，用如下方式，明确声明为不是被动的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&apos;touchmove&apos;, func, &#123; passive: false &#125;)</span><br></pre></td></tr></table></figure><p>2、应用 CSS 属性<code>touch-action: none;</code> 这样任何触摸事件都不会产生默认行为，但是 touch 事件照样触发。<br>touch-action 还有很多选项，详细请参考<a href="https://w3c.github.io/pointerevents/#the-touch-action-css-property" target="_blank" rel="noopener">touch-action</a></p><p>[注]未来可能所有的元素的 touchstart touchmove 事件处理函数都会默认为 passive: true</p><blockquote><p>注：本文转载自<a href="https://segmentfault.com/a/1190000008512184?tdsourcetag=s_pcqq_aiomsg" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008512184?tdsourcetag=s_pcqq_aiomsg</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tips </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客个性化定制</title>
      <link href="/2019/06/16/8.diary/3.Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E5%AE%9A%E5%88%B6/"/>
      <url>/2019/06/16/8.diary/3.Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AA%E6%80%A7%E5%8C%96%E5%AE%9A%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>博客的个性化修改主要涉及两个文件：<br>1.博客根目录下的config.yml  –博客配置文件<br>2.主题文件夹根目录下的config.yml  –主题配置文件</p></blockquote><h2 id="1-修改博客根目录的Config-yml"><a href="#1-修改博客根目录的Config-yml" class="headerlink" title="1.修改博客根目录的Config.yml"></a>1.修改博客根目录的Config.yml</h2><p>这个配置文件是针对你的博客整站进行配置，如网站标题，作者等，可以适应各个主题。<br>下面列举几个建议修改的字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">title:#网站标题</span><br><span class="line">subtitle: #网站子标题</span><br><span class="line">description: #网站描述</span><br><span class="line">keywords: #关键词</span><br><span class="line">author: #作者名称</span><br><span class="line">language: #默认语言 常见的有en,zh-CN，zh-Hans等</span><br><span class="line">timezone: #时区 一般无需修改</span><br><span class="line">url: #网站链接 如果有域名可以使用域名，如果没有就是github的默认域名</span><br><span class="line">root: #网站根目录 如果你的网站内容是放在子文件夹，此处应该修改为子文件夹</span><br><span class="line">per_page: #每页显示的文章数量，设置为0可以关闭分页功能</span><br><span class="line">theme: #博客使用的主题，应当和themes文件夹下的主题文件夹名字相同，默认是landscape</span><br><span class="line">deploy: #博客部署相关的信息，在上一篇博文里已经介绍</span><br></pre></td></tr></table></figure><h2 id="2-如何替换默认主题"><a href="#2-如何替换默认主题" class="headerlink" title="2.如何替换默认主题"></a>2.如何替换默认主题</h2><p>默认主题功能比较单一，网上有很多不同风格的hexo主题，官方主题链接：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a><br>每个主题都有自己的github页面，详细介绍了主题如何安装，配置，下面拿NexT主题举例，NexT是一款简洁高效，功能强大的主题，内部集成了丰富的插件，使用响应式设计，可扩展性也很好，被广泛使用。<br>NexT官方文档：<a href="https://theme-next.org/docs/getting-started/" target="_blank" rel="noopener">https://theme-next.org/docs/getting-started/</a></p><ul><li>主题安装方法：<br>在Blog文件夹下，打开Git bash命令行窗口，输入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li></ul><p>完成后会在Blog/themes文件夹下看到多了一个next文件夹，主题的相关文件就在此文件夹下。</p><ul><li>切换至NexT主题<br>修改<strong>博客配置文件</strong>config.yml的theme字段，改成next即可<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></li></ul><p>修改完成后，启动本地服务器打开localhost:4000，你会发现主题已经换成了NexT的默认样子<br><img src="https://d33wubrfki0l68.cloudfront.net/90fa9a4a64b8ddf623b4b88c59f821f60500655a/6bf8d/images/docs/next-default-scheme-linux.png" alt="NexT默认"><br>至此 你已经完成了主题的安装 搭建博客的两大步已经完成，后面要做的工作主要是在<strong>主题配置文件</strong>下进行的，比如修改样式，添加第三方服务等。</p><h2 id="3-修改NexT主题"><a href="#3-修改NexT主题" class="headerlink" title="3.修改NexT主题"></a>3.修改NexT主题</h2><p>参考本文：<a href="https://blog.csdn.net/weixin_39345384/article/details/80785373" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39345384/article/details/80785373</a></p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Diary </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github 博客搭建指南</title>
      <link href="/2019/06/16/8.diary/2.Hexo+Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/"/>
      <url>/2019/06/16/8.diary/2.Hexo+Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装Git和node-JS"><a href="#1-安装Git和node-JS" class="headerlink" title="1.安装Git和node.JS"></a>1.安装Git和node.JS</h2><p>Git下载地址：<a href="https://www.git-scm.com/download/win" target="_blank" rel="noopener">https://www.git-scm.com/download/win</a><br>node.JS下载地址：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>下载和安装过程不再赘述，可以按照需要更改安装路径，其他选项保持默认即可。<br>检测是否安装完成：<br>安装完成后，在桌面空白处右键，选择Git Bash here，弹出git命令行窗口<br>    输入node -v 回车 应当能看到nodeJs的版本号<br>    输入npm -v 回车 应当能看到npm版本号<br>以上步骤确认无误后，进行下一步</p><h2 id="2-注册GitHub账号，新建代码仓库"><a href="#2-注册GitHub账号，新建代码仓库" class="headerlink" title="2.注册GitHub账号，新建代码仓库"></a>2.注册GitHub账号，新建代码仓库</h2><ul><li>注册账号<br>注册地址：<a href="https://github.com/join?source=login" target="_blank" rel="noopener">https://github.com/join?source=login</a><br>账号注册完成后，点击右上角Sign in登录</li><li>创建代码仓库<br>登录成功，点击头像旁边的加号，选择new repository<br><img src="https://blog-1259330568.cos.ap-shanghai.myqcloud.com/personal/hexo/newResp.jpg" alt="创建代码仓库"><br>在新窗口填写repository name为：<code>你的git账号昵称+.io</code><br>例如：我的git账号是dingx1an，新建的仓库名字就是dingx1an.io<br>其他选项不用修改，点击create repository<br><img src="https://blog-1259330568.cos.ap-shanghai.myqcloud.com/personal/hexo/newrep1.jpg" alt="填写仓库参数"><br>创建完成后，在右上角，头像右侧有一个下拉按钮，点击your repositories<br><img src="https://blog-1259330568.cos.ap-shanghai.myqcloud.com/personal/hexo/yourrep.jpg" alt="选择仓库"><br>可以看到当前账号下的所有仓库，此处只有一个dingx1an.io<br><img src="https://blog-1259330568.cos.ap-shanghai.myqcloud.com/personal/hexo/myrepo.jpg" alt="所有仓库"></li><li>生成SSH key<br>打开git的命令行窗口，输入以下命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot; 回车</span><br><span class="line">git config --global user.email &quot;youremail&quot; 回车</span><br></pre></td></tr></table></figure></li></ul><p>yourname为你的github用户名，youremail为你的GitHub注册邮箱<br>创建SSH key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>youremail为你的GitHub注册邮箱，输入命令后一路按下Enter键，直到命令窗口提示已经生成了ssh秘钥文件，默认是在 C:\Users\你的用户名\·ssh 文件夹下，文件名称是id_rsa.pub，使用记事本打开后复制全部内容备用</p><ul><li>将SSH key添加到Github<br>在github页面点击头像旁边的下拉按钮，选择settings，在左侧切换到SSH and GPG keys选项卡<br><img src="https://blog-1259330568.cos.ap-shanghai.myqcloud.com/personal/hexo/sshkey.jpg" alt="添加ssh秘钥"><br>点击 New SSH key 输入title(随便)和key值，点击Add SSH key按钮<br><img src="https://blog-1259330568.cos.ap-shanghai.myqcloud.com/personal/hexo/sshkeyadd.jpg" alt="添加ssh秘钥"><br>检查是否添加成功：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li></ul><p>如果成功会出现连接成功字样</p><h2 id="3-安装cnpm淘宝源"><a href="#3-安装cnpm淘宝源" class="headerlink" title="3.安装cnpm淘宝源"></a>3.安装cnpm淘宝源</h2><p>在桌面上进入git bash命令行，输入以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>后续安装Npm包时只需要在原命令之前加个<code>c</code>即可<br>ps: 也可以将默认npm源地址切换到淘宝源，输入以下命令<br>临时修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>全局修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="4-安装Hexo博客组件"><a href="#4-安装Hexo博客组件" class="headerlink" title="4.安装Hexo博客组件"></a>4.安装Hexo博客组件</h2><p>在Git命令行输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>等待一段时间后，命令行里会出现成功提示<br>可以使用<code>hexo -v</code>检查是否安装完成</p><h2 id="5-初始化Hexo和本地预览"><a href="#5-初始化Hexo和本地预览" class="headerlink" title="5.初始化Hexo和本地预览"></a>5.初始化Hexo和本地预览</h2><p>在你想要存放博客的文件夹内Git bash here，输入以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init Blog</span><br></pre></td></tr></table></figure><p>命令执行完成后，会在你的当前文件夹内生成一个名字为Blog的文件夹（文件夹名字可以自定义），之后博客的所有相关文件都存放在Blog文件夹下面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd Blog //进入博客文件夹</span><br><span class="line">npm install //安装所需的npm包</span><br></pre></td></tr></table></figure><p>执行完成后 可以在本地文件夹下看到以下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">node_modules: 依赖包</span><br><span class="line">public：存放生成的页面</span><br><span class="line">scaffolds：生成文章的一些模板</span><br><span class="line">source：用来存放你的文章和自定义页面</span><br><span class="line">themes：主题</span><br><span class="line">_config.yml: 博客的配置文件</span><br></pre></td></tr></table></figure><p>在Blog文件夹下 打开git bash命令行 ，输入 <code>hexo g</code> 按下回车生成博客的静态文件，然后输入<code>hexo s</code> 按下回车，启动本地hexo server，之后可以看到<br> <img src="https://blog-1259330568.cos.ap-shanghai.myqcloud.com/personal/hexo/hexos.jpg" alt="hexo服务器"></p><p>在浏览器中访问localhost:4000，就能看到当前博客的页面，只不过主题是默认的，后续再修改即可<br> <img src="https://blog-1259330568.cos.ap-shanghai.myqcloud.com/personal/hexo/hexoland.png" alt="hexo默认页面"></p><h2 id="6-将博客部署到Github"><a href="#6-将博客部署到Github" class="headerlink" title="6.将博客部署到Github"></a>6.将博客部署到Github</h2><p>本地预览博客页面没问题后，修改博客文件夹的根目录下config.yml文件，<br>在文件顶部，修改url字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url: https://github.com/dingx1an</span><br><span class="line">root: /dingx1an.io</span><br></pre></td></tr></table></figure><p>在文件最底部，修改repo字段：<br> <img src="https://blog-1259330568.cos.ap-shanghai.myqcloud.com/personal/hexo/hxconfig.jpg" alt="hexo配置文件"><br>github字段修改成自己的库链接，添加branch字段，其他地方不用修改<br>修改完Config.yml文件后，在Blog文件夹内启动git bash，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git -save</span><br></pre></td></tr></table></figure><p>安装hexo上传插件，安装完成后，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>实现博客的部署操作，注意deploy时可能要你输入GitHub的username和password</p><h2 id="7-开启github-pages服务"><a href="#7-开启github-pages服务" class="headerlink" title="7.开启github pages服务"></a>7.开启github pages服务</h2><p>部署成功后，可以在github的个人仓库页面看到本地上传的文件：<br><img src="https://blog-1259330568.cos.ap-shanghai.myqcloud.com/personal/hexo/gitfile.jpg" alt="github pages"><br>接下来需要开启github pages服务，将博客放到网络上：<br>在仓库页面，选择settings<br><img src="https://blog-1259330568.cos.ap-shanghai.myqcloud.com/personal/hexo/gitpages1.jpg" alt="github pages"><br> 往下拉，直到Github Pages部分，按照下图选择<br><img src="https://blog-1259330568.cos.ap-shanghai.myqcloud.com/personal/hexo/gitpages2.jpg" alt="github pages"><br>这样就可以使用默认的地址（第一个蓝色框框后面的地址）访问你的博客了</p><blockquote><p>Hexo里常用的命令：<br><code>hexo s</code> 启动本地hexo服务器<br><code>hexo g</code> 生成本地的静态文件<br><code>hexo d</code> 部署本地文件到github<br><code>hexo clean</code> 清理本地静态文件缓存</p></blockquote><p>博客主题修改和自定义配置，在后面的文章里再补充把。</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Diary </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客图床从七牛云换到腾讯</title>
      <link href="/2019/06/15/8.diary/1.%E5%9B%BE%E5%BA%8A%E4%BB%8E%E4%B8%83%E7%89%9B%E4%BA%91%E6%9B%BF%E6%8D%A2%E5%88%B0%E8%85%BE%E8%AE%AF/"/>
      <url>/2019/06/15/8.diary/1.%E5%9B%BE%E5%BA%8A%E4%BB%8E%E4%B8%83%E7%89%9B%E4%BA%91%E6%9B%BF%E6%8D%A2%E5%88%B0%E8%85%BE%E8%AE%AF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天收到邮件通知 七牛云存储空间默认的测试域名到期，被回收了，于是博客里所有外链图片都失效了。<br>百度得知，七牛图床如果没有自定义加速域名，测试域名的有效期只有30天，之后就会被回收。然鹅添加自定义域名需要备案 对小博客来说太麻烦了，所以不得已把图床换成了腾讯云。刚好现在博客是放在Coding上，也相当于在腾讯云里。腾讯云默认有6个月时效的免费空间，就算到期后收费标准也比较低，对于小破站来说完全可以接受。</p></blockquote><p>切换方法简述： </p><ul><li><p>在七牛云上新建存储空间newblog，使用七牛云的qshell工具，把原来的图片全部转移到新空间；因为新空间会有一个默认的测试域名，后面批量下载时会使用到新的测试域名。</p></li><li><p>使用批量下载七牛云图片的工具，把图片下载到本地。上传到腾讯云，博客文章里只需要使用sublime批量替换图片的域名即可，并不是很麻烦。</p></li><li><p>具体参考的博文：<br><a href="https://www.jianshu.com/p/a0c32c22ac3e" target="_blank" rel="noopener">七牛云测试域名失效怎么办</a><br><a href="https://boke112.com/4288.html" target="_blank" rel="noopener">如何批量下载七牛云图片</a><br><a href="https://blog.csdn.net/dataiyangu/article/details/85220829" target="_blank" rel="noopener">腾讯云使用</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端生词本</title>
      <link href="/2019/06/10/0.tips/2.%E5%89%8D%E7%AB%AF%E7%94%9F%E8%AF%8D%E6%9C%AC/"/>
      <url>/2019/06/10/0.tips/2.%E5%89%8D%E7%AB%AF%E7%94%9F%E8%AF%8D%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">name</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">hover</td><td align="center">徘徊，犹豫，鼠标移动到链接上</td></tr><tr><td align="center">indent</td><td align="center">缩进，文本缩进</td></tr><tr><td align="center">italic</td><td align="center">倾斜的 font-style设置字体倾斜</td></tr><tr><td align="center">nav</td><td align="center">导航-navigation的缩写</td></tr><tr><td align="center">solid</td><td align="center">立体的，结实的。在盒子边框属性中意为单实线</td></tr><tr><td align="center">dashed</td><td align="center">虚线，在盒子边框属性中意为虚线</td></tr><tr><td align="center">dotted</td><td align="center">密布的，意为边框使用点线</td></tr><tr><td align="center">collapse</td><td align="center">合并，例如表格边框合并成一条线</td></tr><tr><td align="center">valign</td><td align="center">vertical align的缩写，意为垂直对齐方式。vertical 垂直的。</td></tr><tr><td align="center">even</td><td align="center">偶数</td></tr><tr><td align="center">odd</td><td align="center">奇数</td></tr><tr><td align="center">deg</td><td align="center">degree的缩写，度数</td></tr><tr><td align="center">skew</td><td align="center">斜交 歪斜</td></tr><tr><td align="center">iteration</td><td align="center">反复，重复  iteration-count 播放次数</td></tr><tr><td align="center">alternate</td><td align="center">轮流 交替  在animation-direction里是倒放的意思</td></tr><tr><td align="center">opacity</td><td align="center">不透明度 为1时不透明  为0时透明</td></tr><tr><td align="center">stretch</td><td align="center">拉伸</td></tr><tr><td align="center">background-size</td><td align="center">cover,contain设置背景平铺方式</td></tr><tr><td align="center">background</td><td align="center">-webkit-linear-gradient 背景颜色渐变</td></tr><tr><td align="center">prompt</td><td align="center">浏览器获取输入 取到的是字符型</td></tr><tr><td align="center">parseInt</td><td align="center">转换成整数</td></tr><tr><td align="center">parseFloat</td><td align="center">转换成浮点型</td></tr><tr><td align="center">sibling</td><td align="center">兄弟姐妹</td></tr><tr><td align="center">append</td><td align="center">附加-appendChild添加节点</td></tr><tr><td align="center">propagation</td><td align="center">传播-stopPropagation阻止冒泡</td></tr><tr><td align="center">interval</td><td align="center">间隔-setInterval 设置定时器</td></tr><tr><td align="center">navigator</td><td align="center">领航员-是BOM里的浏览器对象</td></tr><tr><td align="center">explode</td><td align="center">爆炸-php里分割字符串的方法</td></tr><tr><td align="center">decode</td><td align="center">译码-php里json_decode把字符串转为数组的方法</td></tr><tr><td align="center">encode</td><td align="center">编码-php里json_encode把数组转为字符串</td></tr><tr><td align="center">serialize</td><td align="center">序列化-jq里Form表单的序列化方法</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生词本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知识补充</title>
      <link href="/2019/06/10/0.tips/1.%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85/"/>
      <url>/2019/06/10/0.tips/1.%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h3 id="1-line-height会继承，如果给了ul，li没有设置的话会继承"><a href="#1-line-height会继承，如果给了ul，li没有设置的话会继承" class="headerlink" title="1.line-height会继承，如果给了ul，li没有设置的话会继承"></a>1.line-height会继承，如果给了ul，li没有设置的话会继承</h3><h3 id="2-伪元素不可以使用js控制，因为js无法选中伪元素"><a href="#2-伪元素不可以使用js控制，因为js无法选中伪元素" class="headerlink" title="2.伪元素不可以使用js控制，因为js无法选中伪元素"></a>2.伪元素不可以使用js控制，因为js无法选中伪元素</h3><h3 id="3-最初的伪元素用一个冒号-CSS3中开始使用两个冒号"><a href="#3-最初的伪元素用一个冒号-CSS3中开始使用两个冒号" class="headerlink" title="3.最初的伪元素用一个冒号: CSS3中开始使用两个冒号::"></a>3.最初的伪元素用一个冒号: CSS3中开始使用两个冒号::</h3><p>在 CSS3 中为了区别伪元素和伪类，为伪元素使用了双冒号，即 ::before为伪元素 ； :before    为伪类；<br>伪类有：:first-child ，:link，:visited，:hover，:active,:focus，:lang<br>伪元素有： ::first-line，::first-letter，::before，::after，::selection</p><h3 id="4-flex布局不能实现多个宽高不同的元素-无缝瀑布流布局；"><a href="#4-flex布局不能实现多个宽高不同的元素-无缝瀑布流布局；" class="headerlink" title="4.flex布局不能实现多个宽高不同的元素 无缝瀑布流布局；"></a>4.flex布局不能实现多个宽高不同的元素 无缝瀑布流布局；</h3><h3 id="5-flex可以实现多列布局，每列的高度按照内容最高的一列等高"><a href="#5-flex可以实现多列布局，每列的高度按照内容最高的一列等高" class="headerlink" title="5.flex可以实现多列布局，每列的高度按照内容最高的一列等高"></a>5.flex可以实现多列布局，每列的高度按照内容最高的一列等高</h3><h3 id="6-多列排版是CSS3的新特性"><a href="#6-多列排版是CSS3的新特性" class="headerlink" title="6.多列排版是CSS3的新特性"></a>6.多列排版是CSS3的新特性</h3><h3 id="7-数组元素未给值时是undifined，如arr-，其中每一项是undifined"><a href="#7-数组元素未给值时是undifined，如arr-，其中每一项是undifined" class="headerlink" title="7.数组元素未给值时是undifined，如arr = [ , , ]，其中每一项是undifined"></a>7.数组元素未给值时是undifined，如arr = [ , , ]，其中每一项是undifined</h3><h3 id="8-看以下JavaScript代码，控制台打印的结果是什么？"><a href="#8-看以下JavaScript代码，控制台打印的结果是什么？" class="headerlink" title="8.看以下JavaScript代码，控制台打印的结果是什么？"></a>8.看以下JavaScript代码，控制台打印的结果是什么？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x,y;</span><br><span class="line">x=<span class="number">10</span>;</span><br><span class="line">y=x++;</span><br><span class="line"><span class="built_in">console</span>.log(y)  <span class="comment">//10</span></span><br></pre></td></tr></table></figure><h3 id="9-阻止链接跳转-把链接的-改成javascript"><a href="#9-阻止链接跳转-把链接的-改成javascript" class="headerlink" title="9.阻止链接跳转 把链接的#改成javascript:;"></a>9.阻止链接跳转 把链接的#改成javascript:;</h3><h3 id="10-数组和字符串方法"><a href="#10-数组和字符串方法" class="headerlink" title="10.数组和字符串方法"></a>10.数组和字符串方法</h3><p>数组的方法：<br>数组转换为字符串： <code>arr.toString或者arr.join(&#39;分隔符&#39;)</code><br>数组截取1： <code>arr.slice(startIndex,endIndex)</code> 包含开始 不包含结束，如果只有一个值，往后截取到末尾<br>数组截取2： <code>arr.splice(startIndex,length,replace)</code> 从开始索引截取一定长度，replace是可选参数：替换被截取的元素，改变原数组</p><p>字符串的方法：<br>字符串转换为数组： <code>str.split(&quot;分隔符&quot;)</code> 按照字符串里的分隔符 转换为数组<br>字符串截取1： <code>str.substring(startIndex,endIndex)</code> 包含开始，不包含结束，如果只有一个值，往后截取到末尾<br>字符串截取2： <code>str.substr(startIndex,length)</code> 从某个字符开始截取，截取长度为length，如果只有一个值，截取到末尾</p><h3 id="11-js和jq里insertBefore方法的区别："><a href="#11-js和jq里insertBefore方法的区别：" class="headerlink" title="11.js和jq里insertBefore方法的区别："></a>11.js和jq里insertBefore方法的区别：</h3><p>js里insertBefore是操作DOM节点使用的，语法：<br><code>parentNode.insertBefore(要插入的节点m，某个子节点n)</code>  在子节点n前面插入节点m</p><p>jQuery里 insertBefore是HTML/CSS方法，在被选元素之前插入元素，语法：<br><code>$(要插入的元素m).insertBefore(&#39;选择器&#39;)</code>  在选择器中的元素之前插入元素m  </p><h3 id="12-art-template模板引擎识别HTML标签"><a href="#12-art-template模板引擎识别HTML标签" class="headerlink" title="12.art-template模板引擎识别HTML标签"></a>12.art-template模板引擎识别HTML标签</h3><p>art-template模板引擎识别HTML标签，需要不编码输出，需要在输出语句里加个井号；例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#value.name&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同源和跨域</title>
      <link href="/2019/06/08/7.AJAX/3.%E5%90%8C%E6%BA%90%E5%92%8C%E8%B7%A8%E5%9F%9F/"/>
      <url>/2019/06/08/7.AJAX/3.%E5%90%8C%E6%BA%90%E5%92%8C%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="一、同源"><a href="#一、同源" class="headerlink" title="一、同源"></a>一、同源</h1><p>同源策略是浏览器的一种安全策略，所谓同源是指，域名，协议，端口完全相同。</p><h1 id="二、跨域"><a href="#二、跨域" class="headerlink" title="二、跨域"></a>二、跨域</h1><h2 id="1-什么是跨域"><a href="#1-什么是跨域" class="headerlink" title="1.什么是跨域"></a>1.什么是跨域</h2><p>不同源即跨域。域名，协议，端口有一项不同即跨域，如果只是目录不同，不算跨域。<br>跨域不能访问cookie和localstorage，不允许进行DOM操作，不能发送ajax请求。<br>允许跨域的标签：img,link,src,href。<br>跨域不是请求没有发出去，而是发出后，服务器返回的数据被浏览器拦截了。</p><h2 id="2-跨域解决方案"><a href="#2-跨域解决方案" class="headerlink" title="2.跨域解决方案"></a>2.跨域解决方案</h2><ul><li>1) 服务器端跨域 CORS <em>cross origin resource sharing</em><br>在请求的php文件中设置响应头：<br><code>header(&quot;Access-Control-Allow-Origin:*&quot;)</code> 允许所有其他域向当前域发送请求。<br><code>header(&quot;Access-Control-Allow-Origin:http://www.aa.com&quot;)</code> 允许指定的域向当前域发送请求。<br>不常用，服务器一般不允许这么设置。</li><li>2）JSONP<br>常用的跨域方式</li></ul><h2 id="3-JSONP跨域方案"><a href="#3-JSONP跨域方案" class="headerlink" title="3.JSONP跨域方案"></a>3.JSONP跨域方案</h2><h3 id="1）原理（原生js解释）"><a href="#1）原理（原生js解释）" class="headerlink" title="1）原理（原生js解释）"></a>1）原理（原生js解释）</h3><ul><li>前台修改：<br>其本质是利用了<code>&lt;script src=&quot;&quot;&gt;&lt;/script&gt;</code>标签的src具有可跨域的特性，将操作数据的函数test拼接为callback的值。</li></ul><p><img src="https://blog-1259330568.cos.ap-shanghai.myqcloud.com/20190608/1eajEg68jYO4.png?imageslim" alt="mark"></p><ul><li>后台处理：<br>服务端返回一个‘预先定义好的Javascript函数的调用’，并且将‘服务器数据’以该‘函数参数’的形式传递过来<br><img src="https://blog-1259330568.cos.ap-shanghai.myqcloud.com/20190608/nsBDCM1kXu0C.png?imageslim" alt="mark"></li></ul><p><strong>只能以GET方式请求</strong></p><h3 id="2）jquery使用JSONP跨域的步骤："><a href="#2）jquery使用JSONP跨域的步骤：" class="headerlink" title="2）jquery使用JSONP跨域的步骤："></a>2）jquery使用JSONP跨域的步骤：</h3><ul><li><p>前台修改：在ajax请求里设置datatype为jsonp，开启跨域请求<br><img src="https://blog-1259330568.cos.ap-shanghai.myqcloud.com/20190608/Ic7JxGnJWcIw.png?imageslim" alt="mark"></p></li><li><p>后台处理：将回调函数和参数拼接后返回，和原生js处理相同<br><img src="https://blog-1259330568.cos.ap-shanghai.myqcloud.com/20190608/OldxPUN25ofx.png?imageslim" alt="mark"></p></li></ul><blockquote><p>ajax和jsonp的本质不一样，jsonp是通过JavaScript标签发送请求；ajax是通过XMLhttpRequest实现发送请求</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板引擎</title>
      <link href="/2019/06/04/7.AJAX/2.%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
      <url>/2019/06/04/7.AJAX/2.%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<blockquote>> md文件中如果直接出现{{}}没有被代码块包裹时，会出现解析问题。要使用{%raw%}和{%endraw%}包裹起来。</blockquote><h1 id="一、模板引擎"><a href="#一、模板引擎" class="headerlink" title="一、模板引擎"></a>一、模板引擎</h1><h2 id="1-为什么使用模板引擎"><a href="#1-为什么使用模板引擎" class="headerlink" title="1.为什么使用模板引擎"></a>1.为什么使用模板引擎</h2><p>从json获取数据后，想要生成页面结构，需要拼接字符串，效率低且繁琐；</p><h2 id="2-什么是模板引擎"><a href="#2-什么是模板引擎" class="headerlink" title="2.什么是模板引擎"></a>2.什么是模板引擎</h2><p>为了使用户界面和业务数据分离，用于生成特定的网页结构块。为了动态渲染的时候简化字符串的拼接。</p><h2 id="3-流行模板引擎"><a href="#3-流行模板引擎" class="headerlink" title="3.流行模板引擎"></a>3.流行模板引擎</h2><p><a href="http://tangram.baidu.com/BaiduTemplate/" target="_blank" rel="noopener">BaiduTemplate</a><br><a href="http://aui.github.io/art-template/zh-cn/" target="_blank" rel="noopener">ArtTemplate</a><br><a href="https://github.com/shepherdwind/velocity.js/" target="_blank" rel="noopener">velocity.js</a><br><a href="http://handlebarsjs.com/" target="_blank" rel="noopener">Handlebars</a> <br><br>速度最快，最常用的是<code>artTemplate</code></p><h2 id="4-art-template语法"><a href="#4-art-template语法" class="headerlink" title="4.art-template语法"></a>4.<code>art-template</code>语法</h2><p>分为原生语法和简洁语法，引入不同的js文件</p><ul><li>原生语法： 引入 <code>template-native.js</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">逻辑表达式：` &lt;% 表达式 %&gt;` 里面可以写js代码</span><br><span class="line">输出表达式： 编码输出：`&lt;%=content%&gt;`  不编码输出： `&lt;%=#content%&gt; `</span><br></pre></td></tr></table></figure><p>（编码可以防止数据中含有 HTML 字符串，避免引起 XSS 攻击）</p><ul><li>简洁语法： 引入<code>template.js</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">逻辑表达式：&#123;&#123; 表达式 &#125;&#125;</span><br><span class="line">输出表达式： 编码输出&#123;&#123;content&#125;&#125; 不编码输出&#123;&#123;#content&#125;&#125;</span><br></pre></td></tr></table></figure><p>条件表达式：<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190606/FLjsnRuhxz7K.png?imageslim" alt="mark"></p><p>循环遍历表达式：<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190606/ikQwt791MV9L.png?imageslim" alt="mark"></p><h2 id="5-art-template模板使用方法："><a href="#5-art-template模板使用方法：" class="headerlink" title="5.art-template模板使用方法："></a>5.<code>art-template</code>模板使用方法：</h2><ul><li><p>创建模板： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type = <span class="string">"text/template"</span> id = <span class="string">"temp"</span>&gt; </span><br><span class="line">模板结构，可以写逻辑表达式 </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用模板函数：<code>template(模板id,数据)</code><br>函数返回值是页面结构（html）<br>数据格式只能是对象形式，如果数据是数组，要包装为对象{“items”:arr}</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> 模板引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX编程</title>
      <link href="/2019/06/03/7.AJAX/1.ajax%E7%BC%96%E7%A8%8B/"/>
      <url>/2019/06/03/7.AJAX/1.ajax%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Ajax"><a href="#1-Ajax" class="headerlink" title="1.Ajax"></a>1.Ajax</h2><p>即 Asynchronous Javascript And XML，AJAX 不是一门的新的语言，而是对现有技术的综合利用。</p><ul><li><ol><li>基于web标签的xhtml+css</li></ol></li><li><ol start="2"><li>可以使用dom进行动态的显示和交互</li></ol></li><li><ol start="3"><li>使用XML和XSLT(是一种用于将XML文档转换任意文本的描述语言)进行数据的交换和操作</li></ol></li><li><ol start="4"><li>使用XMLHttpRequest进行异步的数据查询和检索等操作</li></ol></li></ul><p>本质:   是在HTTP协议的基础上以异步的方式通过XMLHttpRequest对象与服务器进行通信。<br>作用：可以在页面不刷新的情况下，请求服务器，局部更新页面的数据；</p><h2 id="2-异步Asynchronous-ə’sɪŋkrənəs"><a href="#2-异步Asynchronous-ə’sɪŋkrənəs" class="headerlink" title="2.异步Asynchronous [ə’sɪŋkrənəs]"></a>2.异步Asynchronous [ə’sɪŋkrənəs]</h2><p>指某段程序执行时不会阻塞其它程序执行，其表现形式为程序的执行顺序不依赖程序本身的书写顺序，相反则为同步。<br>异步可以提升程序的执行效率,增强用户体验</p><h2 id="3-XMLHttpRequest异步对象"><a href="#3-XMLHttpRequest异步对象" class="headerlink" title="3.XMLHttpRequest异步对象"></a>3.XMLHttpRequest异步对象</h2><p>浏览器的内置对象，用于后台与服务器进行交互。可以实现不刷新整个页面，局部更新数据</p><h3 id="1-异步对象发送请求"><a href="#1-异步对象发送请求" class="headerlink" title="1.异步对象发送请求"></a>1.异步对象发送请求</h3><ul><li>1 创建异步对象<pre><code>var xhr = new XMLHttpRequest();</code></pre></li><li>2 设置请求行 open(请求方式，请求url):<pre><code>xhr.open(&quot;get/post&quot;, &quot;url?参数可选&quot;);</code></pre>get请求如果有参数就需要在url？后面拼接参数<br>post如果有参数，就在请求体中传递</li><li>3 设置请求头 <pre><code>setRequestHeader(&apos;key&apos;,&apos;value&apos;)</code></pre>get方式不需要设置请求头<br>post需要设置 <code>xhr.setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;)</code></li><li>4 设置请求体:发送请求 <pre><code>send(参数：key=value&amp;key=value)</code></pre>get在这个位置可以传递Null或空内容<pre><code>xhr.send(null)</code></pre>post如果有参数，应该在这个位置来传递参数<pre><code>xhr.send(&quot;name=&quot;+uname)</code></pre></li></ul><p><strong>注GET和POST请求方式的差异（面试题）</strong><br>1、GET没有请求主体，使用xhr.send(null)<br>2、GET可以通过在请求URL上添加请求参数<br>3、POST可以通过<code>xhr.send(&#39;name=itcast&amp;age=10&#39;)</code><br>4、POST需要设置<code>xhr.setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;)</code> 如果没设置 参数无法传到服务器<br>5、GET大小限制约4K，POST则没有限制</p><h3 id="2-判断响应是否完成"><a href="#2-判断响应是否完成" class="headerlink" title="2.判断响应是否完成"></a>2.判断响应是否完成</h3><p>复习响应报文：<br>    报文行：响应状态码 响应状态信息 200 ok<br>    报文头：服务器返回给客户端的一些额外信息<br>    报文体：服务器返回给客户端的数据<br>异步对象的相关属性：<br><code>xhr.responseText</code>:服务器返回的普通字符串<br><code>xhr.responseXML</code>：服务器返回的xml格式的字符串，XML格式的字符串只能用此方法接收<br><code>xhr.status</code>:可以获取当前服务器的响应状态 200 》成功<br><code>xhr.readyState</code>: 监听异步对象的响应状态,<br>         readyState=0：已经创建了异步对象，但是还没有调用open方法 –未初始化<br>         readyState=1：说明已经调用了open方法，初始化完成 –载入<br>         readyState=2：send方法执行完毕，请求发送 –载入完成<br>         readyState=3：正在接收响应数据 –交互<br>         readyState=4：响应的内容解析完毕，可以在客户端使用了 –完成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 1.服务器成功响应 2.数据已经返回到客户端并且可以使用了</span></span><br><span class="line"><span class="keyword">if</span> (xhr.status == <span class="number">200</span> &amp;&amp; xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line"><span class="comment">// 将返回结果在页面中展示</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">".msg"</span>).innerHTML = xhr.responseText;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-XML"><a href="#4-XML" class="headerlink" title="4.XML"></a>4.XML</h2><p>XML是一种标记语言，类似HTML，其宗旨是用来传输数据，具有自我描述性（固定的格式的数据）。<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190603/mcf1gXYhbf4I.png?imageslim" alt="mark"><br>1、第一句不可更改，必须有一个根元素<br>2、标签名称不可有空格、不可以数字或.开头、大小写敏感<br>3、不可交叉嵌套<br>4、属性双引号（浏览器自动修正成双引号了）<br>5、特殊符号要使用实体<br>6、注释和HTML一样<br>虽然可以描述和传输复杂数据，但是其解析过于复杂并且体积较大，所以实现开发已经很少使用了。<br>接收XML数据时，接收XML数据时，js使用xhr.responseXML接收，php设置响应头为header(“Content-Type:application/xml;charset=utf-8”)</p><h2 id="5-JSON"><a href="#5-JSON" class="headerlink" title="5.JSON"></a>5.JSON</h2><p>即 JavaScript Object Notation，另一种轻量级的文本数据交换格式，独立于语言。JSON体积小、解析方便且高效，在实际开发成为首选。<br>接收json数据时，php设置响应头为header(“Content-Type:application/json;charset=utf-8”)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">属性名<span class="number">1</span>:属性值,</span><br><span class="line">属性名<span class="number">2</span>:属性值</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">属性名<span class="number">3</span>:属性值,</span><br><span class="line">属性名<span class="number">4</span>:属性值</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="1、Javascript-解析json方法"><a href="#1、Javascript-解析json方法" class="headerlink" title="1、Javascript 解析json方法"></a>1、Javascript 解析json方法</h3><pre><code>JSON.parse()     可以将json格式的字符串 转换为js的数组或对象，类似php里的json_decode方法JSON.stringify()；    可以将js的数组或对象转换为json格式的字符串 ，类似php里的json_decode方法</code></pre><h3 id="2、PHP解析json方法"><a href="#2、PHP解析json方法" class="headerlink" title="2、PHP解析json方法"></a>2、PHP解析json方法</h3><pre><code>json_decode() 将字符串转换为数组或对象json_encode() 将数组或对象转换为字符串</code></pre><p>js和html混编：<br>    声明变量html存放生成的html标签，全部生成完后再添加到页面上</p><h2 id="6-封装AJAX工具函数"><a href="#6-封装AJAX工具函数" class="headerlink" title="6.封装AJAX工具函数"></a>6.封装AJAX工具函数</h2><p>将XMLHttpRequest封装成一个函数，提升开发效率</p><p><code>xhr.getResponseHeader(&quot;Content-Type&quot;)</code>可以获取响应头字符串，如<code>application/json;charset=utf-8</code></p><h2 id="7-jquery里的ajax"><a href="#7-jquery里的ajax" class="headerlink" title="7.jquery里的ajax"></a>7.jquery里的ajax</h2><p>jquery提供了$.ajax({})函数，参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- url 接口地址 </span><br><span class="line">- type 请求方式 </span><br><span class="line">- timeout 请求超时时间，单位是毫秒 </span><br><span class="line">- dataType 服务器返回格式，设置想要从服务器返回的数据格式 xml,json,text,html...</span><br><span class="line">- data 请求参数 使用对象形式&#123;&quot;aa&quot;:&quot;bb&quot;&#125;或者使用表单序列化方法</span><br><span class="line">- beforeSend:function()&#123;&#125; 请求发起前调用，可以实现验证操作 </span><br><span class="line">- success:funtion()&#123;&#125; 成功响应后调用 </span><br><span class="line">- error:funtion()&#123;&#125; 错误响应时调用,比如请求超时 </span><br><span class="line">- complete()&#123;&#125; 响应完成时调用（包括成功和失败），比如全局成员的释放，页面状态的重置</span><br></pre></td></tr></table></figure><p>jquery还提供了专门发送get和post类型的ajax请求的函数<br><code>$.get({url,data,success,datatype})  只能发送get请求</code><br><code>$.post({url,data,success,datatype})    只能发送post请求</code></p><p>表单序列化方法：<br><code>$(form表单).serialize();</code><br>是jquery提供的方法，可以将form里所有有name属性的表单收集，生成key=value&amp;key=value的格式的字符串<br>ajax支持处理两种格式的参数：<br>    1.对象形式 {“aa”:”bb”}<br>    2.key=value&amp;key=value格式的字符串</p><p>** 注册案例 **需要创建以下文件<br>    data.json 存储数据<br>    getCode.php 获取验证码<br>    register.php 注册操作<br>    validateUsername.php 验证用户名<br>    register.html 结构和自定js文件<br>    jquery.min.js<br>主要功能点：<br>    用户输入用户名，失去焦点时判断是否重名，给出提示；<br>    用户点击按钮获取验证码，从服务器取到验证码；<br>    用户点击注册按钮，把数据写入服务器json文件</p><p>如果ajax里设置了datatype为json，后台返回数据时要使用json格式：<br><code>echo json_encode(array(&quot;code&quot;=&gt;&quot;1&quot;,&quot;msg&quot;=&gt;&quot;用户名存在&quot;))</code></p><p><code>array_rand(arr)</code>:可以随机生成指定的数组长度内的索引</p><h3 id="附录：使用原生js编写的ajax工具函数"><a href="#附录：使用原生js编写的ajax工具函数" class="headerlink" title="附录：使用原生js编写的ajax工具函数"></a>附录：使用原生js编写的ajax工具函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> $ = &#123;</span><br><span class="line">        <span class="comment">// 将用户传递的 对象形式的参数 转换为字符串</span></span><br><span class="line">        getpa: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (data &amp;&amp; <span class="keyword">typeof</span> data == <span class="string">"object"</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> str = <span class="string">"?"</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> data) &#123;</span><br><span class="line">                    str = str + k + <span class="string">"="</span> + data[k] + <span class="string">"&amp;"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                str = str.substr(<span class="number">0</span>, str.length - <span class="number">1</span>); <span class="comment">//截取掉最后一个&amp; 得到?name=liu&amp;age=10这种格式</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;,</span><br><span class="line">        ajax: <span class="function"><span class="keyword">function</span> (<span class="params">option</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> type = option.type || <span class="string">'get'</span>; <span class="comment">//请求类型</span></span><br><span class="line">            <span class="keyword">var</span> url = option.url || location.href; <span class="comment">//请求url</span></span><br><span class="line">            <span class="comment">//请求参数，option.data格式是&#123;"name":"liu","age":10&#125;，操作后data是?name=liu&amp;age=18</span></span><br><span class="line">            <span class="keyword">var</span> data = <span class="keyword">this</span>.getpa(option.data) || <span class="string">""</span>; <span class="comment">//this指向？</span></span><br><span class="line">            <span class="keyword">var</span> success = option.success; <span class="comment">//响应成功之后的回调函数</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            <span class="keyword">if</span> (type == <span class="string">"get"</span>) &#123;</span><br><span class="line">                url += data; <span class="comment">//如果是get 把参数加进url里</span></span><br><span class="line">                data = <span class="literal">null</span>; <span class="comment">//把data置为空，get发送请求体是Null</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//请求行</span></span><br><span class="line">            xhr.open(type, url);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//请求头,get不需要请求头</span></span><br><span class="line">            <span class="keyword">if</span> (type == <span class="string">"post"</span>) &#123;</span><br><span class="line">                xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>)</span><br><span class="line">                <span class="comment">//去掉问号</span></span><br><span class="line">                data = data.substr(<span class="number">1</span>, data.length);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//请求体</span></span><br><span class="line">            xhr.send(data);</span><br><span class="line"></span><br><span class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="comment">// 接收响应的返回值</span></span><br><span class="line">                    <span class="comment">// responseText   responseXML 获取响应头字符串判断是哪种类型</span></span><br><span class="line">                    <span class="keyword">var</span> rh = xhr.getResponseHeader(<span class="string">"Content-Type"</span>);</span><br><span class="line">                    <span class="comment">// 判断</span></span><br><span class="line">                    <span class="keyword">if</span> (rh.indexOf(<span class="string">"xml"</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">                        <span class="keyword">var</span> result = xhr.responseXML;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (rh.indexOf(<span class="string">"json"</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">                        <span class="keyword">var</span> result = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//字符串里不包括xml和json，按照普通数据接收</span></span><br><span class="line">                        <span class="keyword">var</span> result = xhr.responseText;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 接收数据之后，调用回调函数</span></span><br><span class="line">                    success &amp;&amp; success(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用</span></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">"get"</span>,</span><br><span class="line">        url: <span class="string">"index.php"</span>,</span><br><span class="line">        data: &#123; <span class="string">"name"</span>: <span class="string">"liu"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前赤壁赋</title>
      <link href="/2019/06/01/6.%E5%8F%A4%E6%96%87/%E5%89%8D%E8%B5%A4%E5%A3%81%E8%B5%8B/"/>
      <url>/2019/06/01/6.%E5%8F%A4%E6%96%87/%E5%89%8D%E8%B5%A4%E5%A3%81%E8%B5%8B/</url>
      
        <content type="html"><![CDATA[<center>宋 苏轼</center><p>　　壬戌之秋，七月既望，苏子与客泛舟游于赤壁之下。清风徐来，水波不兴。举酒属客，诵明月之诗，歌窈窕之章。少焉，月出于东山之上，徘徊于斗牛之间。白露横江，水光接天。纵一苇之所如，凌万顷之茫然。浩浩乎如冯虚御风，而不知其所止；飘飘乎如遗世独立，羽化而登仙。</p><p>　　于是饮酒乐甚，扣舷而歌之。歌曰：“桂棹兮兰桨，击空明兮溯流光。渺渺兮予怀，望美人兮天一方。”客有吹洞箫者，倚歌而和之。其声呜呜然，如怨如慕，如泣如诉；余音袅袅，不绝如缕。舞幽壑之潜蛟，泣孤舟之嫠妇。</p><p>　　苏子愀然，正襟危坐，而问客曰：“何为其然也？”客曰：“‘月明星稀，乌鹊南飞。’此非曹孟德之诗乎？西望夏口，东望武昌，山川相缪，郁乎苍苍，此非孟德之困于周郎者乎？方其破荆州，下江陵，顺流而东也，舳舻千里，旌旗蔽空，酾酒临江，横槊赋诗，固一世之雄也，而今安在哉？况吾与子渔樵于江渚之上，侣鱼虾而友麋鹿，驾一叶之扁舟，举匏樽以相属。寄蜉蝣于天地，渺沧海之一粟。哀吾生之须臾，羡长 江之无穷。挟飞仙以遨游，抱明月而长终。知不可乎骤得，托遗响于悲风。”</p><p>　　苏子曰：“客亦知夫水与月乎？逝者如斯，而未尝往也；盈虚者如彼，而卒莫消长也。盖将自其变者而观之，则天地曾不能以一瞬；自其不变者而观之，则物与我皆无尽也，而又何羡乎！且夫天地之间，物各有主，苟非吾之所有，虽一毫而莫取。惟江上之清风，与山间之明月，耳得之而为声，目遇之而成色，取之无禁，用之不竭。是造物者之无尽藏也，而吾与子之所共适。“</p><p>　　客喜而笑，洗盏更酌。肴核既尽，杯盘狼籍。相与枕藉乎舟中，不知东方之既白。</p>]]></content>
      
      
      <categories>
          
          <category> 文言文 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP操作MySql数据库</title>
      <link href="/2019/06/01/5.PHP/7.PHP%E6%93%8D%E4%BD%9Cmysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2019/06/01/5.PHP/7.PHP%E6%93%8D%E4%BD%9Cmysql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="1-连接数据库"><a href="#1-连接数据库" class="headerlink" title="1.连接数据库"></a>1.连接数据库</h2><ul><li>第一步：设置编码格式<br>php文件的编码 <code>header(&quot;Content-Type:text/html;charset=utf-8&quot;)</code><br>服务器返回数据的编码<code>mysqli_set_charset($conn，&quot;utf8&quot;)</code> 默认就是utf-8，可以不设置</li><li>第二步：连接数据库<br><code>$conn = mysqli_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;mybase&quot;)</code><br>如果连接成功返回连接对象conn，如果连接失败返回false</li></ul><h2 id="2-操作数据库"><a href="#2-操作数据库" class="headerlink" title="2.操作数据库"></a>2.操作数据库</h2><p>操作数据是建立在连接数据库成功的前提下，即已经获取到了连接对象conn</p><h3 id="1-增加和删除语句"><a href="#1-增加和删除语句" class="headerlink" title="1.增加和删除语句"></a>1.增加和删除语句</h3><p>1)创建语句: <code>$sql = &quot;sql语句&quot;</code><br>2)执行语句：<code>mysqli_query($conn,$sql)</code><br>例如：<br><code>$sql = &quot;UPDATE mytable set name=&#39;刘啸&#39;,sex=&#39;男&#39;,age=23 where id = 1&quot;</code><br><code>mysqli_query($conn,$sql)</code><br>返回值 如果成功了返回true 失败了返回false<br>最近一条sql语句产生的错误信息存放在mysqli_error($conn)中</p><h3 id="2-查询语句"><a href="#2-查询语句" class="headerlink" title="2.查询语句"></a>2.查询语句</h3><p>1）创建sql查询语句 <code>$sql = &quot;sql语句&quot;</code><br>2）执行语句：<code>$res = mysqli_query($conn,$sql)</code><br>如果查询失败返回false，如果成功，分为两种情况，可以通过mysqli_num_rows($res)判断：</p><ul><li>有结果集但是没数据时<code>mysqli_num_rows($res) = 0</code></li><li>有结果集也有数据时<code>mysqli_num_rows($res) != 0</code></li></ul><p><strong>有数据时返回的结果也不是表里的具体数据，而是数据的引用</strong>。可以使用以下方法提取具体数据，生成数组：</p><ul><li><code>mysqli_fetch_array($res[,type])</code><pre><code>$res 查询语句的执行结果（结果集）type:限制生成的数组类型，取值有    MYSQLI_NUM 只生成索引数组    MYSQLI_ASSOC 只生成关联数组    MYSQLI_BOTH 同时生成两种数组</code></pre></li><li><code>mysqli_fetch_assoc($res)</code> 只生成关联数组</li><li><code>mysqli_fetch_row($res)</code> 只生成索引数组<br>如果没有读取到数据则返回空;<br>上面的函数都只能读取第一行，但是会自动将指针移动到下一行；<br>想要读取所有数据，需要使用while循环：把数据添加到$data里<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>($arr = mysqli_fetch_array($res,MYSQL_NUM))&#123;</span><br><span class="line">$result[]= $arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-关闭数据库的连接"><a href="#3-关闭数据库的连接" class="headerlink" title="3.关闭数据库的连接"></a>3.关闭数据库的连接</h2><p>数据库连接数量有上限，当不需要继续连接数据库时，需要断开连接：<br><code>mysqli_close($conn)</code></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql</title>
      <link href="/2019/06/01/5.PHP/6.MySQL/"/>
      <url>/2019/06/01/5.PHP/6.MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="一、MySQL操作"><a href="#一、MySQL操作" class="headerlink" title="一、MySQL操作"></a>一、MySQL操作</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p>mysql安装过程 参考菜鸟教程上的安装指导：<a href="https://www.runoob.com/mysql/mysql-install.html" target="_blank" rel="noopener">https://www.runoob.com/mysql/mysql-install.html</a></p><h2 id="2-可视化工具"><a href="#2-可视化工具" class="headerlink" title="2.可视化工具"></a>2.可视化工具</h2><p>使用Navicat for MySQL</p><h1 id="二、SQL语句"><a href="#二、SQL语句" class="headerlink" title="二、SQL语句"></a>二、SQL语句</h1><h2 id="1-查询语句"><a href="#1-查询语句" class="headerlink" title="1.查询语句"></a>1.查询语句</h2><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190601/DFnG3OGccYOr.png?imageslim" alt="mark"><br>查询所有数据：<br>    <code>SELECT * FROM mytable</code><br>查询某一字段的数据：<br>    <code>SELECT name,hobby FROM mytable</code><br>条件查询：<br>    <code>SELECT * FROM mytable WHERE id=3</code><br>    <code>SELECT * FROM mytable WHERE age&lt;=23</code><br>混合条件查询 ：<br>    and=&amp;&amp; not=! or=||<br>    <code>SELECT * FROM mytable WHERE age&lt;=23 and hobby=&quot;玩&quot;</code><br>可以给mytable起别名p：<br>    <code>SELECT p.name FROM mytable p where p.age=23</code><br>子查询 查询中嵌套另一个查询：<br>    <code>SELECT * FROM mytable WHERE age &gt; (SELECT age FROM mytable WHERE name=&quot;刘啸&quot;)</code><br>模糊查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM mytable WHERE name LIKE &quot;刘%&quot;</span><br><span class="line">SELECT * FROM mytable WHERE age BETWEEN 23 and 28</span><br><span class="line">SELECT * FROM mytable WHERE id in &#123;1,3,4&#125;</span><br><span class="line">SELECT * FROM mytable WHERE age is NULL  不能用等号判空</span><br></pre></td></tr></table></figure><p>多表查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM student,class where student.cid = class.classid</span><br></pre></td></tr></table></figure><p>更多使用<code>SELECT * FROM student JOIN class ON student.cid = class.classid</code><br>JOIN 还分为left join和right join，写在join左边的是左表<br>    left join：获取左表中所有数据 如果建立关联的字段在右表没有 右表的相应字段为空值<br>    right join：获取右表中所有数据 如果建立关联的字段在左表没有 左表的相应字段为空值</p><h2 id="2-增加语句"><a href="#2-增加语句" class="headerlink" title="2.增加语句"></a>2.增加语句</h2><p><code>insert(into) 表名[(字段1，字段2...)] values(值1，值2...)</code><br>[]表示可以不写字段，如果表名后面不写字段，要为每一个字段设置值；<br>如果表里有标识列，如id，增加时可以给null，系统会自动生成递增的标识；也可以不写标识列的字段，给其他字段的值就可以<br>可以为空的字段可以不给值，建议非空字段一定要赋值</p><h2 id="3-修改语句"><a href="#3-修改语句" class="headerlink" title="3.修改语句"></a>3.修改语句</h2><p><code>update 表名 set 字段1=值1，字段2=值2... where 条件</code><br>修改时要加条件 否则会修改字段的所有值</p><h2 id="4-删除语句"><a href="#4-删除语句" class="headerlink" title="4.删除语句"></a>4.删除语句</h2><p><code>delete from 表名 where 条件</code><br>删除和修改操作都是不可逆的</p><p><strong>注意：查询返回的是结果集，增删改返回的是受影响的行数</strong></p><h1 id="三、常见的数学函数"><a href="#三、常见的数学函数" class="headerlink" title="三、常见的数学函数"></a>三、常见的数学函数</h1><h2 id="1-count-计数函数"><a href="#1-count-计数函数" class="headerlink" title="1.count()计数函数"></a>1.count()计数函数</h2><p>括号里可以写：<code>*</code> 计算行数；<br>括号里写字段是计算当前字段的行数<br>null不计入计数</p><h2 id="2-max-和min-求最值的函数"><a href="#2-max-和min-求最值的函数" class="headerlink" title="2.max()和min() 求最值的函数"></a>2.max()和min() 求最值的函数</h2><p>字母比较是按照ASCII码排序</p><h2 id="3-avg-求平均值"><a href="#3-avg-求平均值" class="headerlink" title="3.avg() 求平均值"></a>3.avg() 求平均值</h2><p>括号里一般是数值型</p><h2 id="4-order-by-排序"><a href="#4-order-by-排序" class="headerlink" title="4. order by 排序"></a>4. order by 排序</h2><p><code>select * from 表名 order by id 排序字段;</code><br>排序字段： 默认是 asc 升序； desc 降序</p><h2 id="5-limit-获取指定范围的数据"><a href="#5-limit-获取指定范围的数据" class="headerlink" title="5.limit 获取指定范围的数据"></a>5.limit 获取指定范围的数据</h2><p>limit如果后面只有一个参数 获取指定的前n条记录:<br><code>select * from 表名 limit 5</code><br>如果后面有两个参数 偏移量,获取的记录数:<br><code>select * from 表名 Limit 2,4  从2开始 取4条数据</code><br>也可以使用<code>select * from 表名 limit 4 offset 2</code><br>偏移从0开始</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP状态保持-Cookie和Session</title>
      <link href="/2019/05/29/5.PHP/5.cookie%E5%92%8Csession/"/>
      <url>/2019/05/29/5.PHP/5.cookie%E5%92%8Csession/</url>
      
        <content type="html"><![CDATA[<h1 id="一、HTTP无状态"><a href="#一、HTTP无状态" class="headerlink" title="一、HTTP无状态"></a>一、HTTP无状态</h1><p>http对事务处理没有记忆能力，不会存储之前请求产生的信息，如果当前步骤需要使用之前的信息，需要就进行重传；<br>大部分情况下 需要使用之前的信息 为了解决http无状态造成的问题，有两种HTTP状态保持方法：cookie和session</p><h1 id="二、Cookie"><a href="#二、Cookie" class="headerlink" title="二、Cookie"></a>二、Cookie</h1><h2 id="1-实现原理"><a href="#1-实现原理" class="headerlink" title="1.实现原理"></a>1.实现原理</h2><ul><li>客户端发送请求</li><li>服务器将用户当前操作的相关数据存储到Cookie中（键值对形式name=&gt;value），将cookie和响应结果一起返回给客户端，在请求头中使用set-cookie的方式返回</li><li>客户端接收到响应结果，结果中包含cookie</li><li>客户端再次发送请求时，会将之前的cookie一起发送给服务器</li><li>服务器接收到请求，对请求和客户端携带的cookie再次进行处理</li></ul><h2 id="2-php里面实现cookie"><a href="#2-php里面实现cookie" class="headerlink" title="2.php里面实现cookie"></a>2.php里面实现cookie</h2><h3 id="创建cookie："><a href="#创建cookie：" class="headerlink" title="创建cookie："></a>创建cookie：</h3><pre><code>setcookie(name[,value,expire,path,domain]);</code></pre><p>想要设置后面的参数 必须设置前面的参数<br>expire:有效期 单位是s，时间参考点是php默认起始时间(1970-1-1); 可以设置为time()+秒数；<br>　　　设置永久有效期：把expired设置为PHP_INT_MAX<br>path:访问目录权限 参照是网站根目录；设置目录为父级，子目录也能访问（反过来不行）； /代表整站都能访问<br>domain: 访问域名权限 </p><h3 id="获取cookie："><a href="#获取cookie：" class="headerlink" title="获取cookie："></a>获取cookie：</h3><pre><code>$_COOKIE[name]判断客户端是否有cookie： if(isset($_COOKIE[name])){ ，，， }</code></pre><h3 id="删除cookie"><a href="#删除cookie" class="headerlink" title="删除cookie:"></a>删除cookie:</h3><pre><code>怎么创建就怎么删除，参数个数要对应1.有效期设置为过去时间2.将value设置为空字符串或false3.不设置value</code></pre><h2 id="3-特点"><a href="#3-特点" class="headerlink" title="3.特点"></a>3.特点</h2><p>cookie数据不太安全；<br>cookie只能存储字符串值；<br>cookie存储文件容量大小有限制4kb</p><p>案例： 登录功能</p><h1 id="三、Session"><a href="#三、Session" class="headerlink" title="三、Session"></a>三、Session</h1><h2 id="1-session的原理"><a href="#1-session的原理" class="headerlink" title="1.session的原理"></a>1.session的原理</h2><p>1）客户端发送请求<br>2）服务器处理：开启一个session，同时生成一个用于存储数据的文件，为这个文件生成一个id号。将处理结果和id号返回给客户端<br>3）客户端获取处理结果和sessionId<br>4）客户端再次发送请求时，会把之前的sessionId传递给服务器<br>5）服务器根据sessionId找到相应的文件，根据文件对新请求进行处理</p><h2 id="2-php实现session"><a href="#2-php实现session" class="headerlink" title="2.php实现session"></a>2.php实现session</h2><p>php默认不会开启session功能，如果想要使用。需要添加代码session_start();</p><blockquote><p>想要默认开启，通过修改配置文件php.ini下的session.auto_start为1实现。注意：修改后，打开网页就会产生sessionId，不建议修改</p></blockquote><p>session_start的执行过程：<br>    动态生成一个sessionID；<br>    在服务器生成一个存放数据的文件，文件名以sess_sessionId构成；<br>    通过响应头设置cookie，存放了本次产生的sessionID，在将来返回</p><h3 id="创建session"><a href="#创建session" class="headerlink" title="创建session"></a>创建session</h3><pre><code>session_start();$_SESSION[&apos;name&apos;] = 值; 可以是各种数据类型</code></pre><h3 id="读取session"><a href="#读取session" class="headerlink" title="读取session"></a>读取session</h3><pre><code>session_start();$user = $_SESSION[&apos;user&apos;];</code></pre><h3 id="删除一个session信息"><a href="#删除一个session信息" class="headerlink" title="删除一个session信息"></a>删除一个session信息</h3><blockquote><p>tips: 删除session是在服务端进行的，通过浏览器查看sessionID会发现还存在，因为浏览器存储的是本地缓存，只有重新打开浏览器才能看到删除效果</p></blockquote><pre><code>session_start();unset($_SESSION[&apos;user&apos;]);</code></pre><h3 id="删除所有session信息"><a href="#删除所有session信息" class="headerlink" title="删除所有session信息"></a>删除所有session信息</h3><pre><code>session_start();方式1：unset($_SESSION);方式2：$_SESSION = []</code></pre><h3 id="销毁session"><a href="#销毁session" class="headerlink" title="销毁session"></a>销毁session</h3><pre><code>session_destroy(); 会销毁整个文件</code></pre><h2 id="3-session的优点"><a href="#3-session的优点" class="headerlink" title="3.session的优点"></a>3.session的优点</h2><p>Session数据存储在服务器端，相比cookie更加安全<br>可以存储除了资源以外的数据类型<br>存储容量大小没有限制，服务器放得下就行</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议</title>
      <link href="/2019/05/29/5.PHP/4.HTTP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2019/05/29/5.PHP/4.HTTP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="一、概要"><a href="#一、概要" class="headerlink" title="一、概要"></a>一、概要</h1><h2 id="1-http的定义"><a href="#1-http的定义" class="headerlink" title="1.http的定义"></a>1.http的定义</h2><p>超文本传输协议  端与端之间的通讯协议</p><h2 id="2-建立连接-三次握手"><a href="#2-建立连接-三次握手" class="headerlink" title="2.建立连接-三次握手"></a>2.建立连接-三次握手</h2><ol><li>客户端向服务器发送一个连接请求</li><li>服务器向客户端返回一个确认信息</li><li>客户端将请求及这个确认信息发送服务器</li></ol><h2 id="3-关闭连接-四次挥手："><a href="#3-关闭连接-四次挥手：" class="headerlink" title="3.关闭连接-四次挥手："></a>3.关闭连接-四次挥手：</h2><pre><code>tcp标志位有6种标示:    SYN(synchronous建立联机)    ACK(acknowledgement 确认)    PSH(push传送)    FIN(finish结束)    RST(reset重置)    URG(urgent紧急) </code></pre><p>1.Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。<br>2.Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。<br>3.Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。<br>4.Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。      </p><h2 id="4-约定内容："><a href="#4-约定内容：" class="headerlink" title="4.约定内容："></a>4.约定内容：</h2><pre><code>- 请求 / 响应报文格式- 请求方式 —— GET / POST / etc.- 响应状态 —— 200 / 404 / 302 / 304 / etc.- 预设的请求 / 响应头</code></pre><h1 id="二、核心概念"><a href="#二、核心概念" class="headerlink" title="二、核心概念"></a>二、核心概念</h1><h2 id="1-请求报文"><a href="#1-请求报文" class="headerlink" title="1.请求报文"></a>1.请求报文</h2><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190529/W0Ue8N51Qdsm.png?imageslim" alt="mark"><br>        请求行：GET /demo.php HTTP/1.1 即 请求方式 +请求路径 +HTTP 协议版本<br>        请求头：<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190529/bWr2gOaFENki.png?imageslim" alt="mark"><br>        请求体：<br>            这次请求客户端想要发送给服务端的数据正文，一般在 GET 请求时很少用到</p><h2 id="2-响应报文"><a href="#2-响应报文" class="headerlink" title="2.响应报文"></a>2.响应报文</h2><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190529/ebEhifGjvaCI.png?imageslim" alt="mark"><br>        状态行： 协议+状态码+状态描述<br>        响应头：<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190529/cdb97OubXsba.png?imageslim" alt="mark"><br>        响应体：<br>            服务端想要返回给客户端的数据正文，一般返回的都是 HTML，也可以返回 JavaScript 或者 CSS</p><h2 id="3-应用场景"><a href="#3-应用场景" class="headerlink" title="3.应用场景"></a>3.应用场景</h2><ul><li><p>设置响应文件的类型<br><code>header(&quot;Content-Type: text/css&quot;)</code></p></li><li><p>重定向<br><code>header(&quot;Location: xxx.php&quot;)</code><br><code>header(&quot;refresh:3; url=xxx.php&quot;)</code> 重定向延迟3s跳转</p></li><li><p>下载文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 让文件下载</span><br><span class="line">header(&apos;Content-Type: application/octet-stream&apos;);</span><br><span class="line">// 设置默认下载文件名</span><br><span class="line">header(&apos;Content-Disposition: attachment; filename=demo.txt&apos;);</span><br></pre></td></tr></table></figure></li><li><p>图片防盗链</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取请求报文数据</span></span><br><span class="line"><span class="comment">// print_r(getallheaders());</span></span><br><span class="line">$refer = getallheaders()[<span class="string">"Referer"</span>];</span><br><span class="line"><span class="keyword">echo</span> $refer;</span><br><span class="line"><span class="comment">//获取url的各部分</span></span><br><span class="line">print_r(parse_url($refer));</span><br><span class="line">$host = parse_url($refer)[<span class="string">"host"</span>];</span><br><span class="line"><span class="keyword">if</span>($host === <span class="string">"127.0.0.1"</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"识别主机，响应"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"不响应"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP注册案例源码</title>
      <link href="/2019/05/27/5.PHP/3.PHP%E6%B3%A8%E5%86%8C%E6%A1%88%E4%BE%8B%E6%BA%90%E7%A0%81/"/>
      <url>/2019/05/27/5.PHP/3.PHP%E6%B3%A8%E5%86%8C%E6%A1%88%E4%BE%8B%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p><strong>本案例会把用户数据写入php同级目录下info.txt文件中，头像会存放在php文件同级目录下userAvatar文件夹下；这两个文件/文件夹需要自行创建</strong><br>以下是源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>($_SERVER[<span class="string">"REQUEST_METHOD"</span>]===<span class="string">"POST"</span>)&#123;</span><br><span class="line">        register();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// $_POST打印出来格式如下</span></span><br><span class="line">        <span class="comment">// Array</span></span><br><span class="line">        <span class="comment">//     (</span></span><br><span class="line">        <span class="comment">//         [username] =&gt; liuxiao</span></span><br><span class="line">        <span class="comment">//         [nickname] =&gt; liu</span></span><br><span class="line">        <span class="comment">//         [age] =&gt; 18</span></span><br><span class="line">        <span class="comment">//         [tel] =&gt; 139</span></span><br><span class="line">        <span class="comment">//         [sex] =&gt; 男</span></span><br><span class="line">        <span class="comment">//         [banji] =&gt; 1</span></span><br><span class="line">        <span class="comment">//     )</span></span><br><span class="line">        <span class="comment">// 判断输入是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($_POST[<span class="string">"username"</span>])||trim($_POST[<span class="string">"username"</span>])==<span class="string">""</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"请输入姓名"</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($_POST[<span class="string">"nickname"</span>])||trim($_POST[<span class="string">"nickname"</span>])==<span class="string">""</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"请输入昵称"</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($_POST[<span class="string">"age"</span>])||trim($_POST[<span class="string">"age"</span>])==<span class="string">""</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"请输入年龄"</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($_POST[<span class="string">"tel"</span>])||trim($_POST[<span class="string">"tel"</span>])==<span class="string">""</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"请输入电话"</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($_POST[<span class="string">"sex"</span>])||trim($_POST[<span class="string">"sex"</span>])==<span class="string">""</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"请输入性别"</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//$_FILES的内容</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>($_FILES)||$_FILES[<span class="string">"photo"</span>][<span class="string">"error"</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"请上传头像"</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            $type = $_FILES[<span class="string">"photo"</span>][<span class="string">"type"</span>];</span><br><span class="line">            <span class="keyword">if</span>(strpos($type,<span class="string">"image/"</span>)===<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//获取文件后缀名生成随机文件名</span></span><br><span class="line">                $houzhui = strrchr ($_FILES[<span class="string">"photo"</span>][<span class="string">"name"</span>],<span class="string">"."</span>);</span><br><span class="line">                $newFileName = time().rand(<span class="number">1000</span>,<span class="number">9999</span>).$_POST[<span class="string">"username"</span>].$houzhui;</span><br><span class="line">                move_uploaded_file($_FILES[<span class="string">"photo"</span>][<span class="string">"tmp_name"</span>],<span class="string">"./userAvatar/"</span>.$newFileName);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"上传的不是图片格式"</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        $_POST[]=$newFileName;</span><br><span class="line">        $str = implode($_POST,<span class="string">"|"</span>);<span class="comment">//最终存储到txt文件的字符串</span></span><br><span class="line">        <span class="comment">// echo $str;</span></span><br><span class="line">        file_put_contents(<span class="string">"./info.txt"</span>,$str.<span class="string">"\n"</span>,FILE_APPEND);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"./css/form.css"</span>&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">                * &#123;</span><br><span class="line">            margin: <span class="number">0</span>;</span><br><span class="line">            padding: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        body &#123;</span><br><span class="line">            background: <span class="comment">#ccc;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        h1,</span><br><span class="line">        h2,</span><br><span class="line">        h3,</span><br><span class="line">        h4,</span><br><span class="line">        h5,</span><br><span class="line">        h6 &#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        form &#123;</span><br><span class="line">            position: relative;</span><br><span class="line">            width: <span class="number">400</span>px;</span><br><span class="line">            margin: <span class="number">50</span>px auto;</span><br><span class="line">            padding: <span class="number">20</span>px;</span><br><span class="line">            border: <span class="number">1</span>px solid <span class="comment">#eee;</span></span><br><span class="line">            border-radius: <span class="number">10</span>px;</span><br><span class="line">            background: <span class="comment">#fff;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        input[type=<span class="string">'text'</span>],</span><br><span class="line">        input[type=<span class="string">'select'</span>],</span><br><span class="line">        input[type=<span class="string">'password'</span>],</span><br><span class="line">        input[type=<span class="string">'submit'</span>],</span><br><span class="line">        input[type=<span class="string">'password'</span>],</span><br><span class="line">        input[type=<span class="string">'file'</span>],</span><br><span class="line">        select &#123;</span><br><span class="line">            width: <span class="number">100</span>%;</span><br><span class="line">            display: block;</span><br><span class="line">            height: <span class="number">24</span>px;</span><br><span class="line">            margin-bottom: <span class="number">15</span>px;</span><br><span class="line">            border-radius: <span class="number">3</span>px;</span><br><span class="line">            border: <span class="number">1</span>px solid <span class="comment">#aaa;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        input[type=<span class="string">'submit'</span>] &#123;</span><br><span class="line">            height: <span class="number">40</span>px;</span><br><span class="line">            background: rgb(<span class="number">209</span>, <span class="number">92</span>, <span class="number">92</span>);</span><br><span class="line">            border: none;</span><br><span class="line">            color: <span class="comment">#fff;</span></span><br><span class="line">            font-size: <span class="number">24</span>px;</span><br><span class="line">            ;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        input[type=<span class="string">'radio'</span>],</span><br><span class="line">        input[type=<span class="string">'checkbox'</span>] &#123;</span><br><span class="line">            height: <span class="number">20</span>px;</span><br><span class="line">            width: <span class="number">20</span>px;</span><br><span class="line">            <span class="comment">/* display: inline; */</span></span><br><span class="line">            margin: <span class="number">10</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        input[type=<span class="string">'file'</span>] &#123;</span><br><span class="line">            border: none;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .box &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: <span class="number">10</span>px;</span><br><span class="line">            left: <span class="number">350</span>px;</span><br><span class="line">            width: <span class="number">73</span>px;</span><br><span class="line">            height: <span class="number">73</span>px;</span><br><span class="line">            border: <span class="number">1</span>px solid <span class="comment">#666;</span></span><br><span class="line">            border-radius: <span class="number">10</span>%;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;   </span><br><span class="line">    &lt;form action=<span class="string">"&lt;?php echo $_SERVER["</span>PHP_SELF<span class="string">"] ?&gt;"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">        头像： &lt;input type=<span class="string">"file"</span> name=<span class="string">"photo"</span> id=<span class="string">"photo"</span>&gt;</span><br><span class="line">        姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;</span><br><span class="line">        昵称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"nickname"</span>&gt;</span><br><span class="line">        年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>&gt;</span><br><span class="line">        电话：&lt;input type=<span class="string">"text"</span> name=<span class="string">"tel"</span>&gt;</span><br><span class="line">        性别：&lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"男"</span> checked&gt;男</span><br><span class="line">             &lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"女"</span> &gt;女</span><br><span class="line">             &lt;br&gt;</span><br><span class="line">        班级：&lt;select name=<span class="string">"banji"</span> &gt;</span><br><span class="line">                &lt;option value=<span class="string">"1"</span>&gt;黑马<span class="number">11</span>期&lt;/option&gt;</span><br><span class="line">                &lt;option value=<span class="string">"2"</span>&gt;黑马<span class="number">12</span>期&lt;/option&gt;</span><br><span class="line">                &lt;option value=<span class="string">"3"</span>&gt;黑马<span class="number">13</span>期&lt;/option&gt;</span><br><span class="line">             &lt;/select&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"添加信息"</span>&gt;</span><br><span class="line">        &lt;img class="box"&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实现头像实时预览功能</span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> photo = document.querySelector(<span class="string">"#photo"</span>);</span><br><span class="line">        photo.onchange = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">var</span> file = photo.files[<span class="number">0</span>]; <span class="comment">//表单的files属性存储了所有相关信息</span></span><br><span class="line">            <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();<span class="comment">//读取器</span></span><br><span class="line">            reader.readAsDataURL(file);<span class="comment">//读取器读取图片</span></span><br><span class="line">            reader.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">//读取完毕后把图片路径给盒子的src</span></span><br><span class="line">                <span class="keyword">var</span> box = document.querySelector(<span class="string">".box"</span>);</span><br><span class="line">                box.src = reader.result;</span><br><span class="line">                console.log(reader.result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音乐列表案例</title>
      <link href="/2019/05/27/5.PHP/2.2.%E9%9F%B3%E4%B9%90%E5%88%97%E8%A1%A8%E6%A1%88%E4%BE%8B/"/>
      <url>/2019/05/27/5.PHP/2.2.%E9%9F%B3%E4%B9%90%E5%88%97%E8%A1%A8%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="一、音乐列表"><a href="#一、音乐列表" class="headerlink" title="一、音乐列表"></a>一、音乐列表</h1><h2 id="1-功能点"><a href="#1-功能点" class="headerlink" title="1.功能点"></a>1.功能点</h2><pre><code>表格展示数据，增删改歌曲信息</code></pre><h2 id="2-数据存储"><a href="#2-数据存储" class="headerlink" title="2.数据存储"></a>2.数据存储</h2><p>数据如何描述和保存： 不再使用字符串加|的格式，因为无法区分值对应的属性名。<br>使用json描述数据： javascript object notation js对象的描述</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">属性名1:属性值,</span><br><span class="line">属性名2:属性值</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">属性名3:属性值,</span><br><span class="line">属性名4:属性值</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>语法：属性和值都用双引号，除非是数字；json文件中不能写任何注释；没有undifined<br>描述对象使用{}，描述数组使用[]<br><code>json_decode($str,boolean)</code>: 将json格式的字符串转换为php数组或对象<br>　　　字符串中的[]默认转换为数组，{}默认转换为对象<br>　　　第二个参数如果是true转换为数组，如果是false转换为对象<br><code>json_encode($arr或$obj)</code>: 将php数组或对象转换为json格式的字符串</p><h2 id="3-判断输入数据是否合法"><a href="#3-判断输入数据是否合法" class="headerlink" title="3.判断输入数据是否合法"></a>3.判断输入数据是否合法</h2><p>之前用echo提示，只能提示一个错误，并且显示的位置不合理；<br>需要一次性提示用户所有的错误输入信息；判断出错后，先存储所有的错误信息到数组errorArr里，后面再统一处理<br>        in_array方法（元素，数组）判断元素是否在数组中<br>操作提示信息盒子的类名：<br><code>&lt;?php echo in_array(&quot;title&quot;,_GLOBAL[&quot;error&quot;])?&quot;show&quot;:&quot;&quot; ?&gt;</code></p><h2 id="4-新增音乐功能"><a href="#4-新增音乐功能" class="headerlink" title="4.新增音乐功能"></a>4.新增音乐功能</h2><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190603/LLSQmnOgPBsS.png?imageslim" alt="mark"><br>id用于标识区分是哪一行，方便后面的删除和编辑</p><h2 id="5-删除音乐功能"><a href="#5-删除音乐功能" class="headerlink" title="5.删除音乐功能"></a>5.删除音乐功能</h2><pre><code>`array_splice(数组，起始索引，删除几个元素)；`</code></pre><p>获取id号；<br>获取json数据 ，转换为数组；<br>根据id号删除数组中的元素（遍历数组）；<br>将删除后的数组数据重新写入json文件；<br>页面跳转到list.php列表页</p><h2 id="6-修改音乐功能"><a href="#6-修改音乐功能" class="headerlink" title="6.修改音乐功能"></a>6.修改音乐功能</h2>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GET和POST方法</title>
      <link href="/2019/05/27/5.PHP/2.1.GET%E5%92%8CPOST%E6%96%B9%E6%B3%95/"/>
      <url>/2019/05/27/5.PHP/2.1.GET%E5%92%8CPOST%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="一、GET请求"><a href="#一、GET请求" class="headerlink" title="一、GET请求"></a>一、GET请求</h1><h2 id="1-什么是GET"><a href="#1-什么是GET" class="headerlink" title="1.什么是GET"></a>1.什么是GET</h2><p>获取服务端的数据</p><h2 id="2-发起GET请求常见的方式"><a href="#2-发起GET请求常见的方式" class="headerlink" title="2.发起GET请求常见的方式"></a>2.发起GET请求常见的方式</h2><p>地址栏访问；<br>src/href；<br>表单；<br>网页中各种搜索框，详情页面，大部分超链接</p><h2 id="3-GET方式提交数据的格式"><a href="#3-GET方式提交数据的格式" class="headerlink" title="3.GET方式提交数据的格式"></a>3.GET方式提交数据的格式</h2><p><code>index.php?userName=jack&amp;password=123</code></p><h2 id="4-GET的特点"><a href="#4-GET的特点" class="headerlink" title="4.GET的特点"></a>4.GET的特点</h2><p>get方式在url后面拼接参数，只能以文本的形式传递数据<br>传递的数据量小，4KB左右（不同浏览器会有差异）<br>安全性低，会将数据显示在地址栏<br>速度快，通常用于对安全性要求不高的请求</p><h1 id="二、POST请求"><a href="#二、POST请求" class="headerlink" title="二、POST请求"></a>二、POST请求</h1><h2 id="1-什么是POST"><a href="#1-什么是POST" class="headerlink" title="1.什么是POST"></a>1.什么是POST</h2><p>字面上理解，post就是指<code>发送，提交</code>,它可以向指定的资源提交要被处理的数据</p><h2 id="2-为什么需要POST请求"><a href="#2-为什么需要POST请求" class="headerlink" title="2.为什么需要POST请求"></a>2.为什么需要POST请求</h2><p>GET方式提交数据通过URL传递到请求的页面，提交的数据量一般较小，用于请求页面数据。此外，GET方式传递的数据安全性低, 对于密码等隐私信息、文件上传必须使用POST方式提交。<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190527/7xl1jbqYIx4u.png?imageslim" alt="mark"><br>要求：如果使用表单方式进行提交，表单的method必须设置为POST</p><h2 id="3-特点"><a href="#3-特点" class="headerlink" title="3.特点"></a>3.特点</h2><p>1-post 方式 安全性比较高<br>2-传递数据量大，请求对数据长度没有要求<br>3-请求不会被缓存，也不会保留在浏览器历史记录中<br>用于：密码等安全性要求比较高的场合，提交的数据量比较大：发布文章，上传文件。</p><blockquote><p>POST方式提交数据上限默认为8M（可以在PHP的配置文件post_max_size选项中修改）</p></blockquote><h1 id="三、表单处理"><a href="#三、表单处理" class="headerlink" title="三、表单处理"></a>三、表单处理</h1><h2 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h2><p>form表单元素有两个重要的属性：<br>            action：处理数据的页面，一般是后台页面xxx.php<br>            method：get/post<br>提交表单元素的数据 <strong>必须设置name属性</strong>，这样才能生成url里面的key=value的结构</p><p>php里有三个超全局变量，都是关联数组， 用于接收表单提交的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$_GET  存储了以GET方法提交的参数</span><br><span class="line">$_POST 存储了以POST方法提交的参数</span><br><span class="line">$_REQUEST：用于获取 GET 或 POST 方式提交的参数</span><br></pre></td></tr></table></figure><h2 id="2-SERVER"><a href="#2-SERVER" class="headerlink" title="2.$_SERVER"></a>2.$_SERVER</h2><p>$_SERVER 存储了用户请求的相关数据，也是关联数组，常用的属性有：<br>    PHP_SELF: 获取当前文件的路径<br>    REQUEST_METHOD：请求方法名称<br>一般处理请求时需要进行判断再输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ($_SERVER[&apos;REQUEST_METHOD&apos;] === &apos;POST&apos;) &#123;</span><br><span class="line">  // 表单提交请求</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-常见表单元素处理方式"><a href="#3-常见表单元素处理方式" class="headerlink" title="3.常见表单元素处理方式"></a>3.常见表单元素处理方式</h2><p>系统会自动收集表单属性的value值<br><strong>单选按钮radio</strong>： 如果不设置value值，选中状态收集到的值是on<br><strong>复选框checkbox</strong>：如果不设置value值，选中状态收集到的值是on; 多个复选框name值设置为相同的并且要加[]，系统会把所有选中的值存储到数组中<br><strong>下拉列表select</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select name=&quot;sel&quot;&gt; </span><br><span class="line">&lt;option value=&quot;1&quot;&gt;唱&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;2&quot;&gt;跳&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;3&quot;&gt;rap&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;4&quot;&gt;篮球&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>如果没有给option设置value，会传递被选中的Option的文字内容；如果设置了value就会传递value </p><h2 id="4-文件上传"><a href="#4-文件上传" class="headerlink" title="4.文件上传"></a>4.文件上传</h2><h3 id="客户端操作"><a href="#客户端操作" class="headerlink" title="客户端操作:"></a>客户端操作:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;&quot; method=&quot;&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; name=&quot;myFile&quot; multiple&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>form的enctype属性取值有:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">application/x-www-form-urlencoded 用来处理字符串 默认的编码格式</span><br><span class="line">multipart/form-data 用于处理特殊数据 如文件</span><br></pre></td></tr></table></figure><p>input的multiple属性: <code>添加multiple属性可以选择多个文件</code></p><h3 id="服务端操作："><a href="#服务端操作：" class="headerlink" title="服务端操作："></a>服务端操作：</h3><p>文件上传之后的相关信息都存储在$_FILES中，也是关联数组，$_FILES打印出来如下：<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190527/WIKqASJ8BNIS.png?imageslim" alt="mark"><br>文件上传之后 如果不改变存放位置，会被删除，要使用函数移动文件位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">move_uploaded_file(源文件全路径，目标路径);</span><br></pre></td></tr></table></figure><p>例如: <code>move_uploaded_file($_FILES[myFile][tmp_name],&quot;./upload/&quot;.文件名&quot;);</code></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>1)判断用户是否进行了提交<br>            使用empty($_FILES)判断数组里是否有内容，有再进行移动位置<br>2)限制用户上传文件的类型：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">方法1.设置表单属性 accept=&quot;.png,.jpg&quot;</span><br><span class="line">方法2.在服务端判断：获取$_FILES里面的文件类型$type=$_FILES[myFile][type]</span><br><span class="line">strpos(源字符串，目标字符串) 获取目标字符串在源字符串中第一次出现的索引，从0开始</span><br><span class="line">判断是否是图片类型：if（strpos($type,&quot;image/&quot;)===0）</span><br></pre></td></tr></table></figure><p>3)上传多个文件保存时不重名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">把 时间time()+随机数rand(m,n)+文件扩展名 拼接作为新的文件名</span><br><span class="line">获取文件扩展名：strrchr(字符串m，字符n);  截取字符串m从n之后的字符，包含字符n</span><br></pre></td></tr></table></figure><p>4)php默认上传文件大小限制是2M，在php.ini中修改<code>upload_max_filesize</code>每次post请求传递的数据默认限制为8M，在php.ini中修改<code>post_max_size</code></p><p>5)上传多个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">**客户端处理</span><br><span class="line">方式1：input表单添加multiple属性，但是只是能够选择多个文件，给input的name值后面添加中括号，这样$_FILES就能接收多个文件</span><br><span class="line">方式2：写多个input，并且给name加中括号</span><br><span class="line">**服务端处理</span><br><span class="line">和单个文件处理基本思想相同</span><br><span class="line">name和tmp_name只需要遍历一个即可，遍历时用$key=$value的方式，因为两个数组的索引是一一对应的</span><br></pre></td></tr></table></figure><h1 id="四、案例：基于文件的注册"><a href="#四、案例：基于文件的注册" class="headerlink" title="四、案例：基于文件的注册"></a>四、案例：基于文件的注册</h1><ul><li>php中如果直接写return，整个php代码执行就结束了；如果在方法中return，则只结束方法的执行，因此：判断完用户发送的是POST请求后，调用一个函数register，而不是直接把代码写在判断中</li><li>trim()方法 可以去除字符串中的空格</li><li>数据写入txt文件的格式是 qq|qqq|123|…</li><li>implode() 将关联数组的数据以指定的分隔符分割，转换为字符串(和explode相反)</li></ul><h1 id="五、图片即时预览功能"><a href="#五、图片即时预览功能" class="headerlink" title="五、图片即时预览功能"></a>五、图片即时预览功能</h1><p>使用js编写；<br>为文件输入表单添加change事件，操作写在change事件内；<br>图片存储在表单的files属性里,是一个伪数组； 表单.files[0]可以获取图片的相关信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var reader = new FileReader(); 定义一个文件读取器</span><br><span class="line">reader.readAsDataURL(图片) 读取图片  读取结果存放在reader.result里</span><br></pre></td></tr></table></figure><p>本案例源码在下一篇日志。由于博客没有添加代码折叠功能，代码占据体积较大。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滕王阁序</title>
      <link href="/2019/05/27/6.%E5%8F%A4%E6%96%87/%E6%BB%95%E7%8E%8B%E9%98%81%E5%BA%8F/"/>
      <url>/2019/05/27/6.%E5%8F%A4%E6%96%87/%E6%BB%95%E7%8E%8B%E9%98%81%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<center>唐 王勃</center><p>豫章故郡，洪都新府。星分翼轸，地接衡庐。襟三江而带五湖，控蛮荆而引瓯越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。雄州雾列，俊采星驰。台隍枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨戟遥临；宇文新州之懿范，襜帷暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。</p><p>时维九月，序属三秋。潦水尽而寒潭清，烟光凝而暮山紫。俨骖騑于上路，访风景于崇阿；临帝子之长洲，得天人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦之体势。</p><p>披绣闼，俯雕甍，山原旷其盈视，川泽纡其骇瞩。闾阎扑地，钟鸣鼎食之家；舸舰弥津，青雀黄龙之舳。云销雨霁，彩彻区明。落霞与孤鹜齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡之滨；雁阵惊寒，声断衡阳之浦。</p><p>遥襟甫畅，逸兴遄飞。爽籁发而清风生，纤歌凝而白云遏。睢园绿竹，气凌彭泽之樽；邺水朱华，光照临川之笔。四美具，二难并。穷睇眄于中天，极娱游于暇日。天高地迥，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，目吴会于云间。地势极而南溟深，天柱高而北辰远。关山难越，谁悲失路之人？萍水相逢，尽是他乡之客。怀帝阍而不见，奉宣室以何年？</p><p>嗟乎！时运不齐，命途多舛。冯唐易老，李广难封。屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙以犹欢。北海虽赊，扶摇可接；东隅已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！</p><p>勃，三尺微命，一介书生。无路请缨，等终军之弱冠；有怀投笔，慕宗悫之长风。舍簪笏于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨陪鲤对；今兹捧袂，喜托龙门。杨意不逢，抚凌云而自惜；钟期既遇，奏流水以何惭？</p><p>呜乎！胜地不常，盛筵难再；兰亭已矣，梓泽丘墟。临别赠言，幸承恩于伟饯；登高作赋，是所望于群公。敢竭鄙怀，恭疏短引；一言均赋，四韵俱成。请洒潘江，各倾陆海云尔：</p><center>滕王高阁临江渚，佩玉鸣鸾罢歌舞。</center><center>画栋朝飞南浦云，珠帘暮卷西山雨。</center><center>闲云潭影日悠悠，物换星移几度秋。</center><center>阁中帝子今何在？槛外长江空自流。</center>]]></content>
      
      
      <categories>
          
          <category> 文言文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 滕王阁序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP介绍和语法</title>
      <link href="/2019/05/25/5.PHP/1.PHP%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%89%B9%E6%80%A7/"/>
      <url>/2019/05/25/5.PHP/1.PHP%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="一、phpStudy工具使用"><a href="#一、phpStudy工具使用" class="headerlink" title="一、phpStudy工具使用"></a>一、phpStudy工具使用</h1><h2 id="1-设置网站根目录"><a href="#1-设置网站根目录" class="headerlink" title="1.设置网站根目录"></a>1.设置网站根目录</h2><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190525/7VX3iJlHdLaw.png?imageslim" alt="mark"></p><h2 id="2-创建虚拟主机域名"><a href="#2-创建虚拟主机域名" class="headerlink" title="2.创建虚拟主机域名"></a>2.创建虚拟主机域名</h2><p>1.在根目录下创建子文件夹<br>2.在站点域名管理新建域名<br>3.修改host文件 映射添加的域名<br>4.修改配置文件vhosts.ini 在相应域名下修改 <code>Options Indexes FollowSymLinks ExecCGI</code></p><h2 id="3-VS配置文件修改"><a href="#3-VS配置文件修改" class="headerlink" title="3.VS配置文件修改"></a>3.VS配置文件修改</h2><p><code>&quot;php.validate.executablePath&quot;:路径</code></p><hr><h1 id="二、php语法特点"><a href="#二、php语法特点" class="headerlink" title="二、php语法特点"></a>二、php语法特点</h1><h2 id="1-输出语句"><a href="#1-输出语句" class="headerlink" title="1.输出语句"></a>1.输出语句</h2><p><code>echo</code> 输出字符串   echo “123”,”456”;  可以输出多个字符串<br><code>print</code>输出字符串   print “123”;    只能输出一个字符串<br><code>print_r();</code> 可以输出复杂类型 输出形式是key和值<br><code>var_dump();</code> 可以输出复杂类型 输出形式是key和值 同时可以获取值的长度<br><code>die()</code> 输出后,后面的代码不再执行</p><p>输出细节： 如果输出为true结果为1；如果为false输出为null</p><h2 id="2-与html混编"><a href="#2-与html混编" class="headerlink" title="2.与html混编"></a>2.与html混编</h2><p>php代码要写在php结构以内<code>&lt;?php代码 ?&gt;</code><br>html代码不能写在php结构内<br>1）普通嵌入<br><code>&lt;p&gt;&lt;?php代码 ?&gt;&lt;/p&gt;</code><br>2）混合编写<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190525/TVeSqwzC4svU.png?imageslim" alt="mark">    </p><h2 id="3-php注释"><a href="#3-php注释" class="headerlink" title="3.php注释"></a>3.php注释</h2><p>单行：#可以进行单行注释 但不常用<br>多行：<code>/*多行注释*/</code></p><hr><h1 id="三、php语法"><a href="#三、php语法" class="headerlink" title="三、php语法"></a>三、php语法</h1><h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h2><ul><li>所有的变量声明 必须以$符号做前缀</li><li>变量名区分大小写</li><li>变量名由字母，数字，下划线构成</li><li>声明变量时无需关注类型，和js的弱类型相似；</li><li>如果只声明不赋值，变量值默认为空</li><li>与变量相关的函数：<br>　　-isset() 判断变量是否存在/变量值是否为空，返回值是true和false<br>　　-empty() 判断变量是否为空  “”, 0, “0”, null, false, array()<br>　　-unset() 删除变量<br>　　　如果删除变量会把它的值置空；<br>　　　可以同时删除多个变量，中间加逗号<br>　　　如果在函数中删除全局变量，并不会真的 将全局变量删除</li></ul><h2 id="2-数组"><a href="#2-数组" class="headerlink" title="2.数组"></a>2.数组</h2><h3 id="索引数组："><a href="#索引数组：" class="headerlink" title="索引数组："></a>索引数组：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); </span><br><span class="line">或者 $arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><h3 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组:"></a>关联数组:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$arr = <span class="keyword">array</span>(<span class="string">'key1'</span> =&gt; <span class="string">'value1'</span>, <span class="string">'key2'</span> =&gt; <span class="string">'value2'</span>);</span><br><span class="line">或者$arr2 = [<span class="string">'key1'</span> =&gt; <span class="string">'value1'</span>, <span class="string">'key2'</span> =&gt; <span class="string">'value2'</span>];</span><br></pre></td></tr></table></figure><h3 id="隐形数组："><a href="#隐形数组：" class="headerlink" title="隐形数组："></a>隐形数组：</h3><p>$arr[] = 1  系统自动生成索引<br>对于索引数组 自动递增数组的索引；<br>对于关联数组 索引从0开始</p><h3 id="二维数组："><a href="#二维数组：" class="headerlink" title="二维数组："></a>二维数组：</h3><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190525/2GuTljX0D7n8.png?imageslim" alt="mark"></p><h3 id="索引数组的遍历："><a href="#索引数组的遍历：" class="headerlink" title="索引数组的遍历："></a>索引数组的遍历：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;count($arr);$i++)&#123;</span><br><span class="line"><span class="keyword">echo</span> $arr[$i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关联数组的遍历："><a href="#关联数组的遍历：" class="headerlink" title="关联数组的遍历："></a>关联数组的遍历：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>($arr <span class="keyword">as</span> $key=&gt;$value)&#123;</span><br><span class="line"><span class="keyword">echo</span> $key;</span><br><span class="line"><span class="keyword">echo</span> $value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以遍历索引数组<br>括号里不需要key可以不写</p><h3 id="二维数组的遍历"><a href="#二维数组的遍历" class="headerlink" title="二维数组的遍历"></a>二维数组的遍历</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>($arr <span class="keyword">as</span> $value)&#123;</span><br><span class="line"><span class="keyword">foreach</span>($value <span class="keyword">as</span> $value1)&#123;</span><br><span class="line">print_r($value1);</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-数据类型转换"><a href="#3-数据类型转换" class="headerlink" title="3.数据类型转换"></a>3.数据类型转换</h2><ul><li>强制类型转换：<br>在变量前面添加：  (类型)变量;<br>任何变量都可以转换为数组： (array)变量  变量值会变成数组的元素</li><li>自动类型转换：<br>php大部分情况下都是自动转换</li></ul><h2 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4.运算符"></a>4.运算符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">算术运算符： + - * / % ++ --</span><br><span class="line">赋值运算符：= += -= *= /=</span><br><span class="line">逻辑运算符： ! &amp;&amp; ||</span><br><span class="line">比较运算符： &gt; &gt;= &lt; &lt;= == === !=</span><br><span class="line">三元运算符： a&gt;b? &quot;xxx&quot; : &quot;xxx&quot;</span><br></pre></td></tr></table></figure><ul><li>加号+：只能是算术运算符，自动将加号两边的变量转换为数字，如果可以转换就转换，如果不能转换会返回这个数据类型的默认值：int-&gt;0  object-&gt;null  bool-&gt;false   float-&gt;0.0 </li><li>点号.: 用于连接字符串</li></ul><h2 id="5-流程控制"><a href="#5-流程控制" class="headerlink" title="5.流程控制"></a>5.流程控制</h2><p>if分支指令式写法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>():</span><br><span class="line"><span class="keyword">elseif</span>():</span><br><span class="line"><span class="keyword">elseif</span>():</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line"><span class="keyword">endif</span>;</span><br></pre></td></tr></table></figure><p>for指令式写法:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>():</span><br><span class="line"><span class="keyword">endfor</span>;</span><br></pre></td></tr></table></figure><h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6.函数"></a>6.函数</h2><p>和js的区别：<br>　　　在js中函数内部可以使用外部的全局变量；<br>　　　但是在php中函数内部不能使用函数外部的成员<br>　　　想要在函数内部使用外部的变量（针对不传参数的情况），需要使用关键字global：<br>　　　　　　<code>global $num;</code><br>把外部变量$num声明为内部可以使用的全局变量　　　　　<br>如果想要在函数内修改$num的值，需要另起一行 $num = 10;<br>如果在函数内修改了全局变量的值，那么函数外使用到这个值也会受影响</p><h2 id="7-php超全局变量"><a href="#7-php超全局变量" class="headerlink" title="7.php超全局变量"></a>7.php超全局变量</h2><p>PHP 中的许多预定义变量都是“超全局的”，这意味着它们在一个脚本的全部作用域中都可用。<br>在函数或方法中无需执行 global $variable; 就可以访问它们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$GLOBALS — 引用全局作用域中可用的全部变量，存储了所有的全局变量</span><br><span class="line">$_SERVER — 获取服务端相关信息</span><br><span class="line">$_REQUEST — 获取提交参数</span><br><span class="line">$_POST — 获取 POST 提交参数</span><br><span class="line">$_GET — 获取 GET 提交参数</span><br><span class="line">$_FILES — 获取上传文件</span><br><span class="line">$_ENV — 操作环境变量</span><br><span class="line">$_COOKIE — 操作 Cookie</span><br><span class="line">$_SESSION — 操作 Session</span><br></pre></td></tr></table></figure><h2 id="8-常量"><a href="#8-常量" class="headerlink" title="8.常量"></a>8.常量</h2><p>定义语法： <code>define(名称，值，是否对大小写敏感);</code><br>常量名一般大写；第三个参数insensitive：默认是false，区分大小写<br>例如 define(“PI”,3.14,false);<br><strong>php中的魔术常量</strong>： 根据不同的使用场合返回不同的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__LINE__：获取当前的代码行</span><br><span class="line">__FILE__:获取当前文件路径：目录+文件名</span><br><span class="line">__DIR__:获取当前文件目录</span><br><span class="line">__FUNCTION__:获取当前魔术常量所在的函数</span><br></pre></td></tr></table></figure><h2 id="9-载入其他文件"><a href="#9-载入其他文件" class="headerlink" title="9.载入其他文件"></a>9.载入其他文件</h2><p>本质：把其他php文件的代码复制到载入文件的地方<br>PHP中引入其他 PHP 文件有四种方式：</p><ul><li><p>require    文件载入失败会影响后续代码执行；重复载入文件会载入多次</p></li><li><p>require_once  文件载入失败会影响后续代码执行；重复载入文件也只会载入一次</p></li><li><p>include    文件载入失败不会影响后续代码执行；重复载入文件会载入多次</p></li><li><p>include_once  文件载入失败不会影响后续代码执行；重复载入文件也只会载入一次</p></li></ul><p>使用环境：<br>如果是公共文件，不能影响后续代码执行，要使用include；<br>如果是必须文件，不能缺少，使用require</p><h2 id="10-常用API"><a href="#10-常用API" class="headerlink" title="10.常用API"></a>10.常用API</h2><p><code>strlen($str)</code> 获取字符串的长度<br>　　　不能处理宽字符集，如中文等；GB2312每个字符占2字节；UTF-8每个字符占3字节<br><code>mb_internal_encoding()</code> 获取php当前文件的默认编码<br><code>mb_strlen($str)</code>获取字符串的长度，能够处理宽字符集，把中文字符识别成一个字节<br>　　　默认情况下不能使用，需要在配置文件php.ini里修改php_mbstring.dll字段<br><code>explode(&quot;分隔符&quot;,$str)</code> 把字符串按照分隔符分割为数组<br><code>count($arr)</code>获取数组长度<br><code>date(&quot;Y-m-d H:i:s&quot;)</code>获取当前时间<br>　　　默认是格林威治时间，修改php.ini的timezone字段可以获取本地时间<br>　　　可以通过 strtotime() 将有格式的时间字符串转换为时间戳<br><code>time()</code>获取从格林威治时间 1970-01-01 00:00:00到当前时间的秒数</p><h2 id="11-文件操作"><a href="#11-文件操作" class="headerlink" title="11.文件操作"></a>11.文件操作</h2><p><code>file_get_contents 读取文件内容；</code><br>　　　读取成功返回文件内容；读取失败返回false<br>　　　读取图片时要设置浏览器的读取方式:<code>header(&quot;Content-Type:image/jpeg&quot;);</code><br><code>file_put_contents(文件路径,需要写入的内容,FILE_APPEND);</code><br>　　　写入内容，同时返回写入的长度,第三个参数如果添加，是追加内容，不添加会覆盖原有文件内容</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2019/05/22/4.js%E9%AB%98%E7%BA%A7/14.%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2019/05/22/4.js%E9%AB%98%E7%BA%A7/14.%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><h2 id="1-什么是正则表达式"><a href="#1-什么是正则表达式" class="headerlink" title="1.什么是正则表达式"></a>1.什么是正则表达式</h2><p>用于匹配规律规则的表达式；正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p><h2 id="2-作用"><a href="#2-作用" class="headerlink" title="2.作用"></a>2.作用</h2><p>1.给定的字符串是否符合正则表达式的过滤逻辑(匹配)<br>2.可以通过正则表达式，从字符串中获取我们想要的特定部分(提取)<br>3.强大的字符串替换能力(替换)</p><h2 id="3-特点"><a href="#3-特点" class="headerlink" title="3.特点"></a>3.特点</h2><ol><li>灵活性、逻辑性和功能性非常的强</li><li>可以迅速地用极简单的方式达到字符串的复杂控制</li><li>对于刚接触的人来说，比较晦涩难懂</li></ol><hr><h1 id="二、组成"><a href="#二、组成" class="headerlink" title="二、组成"></a>二、组成</h1><h2 id="1-普通字符"><a href="#1-普通字符" class="headerlink" title="1.普通字符"></a>1.普通字符</h2><pre><code>如abc，123等</code></pre><h2 id="2-元字符"><a href="#2-元字符" class="headerlink" title="2.元字符"></a>2.元字符</h2><p>正则表达式中有特殊意义的字符<br>1）常用元字符<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190522/tcrNY9X9hDNz.png?imageslim" alt="mark"><br>2）限定符<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190522/zenqTADv6Bc2.png?imageslim" alt="mark"></p><p>[] 字符串用中括号括起来，表示匹配其中的任一字符，相当于或的意思<br>[^]  匹配除中括号以内的内容<br>\ 转义符 匹配有特殊意义的字符时，需要进行转义<br>| 或者，选择两者中的一个。注意|将左右两边分为两部分，而不管左右两边有多长多乱<br>() 从两个直接量中选择一个，例如：gr(a|e)y匹配gray和grey<br><code>[\u4e00-\u9fa5]</code> 匹配汉字</p><hr><h1 id="三、JS里的正则表达式"><a href="#三、JS里的正则表达式" class="headerlink" title="三、JS里的正则表达式"></a>三、JS里的正则表达式</h1><h2 id="1-正则对象"><a href="#1-正则对象" class="headerlink" title="1.正则对象"></a>1.正则对象</h2><p>内置对象RegExp  regularExpression</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方式<span class="number">1</span>：<span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(表达式，flag);  <span class="comment">//括号内是字符串格式</span></span><br><span class="line">方式<span class="number">2</span>：<span class="keyword">var</span> reg = <span class="regexp">/表达式/</span>flag  <span class="comment">//不需要是字符串格式，不加''</span></span><br></pre></td></tr></table></figure><p>flag: ‘i’ 忽略大小写   ‘g’ 全局匹配   ‘gi’全局匹配并且忽略大小写</p><h2 id="2-正则表达式的方法"><a href="#2-正则表达式的方法" class="headerlink" title="2.正则表达式的方法"></a>2.正则表达式的方法</h2><p><strong>test和exec是正则对象的方法</strong><br><strong>match,replace,split是字符串的方法</strong></p><h3 id="1）匹配："><a href="#1）匹配：" class="headerlink" title="1）匹配："></a>1）匹配：</h3><p><code>reg.test(str)    如果str和reg匹配返回true，否则返回false</code></p><h3 id="2）提取："><a href="#2）提取：" class="headerlink" title="2）提取："></a>2）提取：</h3><p>提取时reg不写开始和结束符号，经常使用全局匹配：<code>/表达式/g</code><br><code>reg.exec(str)</code>  一次只返回符合表达式的一个结果<br><code>str.match(reg)</code> 返回str字符串中符合表达式的结果，如果是全局匹配，会返回所有结果<br>返回值都是数组形式</p><h3 id="3）分组提取："><a href="#3）分组提取：" class="headerlink" title="3）分组提取："></a>3）分组提取：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'2019-5-22'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;1,2&#125;)-(\d&#123;1,2&#125;)/</span>;</span><br><span class="line">reg.exec(str);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>把reg用括号分成不同的组；<br>执行任意一种表达式方法后，可以用<code>RegExp.$1</code>获取第一组，<code>RegExp.$2</code>获取第二组…</p><h3 id="4）切割split"><a href="#4）切割split" class="headerlink" title="4）切割split"></a>4）切割split</h3><p>字符串的split方法可以配合正则表达式使用<br><code>str.split(/[分隔符]/)  返回的是数组</code></p><h3 id="5）替换replace"><a href="#5）替换replace" class="headerlink" title="5）替换replace"></a>5）替换replace</h3><p><code>str.replace(字符1，字符2);</code><br>把字符1替换为字符2，只替换匹配的第一个；<br>字符1可以使用正则表达式，加上全局匹配g，这样就可以全部替换<br>去掉字符串所有空格的第二种方法 <code>str.split(&#39;&#39;).join(&#39;&#39;);</code></p><h2 id="3-贪婪模式和非贪婪模式"><a href="#3-贪婪模式和非贪婪模式" class="headerlink" title="3.贪婪模式和非贪婪模式"></a>3.贪婪模式和非贪婪模式</h2><p><strong>贪婪模式</strong>：正则表达式进行匹配时，默认是贪婪模式；<br>　　　　　例如匹配页面所有的标签&lt;.+&gt; 这样会把双标签内的文本也获取到；<br><strong>非贪婪模式</strong>： &lt;.+?&gt;在结束符号之前加问号，这样匹配到一个符合的就不再匹配后续字符</p>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包、递归和对象拷贝</title>
      <link href="/2019/05/22/4.js%E9%AB%98%E7%BA%A7/13.%E9%97%AD%E5%8C%85%E9%80%92%E5%BD%92%E5%92%8C%E5%AF%B9%E8%B1%A1%E6%8B%B7%E8%B4%9D/"/>
      <url>/2019/05/22/4.js%E9%AB%98%E7%BA%A7/13.%E9%97%AD%E5%8C%85%E9%80%92%E5%BD%92%E5%92%8C%E5%AF%B9%E8%B1%A1%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><h2 id="函数的执行过程"><a href="#函数的执行过程" class="headerlink" title="函数的执行过程"></a>函数的执行过程</h2><p>调用函数：创建内存地址<br>1）进栈 进入执行环境<br>2）压栈 执行当前环境的代码<br>3）出栈 返回执行环境<br>4）销毁内存空间</p><h2 id="闭包定义"><a href="#闭包定义" class="headerlink" title="闭包定义"></a>闭包定义</h2><p>一个作用域可以访问其他作用域的变量；<br>一个封闭的执行环境（隔离区域）<br>函数才能起到闭包作用</p><h2 id="闭包的特点"><a href="#闭包的特点" class="headerlink" title="闭包的特点"></a>闭包的特点</h2><p>在一个作用域内部 访问外部的变量或者函数</p><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>函数调用函数本身，注意添加结束条件，否则会出现内存溢出问题</p><p>递归的应用：遍历DOM树</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadTree</span>(<span class="params">parent, callback</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; parent.children.length; i++) &#123;</span><br><span class="line"><span class="keyword">var</span> child = parent.children[i];</span><br><span class="line"><span class="keyword">if</span> (callback) &#123;</span><br><span class="line">callback(child);</span><br><span class="line">&#125;</span><br><span class="line">loadTree(child, callback);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对象的拷贝"><a href="#对象的拷贝" class="headerlink" title="对象的拷贝"></a>对象的拷贝</h1><p>把obj1的成员复制给obj2 </p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">obj1,obj2</span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj1)&#123;</span><br><span class="line">obj2[k] = obj1[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只复制obj1的第一层成员，如果obj1里面还有obj3或者数组，那么obj2只是复制了obj3的地址，不会创建新的对象；<br>拷贝完成后，修改obj1的复杂类型，会同步修改obj2</p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>拷贝obj1的多层属性;<br>拷贝完成后，obj1中的属性发生变化，不会影响obj2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj1, obj2</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj1) &#123;</span><br><span class="line"><span class="comment">//如果是数组</span></span><br><span class="line"><span class="keyword">if</span> (obj1[k] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">obj2[k] = [];</span><br><span class="line">deepCopy(obj1[k], obj2[k]); <span class="comment">//递归调用拷贝方法;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果是object类型</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (obj1[k] <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">obj2[k] = &#123;&#125;;</span><br><span class="line">deepCopy(obj1[k], obj2[k]); <span class="comment">//递归调用拷贝方法;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">obj2[k] = obj1[k]; <span class="comment">//普通拷贝</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断顺序不能改变，因为数组也属于对象</p>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数高级</title>
      <link href="/2019/05/22/4.js%E9%AB%98%E7%BA%A7/12.%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/"/>
      <url>/2019/05/22/4.js%E9%AB%98%E7%BA%A7/12.%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h1><h2 id="声明函数的第三种方式"><a href="#声明函数的第三种方式" class="headerlink" title="声明函数的第三种方式"></a>声明函数的第三种方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var fn = new Function(&apos;var name=&quot;liuxiao&quot;;console.log(name)&apos;);</span><br></pre></td></tr></table></figure><p>传参数写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var fn = new Function(&apos;a&apos;,&apos;b&apos;,&apos;console.log(a+b)&apos;);</span><br><span class="line">fn(1,2)</span><br></pre></td></tr></table></figure><p>这种方式运行速度较慢，一般不使用;<br>console.dir(fn);会发现函数也是对象，fn是Function的实例</p><h2 id="函数调用方式和this指向"><a href="#函数调用方式和this指向" class="headerlink" title="函数调用方式和this指向"></a>函数调用方式和this指向</h2><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190522/xmfFjGt5FfJS.png?imageslim" alt="mark"><br>函数内部的this指向，不是由书写的时候确定的，而是在函数调用时确定的</p><h2 id="改变this指向"><a href="#改变this指向" class="headerlink" title="改变this指向"></a>改变this指向</h2><p>处理函数内部 this 指向问题的三个方法<br>1）fn.call(obj,其他参数)<br>改变this指向为obj，并且调用，返回值就是函数的返回值<br>应用： 让伪数组可以调用数组的方法</p><p>2）fn.apply(obj,[参数数组])<br>改变this指向为obj，并且调用，返回值就是函数的返回值；<br>参数以数组的形式传递 ，并不是真的数组<br>应用：可以把数组展开，每一项传递给方法<br>求数组的最大值；打印数组中的每一项</p><p>3）fn.bind(obj,其他参数)<br>改变this指向为obj，不调用，返回新的函数，需要定义变量接收bind<br>应用： 改变定时器的this指向；改变事件处理函数的this指向</p><h2 id="函数中的其他成员"><a href="#函数中的其他成员" class="headerlink" title="函数中的其他成员"></a>函数中的其他成员</h2><p>1）arguments<br>实参的伪数组<br>2）caller<br>函数的调用者，如果在全局调用，返回null<br>3）name<br>函数的名字<br>4）length<br>函数形参的个数</p><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>当函数作为参数或者返回值时，就产生了高阶函数</p>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js继承</title>
      <link href="/2019/05/19/4.js%E9%AB%98%E7%BA%A7/11.js%E7%BB%A7%E6%89%BF/"/>
      <url>/2019/05/19/4.js%E9%AB%98%E7%BA%A7/11.js%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="什么是继承"><a href="#什么是继承" class="headerlink" title="什么是继承"></a>什么是继承</h2><p>继承是面向对象最显著的一个特性。继承是从已有的类中派生出新的类,新的类能吸收已有类的数据属性和行为,并能扩展新的能力<br>如Student和Teacher的共同成员 提取到 Person里，实现代码复用<br>一般做框架时才用继承，做网页特效不使用继承</p><h2 id="对象的继承"><a href="#对象的继承" class="headerlink" title="对象的继承"></a>对象的继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123; <span class="attr">name</span>: <span class="string">'liuxiao'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = &#123; <span class="attr">sex</span>: <span class="string">'男'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o3 = &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br></pre></td></tr></table></figure><h3 id="直接复制"><a href="#直接复制" class="headerlink" title="直接复制"></a>直接复制</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o1) &#123;</span><br><span class="line">        <span class="keyword">if</span> (o2[k]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            o2[k] = o1[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(o2);</span><br></pre></td></tr></table></figure><h3 id="封装函数"><a href="#封装函数" class="headerlink" title="封装函数"></a>封装函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">parent, child</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> parent) &#123;</span><br><span class="line">            <span class="keyword">if</span> (child[k]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                child[k] = parent[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    extend(o1, o2);</span><br><span class="line">    <span class="built_in">console</span>.log(o2)</span><br></pre></td></tr></table></figure><h3 id="用arguments传参数"><a href="#用arguments传参数" class="headerlink" title="用arguments传参数"></a>用arguments传参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">        extend: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> <span class="built_in">arguments</span>[i]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>[k]) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">this</span>[k] = <span class="built_in">arguments</span>[i][k];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    obj.extend(o1, o2, o3);</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure><h1 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h1><h2 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h2><p>缺点：原型继承无法设置构造函数的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = <span class="string">'liuxiao'</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Stu</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   Stu.prototype = <span class="keyword">new</span> Person();</span><br><span class="line">   Stu.prototype.constructor = Person;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> stu = <span class="keyword">new</span> Stu();</span><br><span class="line">   <span class="built_in">console</span>.log(stu.name);</span><br></pre></td></tr></table></figure><p>不能给stu设置参数。只能继承Person的参数；</p><h2 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h2><p>缺点：无法重用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hi'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, sex, score</span>) </span>&#123;</span><br><span class="line">        Person.call(<span class="keyword">this</span>, name, age, sex);</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> stu = <span class="keyword">new</span> Student(<span class="string">'liuxiao'</span>, <span class="number">18</span>, <span class="string">'男'</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(stu); <span class="comment">//可以设置参数</span></span><br><span class="line">    stu.sayHi(); <span class="comment">//报错提示没有此方法</span></span><br></pre></td></tr></table></figure><h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p>既能设置参数 又能调用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, sex, score</span>) </span>&#123;</span><br><span class="line">        Person.call(<span class="keyword">this</span>, name, age, sex);</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    Student.prototype = <span class="keyword">new</span> Person();</span><br><span class="line">    Student.prototype.constructor = Student;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> stu = <span class="keyword">new</span> Student(<span class="string">'liuxiao'</span>, <span class="number">18</span>, <span class="string">'男'</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(stu);</span><br><span class="line">    stu.sayHi();</span><br></pre></td></tr></table></figure><h2 id="快速继承create"><a href="#快速继承create" class="headerlink" title="快速继承create()"></a>快速继承create()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">        name: <span class="string">'liuxiao'</span>,</span><br><span class="line">        friends: <span class="string">'dyx'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> anotherPerson = <span class="built_in">Object</span>.create(person)</span><br><span class="line">    <span class="built_in">console</span>.log(anotherPerson.friends)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自调用函数</title>
      <link href="/2019/05/19/4.js%E9%AB%98%E7%BA%A7/10.%E8%87%AA%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0/"/>
      <url>/2019/05/19/4.js%E9%AB%98%E7%BA%A7/10.%E8%87%AA%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="自调用函数"><a href="#自调用函数" class="headerlink" title="自调用函数"></a>自调用函数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>普通函数不调用不执行，立即执行函数不需要调用，能够自己执行，也称为自调用函数</p><h3 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(function(形参) &#123;&#125;)(实参) 或者 (function()&#123;&#125;())</span><br></pre></td></tr></table></figure><p>可以传递参数；<br>有多个立即执行函数要用分号隔开；<br>立即执行函数会创建一个独立的作用域，里面的变量都是局部变量；<br>全局作用域下的变量不会被销毁，局部作用域的变量在关闭浏览器时会销毁；</p><h3 id="解决变量或方法的命名冲突问题："><a href="#解决变量或方法的命名冲突问题：" class="headerlink" title="解决变量或方法的命名冲突问题："></a>解决变量或方法的命名冲突问题：</h3><p>把同一个js文件的内容写在自调用函数里，开启一个新的作用域<br>(function(){js代码})()<br>注意把构造函数赋值给window,这样外部才能访问到： window.Food = Food;</p><h3 id="为了提升浏览器加载速度，要把所有js文件放到单个Index-js文件里"><a href="#为了提升浏览器加载速度，要把所有js文件放到单个Index-js文件里" class="headerlink" title="为了提升浏览器加载速度，要把所有js文件放到单个Index.js文件里"></a>为了提升浏览器加载速度，要把所有js文件放到单个Index.js文件里</h3><h3 id="自调用函数的问题："><a href="#自调用函数的问题：" class="headerlink" title="自调用函数的问题："></a>自调用函数的问题：</h3><p>连续写多个自调用函数时 前面要加分号，否则代码解析时会出现错误</p><h3 id="自调用函数的参数window和undifined"><a href="#自调用函数的参数window和undifined" class="headerlink" title="自调用函数的参数window和undifined"></a>自调用函数的参数window和undifined</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">;(function(window,undifined)&#123;</span><br><span class="line">//code</span><br><span class="line">&#125;)(window,undifined)</span><br></pre></td></tr></table></figure><p>window方便代码压缩，undifined防止被重命名</p>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型</title>
      <link href="/2019/05/19/4.js%E9%AB%98%E7%BA%A7/9.%E5%8E%9F%E5%9E%8B/"/>
      <url>/2019/05/19/4.js%E9%AB%98%E7%BA%A7/9.%E5%8E%9F%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是原型"><a href="#什么是原型" class="headerlink" title="什么是原型"></a>什么是原型</h2><p>每个构造函数都有一个属性 原型或原型对象prototype<br>一般把构造函数的方法用原型声明在构造函数外部，这样不同实例使用此方法，不会开辟新的内存地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function Person()&#123;属性&#125;;</span><br><span class="line">Person.prototype.sing = function()&#123;</span><br><span class="line">方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当有很多方法时这样写比较麻烦，第6点会讲解如何解决</p><h2 id="构造函数、原型、对象实例之间的关系"><a href="#构造函数、原型、对象实例之间的关系" class="headerlink" title="构造函数、原型、对象实例之间的关系"></a>构造函数、原型、对象实例之间的关系</h2><p>原型图：<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190519/PBHHf1AL8WL5.png?imageslim" alt="mark"></p><h2 id="为什么使用原型"><a href="#为什么使用原型" class="headerlink" title="为什么使用原型"></a>为什么使用原型</h2><p>减少内存占用、便于开发、资源共享</p><h2 id="获取属性-方法：原型链"><a href="#获取属性-方法：原型链" class="headerlink" title="获取属性/方法：原型链"></a>获取属性/方法：原型链</h2><p>实例对象调用方法和属性时，先去构造函数内寻找，如果构造函数内找到了，就停止寻找；如果构造函数内没有，去当前构造函数的原型对象内查找，如果还没有再去原型的原型找，直到找到，如果最终找不到则为null；</p><h2 id="设置属性："><a href="#设置属性：" class="headerlink" title="设置属性："></a>设置属性：</h2><p>给对象s1设置新的属性attr时，不会搜索原型链，而是直接给对象直接添加attr属性</p><h2 id="构造函数方法的写法"><a href="#构造函数方法的写法" class="headerlink" title="构造函数方法的写法"></a>构造函数方法的写法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function Student()&#123;xxx&#125;;</span><br><span class="line">Student.prototype = &#123;//在原型对象内部直接写方法</span><br><span class="line">say: function()&#123;</span><br><span class="line">&#125;，</span><br><span class="line">eat: function()&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上步骤修改prototype后，prototype内已经没有constructor属性了。<br>所以对象实例的constructor属性的指向就不再是Student()了，而是Object(通过原型链找到的)；<br>可以手动再给prototype加上constructor属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Student.prototype = &#123;</span><br><span class="line">constructor: Student, //手动添加</span><br><span class="line">say: function()&#123;</span><br><span class="line">&#125;,</span><br><span class="line">eat: function()&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明实例对象必须要在prototype修改之后，否则实例无法调用里面的方法：先设置原型对象，再使用其中的成员</p><h2 id="扩展内置对象"><a href="#扩展内置对象" class="headerlink" title="扩展内置对象"></a>扩展内置对象</h2><p>数组或string中的prototype是不可以修改的；因为会覆盖原来的方法；<br>给内置对象添加方法时，只能用这种形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.getSum = function()&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="案例：-随机生成方块"><a href="#案例：-随机生成方块" class="headerlink" title="案例： 随机生成方块"></a>案例： 随机生成方块</h2><p>方块对象<br>工具对象：{生成随机数}</p>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象和构造函数</title>
      <link href="/2019/05/19/4.js%E9%AB%98%E7%BA%A7/8.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
      <url>/2019/05/19/4.js%E9%AB%98%E7%BA%A7/8.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象介绍"><a href="#面向对象介绍" class="headerlink" title="面向对象介绍"></a>面向对象介绍</h1><h2 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h2><p>(1) 对象是单个事物的抽象。<br>(2) 对象是一个容器，封装了属性（property）和方法（method）。<br>在实际开发中，对象是一个抽象的概念，可以将其简单理解为：数据集或功能集。<br>ECMAScript-262 把对象定义为：无序属性的集合，其属性可以包含基本值、对象或者函数。</p><h2 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h2><p>面向对象编程 —— Object Oriented Programming，简称 OOP ，是一种编程开发思想。 它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。<br>面向对象编程具有灵活、代码可复用、高度模块化等特点，容易维护和开发，比起由一系列函数或指令组成的传统的过程式编程，更适合多人合作的大型软件项目</p><p>面向对象与面向过程： </p><p>面向过程就是亲力亲为，事无巨细，面面俱到，步步紧跟，有条不紊<br>面向对象就是找一个对象，指挥得结果<br>面向对象将执行者转变成指挥者<br>面向对象不是面向过程的替代，而是面向过程的封装</p><p>面向对象的特性：</p><p>封装性<br>继承性<br>[多态性]抽象</p><h1 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h1><h2 id="简单方式"><a href="#简单方式" class="headerlink" title="简单方式"></a>简单方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">  name: &apos;Jack&apos;,</span><br><span class="line">  age: 18,</span><br><span class="line">  sayName: function () &#123;</span><br><span class="line">    console.log(this.name)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function createPerson (name, age) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    name: name,</span><br><span class="line">    age: age,</span><br><span class="line">    sayName: function () &#123;</span><br><span class="line">      console.log(this.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><h2 id="工厂模式和构造函数"><a href="#工厂模式和构造函数" class="headerlink" title="工厂模式和构造函数"></a>工厂模式和构造函数</h2><p>工厂模式创建的实例 person instanceof Person返回是false，即不能识别对象<br>构造函数创建的实例 person instanceof Person返回是true，可以判断实例对象的类型</p><h2 id="构造函数和实例对象的关系"><a href="#构造函数和实例对象的关系" class="headerlink" title="构造函数和实例对象的关系"></a>构造函数和实例对象的关系</h2><p>实例对象没有constructor属性<br>是通过原型对象的constructor属性指向它的构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log（person.constructor === Person）   // true</span><br></pre></td></tr></table></figure><p>但是检测某个实例 是否 是构造函数的实例时，一般使用instanceof方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log（person instanceof Person）   // true</span><br></pre></td></tr></table></figure><h2 id="静态成员和实例成员"><a href="#静态成员和实例成员" class="headerlink" title="静态成员和实例成员"></a>静态成员和实例成员</h2><p>成员：即属性或者方法<br>实例成员/对象成员： 跟对象相关的成员，将来使用对象的方式来调用 person.sing()<br>静态成员： 跟构造函数相关的成员，使用构造函数来调用 Person.version</p><h2 id="构造函数创建方法的问题"><a href="#构造函数创建方法的问题" class="headerlink" title="构造函数创建方法的问题"></a>构造函数创建方法的问题</h2><p>多个实例对象会存储多个同名的方法，造成内存浪费    –通过原型声明方法    </p>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jq插件和其他方法</title>
      <link href="/2019/05/19/3.jquery/7.jquery%E6%8F%92%E4%BB%B6%E5%92%8C%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95/"/>
      <url>/2019/05/19/3.jquery/7.jquery%E6%8F%92%E4%BB%B6%E5%92%8C%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="jq插件"><a href="#jq插件" class="headerlink" title="jq插件"></a>jq插件</h1><h2 id="常用的jq插件网站"><a href="#常用的jq插件网站" class="headerlink" title="常用的jq插件网站"></a>常用的jq插件网站</h2><p><a href="http://www.htmleaf.com/" target="_blank" rel="noopener">jquery之家</a><br><a href="www.jq22.com">jquery插件库</a></p><h3 id="瀑布流插件"><a href="#瀑布流插件" class="headerlink" title="瀑布流插件"></a>瀑布流插件</h3><p><a href="http://www.jq22.com/search?seo=%E7%80%91%E5%B8%83%E6%B5%81" target="_blank" rel="noopener">瀑布流插件</a></p><h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><p>可视区的图片显示，其他的不加载<br><a href="http://www.jq22.com/jquery-info11629" target="_blank" rel="noopener">easylazyload.js</a></p><p>原生js写法： 图片距离页面顶部的距离 &lt;= 可视区高度 + 页面卷去的头部时显示当前图片<br>不满足条件时，把正确src地址放在自定义属性data-img里，src里面放一张空白图片<br>满足条件时再取出正确图片路径 放入src属性</p><h3 id="bootstrap-js插件"><a href="#bootstrap-js插件" class="headerlink" title="bootstrap js插件"></a>bootstrap js插件</h3><p><a href="https://v3.bootcss.com/javascript/" target="_blank" rel="noopener">bootstrap插件库</a></p><h3 id="fullpage全屏滚动插件"><a href="#fullpage全屏滚动插件" class="headerlink" title="fullpage全屏滚动插件"></a>fullpage全屏滚动插件</h3><p><a href="http://www.jq22.com/jquery-info1124" target="_blank" rel="noopener">全屏滚动插件</a></p><h1 id="补充方法"><a href="#补充方法" class="headerlink" title="补充方法"></a>补充方法</h1><h2 id="jquery对象拷贝"><a href="#jquery对象拷贝" class="headerlink" title="jquery对象拷贝"></a>jquery对象拷贝</h2><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190519/hLnYgBNfzx88.png?imageslim" alt="mark"></p><h2 id="change-事件"><a href="#change-事件" class="headerlink" title="change()事件"></a>change()事件</h2><p>当元素的值发生改变时，会触发 change 事件<br>该事件仅适用于text field，textarea 和 select 元素。<br>当用于 select 元素时，change 事件会在选择状态发生变化时发生。<br>当用于 text field 或 textarea 时，该事件会在元素失去焦点时发生。</p><h2 id="toFixed-2"><a href="#toFixed-2" class="headerlink" title="toFixed(2)"></a>toFixed(2)</h2><p>把数字转换为2位小数</p><h2 id="hover事件"><a href="#hover事件" class="headerlink" title="hover事件"></a>hover事件</h2><p>hover([over,]out) 模仿悬停事件<br>over是鼠标经过的函数，out是鼠标离开的函数<br>如果只写一个函数，鼠标经过和离开都会触发这个函数（可以把toggle函数写在里面）</p><h2 id="end-事件"><a href="#end-事件" class="headerlink" title="end()事件"></a>end()事件</h2><p>改变元素操作对象时会改变this指向，使用end()可以让this指向原来的元素</p><h2 id="index-属性"><a href="#index-属性" class="headerlink" title="index()属性"></a>index()属性</h2><p>获取元素的索引值  li.index()</p>]]></content>
      
      
      <categories>
          
          <category> jquery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jquery事件</title>
      <link href="/2019/05/16/3.jquery/6.jquery%E4%BA%8B%E4%BB%B6/"/>
      <url>/2019/05/16/3.jquery/6.jquery%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="事件注册"><a href="#事件注册" class="headerlink" title="事件注册"></a>事件注册</h1><h2 id="一次只能注册一个事件"><a href="#一次只能注册一个事件" class="headerlink" title="一次只能注册一个事件"></a>一次只能注册一个事件</h2><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190516/tkuWFWDp0xEE.png?imageslim" alt="mark"></p><h2 id="链式方式注册多个事件"><a href="#链式方式注册多个事件" class="headerlink" title="链式方式注册多个事件"></a>链式方式注册多个事件</h2><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190516/1b3U50h2hvKV.png?imageslim" alt="mark"></p><h2 id="on注册"><a href="#on注册" class="headerlink" title="on注册"></a>on注册</h2><p>语法：<code>on(events,[selector],[data],fn)</code></p><h1 id="on的优势"><a href="#on的优势" class="headerlink" title="on的优势"></a>on的优势</h1><h2 id="on可以一次绑定多个事件"><a href="#on可以一次绑定多个事件" class="headerlink" title="on可以一次绑定多个事件"></a>on可以一次绑定多个事件</h2><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190516/u1GNMuDtDpr7.png?imageslim" alt="mark"><br>如果 多个事件的 事件处理函数一样，还可以这样写：<br>注意多个事件之间加空格<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190516/2oBPUSugwi6x.png?imageslim" alt="mark"></p><h2 id="on可以实现事件委派"><a href="#on可以实现事件委派" class="headerlink" title="on可以实现事件委派"></a>on可以实现事件委派</h2><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190516/boxgKT38RLx7.png?imageslim" alt="mark"><br>click是绑定在ul上，但是触发对象是li，this指向li</p><h2 id="on可以给动态创建的元素绑定事件"><a href="#on可以给动态创建的元素绑定事件" class="headerlink" title="on可以给动态创建的元素绑定事件"></a>on可以给动态创建的元素绑定事件</h2><p>给动态创建的元素绑定事件必须用on事件委托</p><p>方法one()类似on，也可以添加事件，但是只会触发一次：$(“div”).one(“click”,function(){})</p><h1 id="off解绑事件"><a href="#off解绑事件" class="headerlink" title="off解绑事件"></a>off解绑事件</h1><h2 id="off"><a href="#off" class="headerlink" title="off()"></a>off()</h2><p>通过on绑定的事件，可以使用off()方法解绑；<br>$(“div”).off()<br>如果括号内为空，会解绑div的所有事件<br>括号里为(“事件类型”)，会解绑div的某个事件<br>$(“ul”).off(“click”,”li”) 解绑事件委托</p><h1 id="自动触发事件"><a href="#自动触发事件" class="headerlink" title="自动触发事件"></a>自动触发事件</h1><h2 id="元素-事件"><a href="#元素-事件" class="headerlink" title="元素.事件()"></a>元素.事件()</h2><p>例如: $(“div”).click()<br>会触发事件冒泡</p><h2 id="元素-trigger-“type”"><a href="#元素-trigger-“type”" class="headerlink" title="元素.trigger(“type”)"></a>元素.trigger(“type”)</h2><p>例如: $(“div”).trigger(“click”)<br>会触发事件冒泡，可以用以下方法阻止事件冒泡<br>        1.e.stopPropagation()<br>        2.return false 在原生js里不能阻止</p><h2 id="元素-triggerHandler-“type”"><a href="#元素-triggerHandler-“type”" class="headerlink" title="元素.triggerHandler(“type”)"></a>元素.triggerHandler(“type”)</h2><p>例如: $(“div”).triggerHandler(“click”)<br>区别：不会触发元素的默认行为，不会触发事件冒泡<br>        例如文本框通过focus事件获取了焦点，会有光标闪烁，但是使用triggerHandler不会有光标闪烁</p><h1 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h1><h2 id="元素-事件-1"><a href="#元素-事件-1" class="headerlink" title="元素.事件()"></a>元素.事件()</h2><p>只要有事件发生就会产生事件对象e<br>element.on(events,[selector],function(e){})<br>    属性：<br>        e.type 事件类型<br>        e.target 触发事件的元素<br>        e.pageX,pageY 鼠标位置<br>    方法：<br>        e.preventDefault() 阻止默认行为<br>        e.stopPropagation() 阻止事件冒泡</p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> jquery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jquery尺寸和位置操作</title>
      <link href="/2019/05/16/3.jquery/5.jquery%E5%B0%BA%E5%AF%B8%E5%92%8C%E4%BD%8D%E7%BD%AE%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/05/16/3.jquery/5.jquery%E5%B0%BA%E5%AF%B8%E5%92%8C%E4%BD%8D%E7%BD%AE%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="尺寸方法"><a href="#尺寸方法" class="headerlink" title="尺寸方法"></a>尺寸方法</h1><h2 id="width"><a href="#width" class="headerlink" title="width()"></a>width()</h2><p>width</p><h2 id="innerWidth"><a href="#innerWidth" class="headerlink" title="innerWidth()"></a>innerWidth()</h2><p>width+padding</p><h2 id="outerWidth"><a href="#outerWidth" class="headerlink" title="outerWidth()"></a>outerWidth()</h2><p>width+padding+border<br>括号里参数为true时：width+padding+border+margin<br>以上尺寸方法 ：如果括号为空是获取，如果是数字是修改</p><h1 id="位置方法"><a href="#位置方法" class="headerlink" title="位置方法"></a>位置方法</h1><h2 id="offset"><a href="#offset" class="headerlink" title="offset()"></a>offset()</h2><p>元素距离文档的位置<br>获取：    括号为空时，返回的是对象，包括left和top<br>offset().top 返回距离文档top值<br>offset().left 返回距离文档left值<br>设置： offset({top: 200,left: 100})</p><h2 id="position"><a href="#position" class="headerlink" title="position()"></a>position()</h2><p>元素距离带有定位的父元素的位置<br>只能获取，不能设置偏移</p><h2 id="scrollTop-scrollLeft"><a href="#scrollTop-scrollLeft" class="headerlink" title="scrollTop()/scrollLeft()"></a>scrollTop()/scrollLeft()</h2><p>被卷去的头部/左侧<br>$(window).scrollTop() 页面被卷去的头部<br>$(“html”).scrollTop() 文档被卷去的头部<br>如果要添加动画效果，只能给元素添加，window和document不能添加<br>scrollTop()括号不写内容是获取，写数字是设置</p><h2 id="案例：电梯导航"><a href="#案例：电梯导航" class="headerlink" title="案例：电梯导航"></a>案例：电梯导航</h2><p>1.滚动到一定位置显示隐藏侧边栏<br>2.点击侧边栏 滚动到相应模块<br>3.滚动到某个模块，侧边栏相应模块变色</p>]]></content>
      
      
      <categories>
          
          <category> jquery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jquery操作</title>
      <link href="/2019/05/16/3.jquery/4.jquery%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/05/16/3.jquery/4.jquery%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery样式操作"><a href="#jQuery样式操作" class="headerlink" title="jQuery样式操作"></a>jQuery样式操作</h1><h2 id="操作css方法"><a href="#操作css方法" class="headerlink" title="操作css方法"></a>操作css方法</h2><p>$(“div”).css(“属性名”) 不写属性值是获取，返回字符串<br>$(“div”).css(“属性名”,”属性值”)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;div&quot;).css(&#123;</span><br><span class="line">属性名:&quot;属性值&quot;,</span><br><span class="line">属性名:&quot;属性值&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>属性值是数字可以不用加引号</p><h2 id="设置类样式方法"><a href="#设置类样式方法" class="headerlink" title="设置类样式方法"></a>设置类样式方法</h2><p>$(“div”).addClass(“类名”)    添加类<br>$(“div”).removeClass(“类名”)    移除类<br>$(“div”).toggleClass(“类名”)    切换类<br>原生js里的div.className = “box”会覆盖原来的类名。jQuery类名操作不会覆盖。</p><h1 id="jquery属性操作"><a href="#jquery属性操作" class="headerlink" title="jquery属性操作"></a>jquery属性操作</h1><h2 id="prop"><a href="#prop" class="headerlink" title="prop()"></a>prop()</h2><p>获取或设置元素固有属性  比如获取checkbox的checked属性<br>$(“div”).prop(“属性名”)            获取属性<br>$(“div”).prop(“属性名”,”属性值”)    设置属性</p><h2 id="attr"><a href="#attr" class="headerlink" title="attr()"></a>attr()</h2><p>获取或设置元素固有属性和自定义属性<br>$(“div”).attr(“属性名”)            获取属性<br>$(“div”).attr(“属性名”,”属性值”)    设置属性</p><h2 id="data"><a href="#data" class="headerlink" title="data()"></a>data()</h2><p>数据缓存，存储在元素的内存里，不改变DOM元素的属性<br>$(“div”).data(“属性名”)            获取属性<br>        可以获取h5属性data-index；不用写data-,返回的是数字<br>$(“div”).data(“属性名”,”属性值”)    设置属性</p><h2 id="removeAttr"><a href="#removeAttr" class="headerlink" title="removeAttr()"></a>removeAttr()</h2><p>$(“div”).removeAttr(“属性名”)        移除属性</p><h1 id="jq文本操作"><a href="#jq文本操作" class="headerlink" title="jq文本操作"></a>jq文本操作</h1><h2 id="html"><a href="#html" class="headerlink" title="html()"></a>html()</h2><p>获取：括号里不写内容是获取<br>设置：<code>html(&quot;&lt;p&gt;123&lt;/p&gt;&quot;)</code> 括号里可以写html内容</p><h2 id="text"><a href="#text" class="headerlink" title="text()"></a>text()</h2><p>不解析html标签，其他和html用法相同</p><h2 id="val"><a href="#val" class="headerlink" title="val()"></a>val()</h2><p>操作表单元素文字专用<br>获取： val()  获取到的是字符型<br>设置： val(值)</p><h1 id="jq元素操作"><a href="#jq元素操作" class="headerlink" title="jq元素操作"></a>jq元素操作</h1><h2 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var li = $(&quot;&lt;li&gt;&lt;/li&gt;&quot;)</span><br><span class="line">var li = html(&quot;&lt;li&gt;&lt;/li&gt;&quot;)</span><br></pre></td></tr></table></figure><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><p>内部添加<br>$(“ul”).append(li);    放到最后面  等价于li.appendTo($(“ul”))<br>$(“ul”).prepend(li);     放到最前面  等价于li.prependTo($(“ul”))<br>外部添加<br>$(“div”).after(p);    放到div后面<br>$(“div”).before(p);     放到div前面</p><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><p>$(“ul”).remove()     删除自己<br>$(“ul”).empty()     删除内部的子节点<br>$(“ul”).html(“”)    删除内部的子节点 如果子元素有事件 只是清除元素内容 事件还会保留</p><h2 id="遍历DOM元素"><a href="#遍历DOM元素" class="headerlink" title="遍历DOM元素"></a>遍历DOM元素</h2><p>方法1<br>$(“div”).each(function (i, ele) {<br>    xxx;<br>})<br>里面的回调函数有2个参数：i 是每个元素的索引号; ele 是每个DOM元素对象，不是jquery对象<br>所以要想使用jquery方法，需要给这个dom元素转换为jquery对象  $(ele)<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190516/C1X5AeFNVALp.png?imageslim" alt="mark"></p><p>方法2<br>$.each(arr,function(i, ele){ })  遍历数据 ele就是arr[i]<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190516/rtdUGtNRBPrG.png?imageslim" alt="mark"></p><p>案例： 购物车<br>    全选按钮 数量调整 动态计算价格  计算总件数总价（封装函数）  删除商品  选中的商品添加背景</p>]]></content>
      
      
      <categories>
          
          <category> jquery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jquery动画</title>
      <link href="/2019/05/16/3.jquery/3.jquery%E5%8A%A8%E7%94%BB/"/>
      <url>/2019/05/16/3.jquery/3.jquery%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery动画"><a href="#jQuery动画" class="headerlink" title="jQuery动画"></a>jQuery动画</h1><h2 id="显示隐藏效果"><a href="#显示隐藏效果" class="headerlink" title="显示隐藏效果"></a>显示隐藏效果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show([speed],[easing],[fn])显示</span><br><span class="line">hide([speed],[easing],[fn])隐藏</span><br><span class="line">toggle([speed],[easing],[fn])切换</span><br></pre></td></tr></table></figure><h2 id="上拉下拉效果"><a href="#上拉下拉效果" class="headerlink" title="上拉下拉效果"></a>上拉下拉效果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">slideUp([speed],[easing],[fn])上拉收起</span><br><span class="line">slideDown([speed],[easing],[fn])下拉显示</span><br><span class="line">slideToggle([speed],[easing],[fn]) 切换</span><br></pre></td></tr></table></figure><h2 id="淡入淡出效果"><a href="#淡入淡出效果" class="headerlink" title="淡入淡出效果"></a>淡入淡出效果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fadeIn([speed],[easing],[fn]) 淡入显示</span><br><span class="line">fadeOut([speed],[easing],[fn]) 淡出隐藏</span><br><span class="line">fadeToggle([speed],[easing],[fn])切换</span><br></pre></td></tr></table></figure><p>参数一般省略:<br>speed: 速度 “slow” “normal” “fast” 或者时间 1000<br>easing: 运动曲线，默认是swing中间较快,可选linear匀速；<br>可以使用jquery.easing.min.js添加其他的运动曲线<br>fn: 回调函数  </p><h2 id="动画队列"><a href="#动画队列" class="headerlink" title="动画队列"></a>动画队列</h2><p>停止动画排队： 把stop()写在动画效果的前面 如$(“div”).stop().toggle();<br>防止鼠标滑动过快动画一直播放</p><h2 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animate(&#123;样式对象&#125;,[speed],[easing],[fn])</span><br></pre></td></tr></table></figure><p>样式属性名可以不带引号，不支持改变颜色，需要借助插件<br>动画只能给元素添加，不能是document和window<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;div&quot;).animate(&#123; </span><br><span class="line">width: 200,</span><br><span class="line">height: &quot;100%&quot;, </span><br><span class="line">fontSize: &quot;10em&quot;, </span><br><span class="line">borderWidth: 10</span><br><span class="line">&#125;, 1000 );</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jquery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jq选择器</title>
      <link href="/2019/05/16/3.jquery/2.jquery%E9%80%89%E6%8B%A9%E5%99%A8/"/>
      <url>/2019/05/16/3.jquery/2.jquery%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="jq选择器"><a href="#jq选择器" class="headerlink" title="jq选择器"></a>jq选择器</h1><p>jq推荐使用双引号””</p><h2 id="jq基础选择器"><a href="#jq基础选择器" class="headerlink" title="jq基础选择器"></a>jq基础选择器</h2><p>$(“div”)          标签选择器<br>$(“.box”)         类名选择器<br>$(“#box”)           id选择器<br>$(“*”)            全选选择器<br>$(“div,p”)        并集选择器</p><h2 id="jq层级选择器"><a href="#jq层级选择器" class="headerlink" title="jq层级选择器"></a>jq层级选择器</h2><p>$(“div&gt;p”)    子元素选择器<br>$(“div p”)    后代选择器</p><h2 id="jq筛选选择器"><a href="#jq筛选选择器" class="headerlink" title="jq筛选选择器"></a>jq筛选选择器</h2><p>$(“li:first”)    选择第一个li元素<br>$(“li:last”)    选择最后一个li元素<br>$(“li:nth-of-type(n)”)    选择第n个li元素<br>$(“li:eq(2)”)    选择索引为2的li元素<br>$(“li:odd”)        选择索引为奇数的li元素<br>$(“li:even”)    选择索引为偶数的li元素</p><h2 id="jq筛选方法"><a href="#jq筛选方法" class="headerlink" title="jq筛选方法"></a>jq筛选方法</h2><p>$(“div”).parent()         选择亲爸爸<br>$(“div”).parents(“.box”)    选择div的父级里类名是box的元素<br>$(“div”).children(“p”)         选择亲儿子p         相当于div&gt;p<br>$(“div”).find(“p”)         选择所有后代里的p    相当于div p<br>$(“div”).siblings(“p”)        选择所有亲兄弟里的p<br>$(“ul li”).eq(0)            选择ul里的第一个li    相当于:eq(0) 更推荐使用<br>$(“div”).next()            选择后面的第一个兄弟<br>$(“div”).nextAll(“p”)        选择后面所有的兄弟p<br>$(“div”).prev()            选择前面的第一个兄弟<br>$(“div”).prevAll(“p”)        选择前面所有的兄弟p<br>$(“div”).hasClass(“类名”)     判断div是否有类名，如果有返回true        </p><h2 id="jq排他思想"><a href="#jq排他思想" class="headerlink" title="jq排他思想"></a>jq排他思想</h2><p>jq里的this写法： $(this)<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190516/VQ79oXXeoTV0.png?imageslim" alt="mark"></p><h2 id="隐式迭代"><a href="#隐式迭代" class="headerlink" title="隐式迭代"></a>隐式迭代</h2><p>jq会自动遍历jq对象内部的DOM元素，称为隐式迭代</p><h2 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h2><p>节省代码量，看起来更优雅<br>上面例子可以用以下一句话写；<br>$(this).css(“background”,”pink”).siblings().css(“background”,””)<br>什么时候可以链式编程：<br>    设置型操作可以一直链式编程；jq的大部分方法都是定义在原型上的，方法执行完返回的原来的对象，this又指回了原来的对象，因此可以链式编程<br>    获取型操作会断链；</p>]]></content>
      
      
      <categories>
          
          <category> jquery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jquery简介</title>
      <link href="/2019/05/15/3.jquery/1.jquery%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/05/15/3.jquery/1.jquery%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery概述"><a href="#jQuery概述" class="headerlink" title="jQuery概述"></a>jQuery概述</h1><h2 id="JavaScript库"><a href="#JavaScript库" class="headerlink" title="JavaScript库"></a>JavaScript库</h2><p>即js library，是封装好的方法和函数特定的集合；<br>简单理解就是一个JS文件；<br>jQuery就是属于JS库的一种</p><h2 id="jQuery的概念"><a href="#jQuery的概念" class="headerlink" title="jQuery的概念"></a>jQuery的概念</h2><p>write less, do more<br>封装了JavaScript常用的功能代码<br>jQuery的出现大大提高了JavaScript的开发速度</p><h2 id="jQuery的优点"><a href="#jQuery的优点" class="headerlink" title="jQuery的优点"></a>jQuery的优点</h2><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190516/Q7ngmOhqkzi6.png?imageslim" alt="Jq的优点"></p><h1 id="jQuery的基本使用"><a href="#jQuery的基本使用" class="headerlink" title="jQuery的基本使用"></a>jQuery的基本使用</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://jquery.com/" target="_blank" rel="noopener">jquery官方网站</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>引入jQuery的js文件</p><h2 id="jQuery入口程序"><a href="#jQuery入口程序" class="headerlink" title="jQuery入口程序"></a>jQuery入口程序</h2><p>写在入口函数里的代码是在DOM元素加载完毕执行，等价于原生js里的DOMContentLoaded</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">代码； //最常用</span><br><span class="line">&#125;);</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">代码；</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="jQuery的顶级对象"><a href="#jQuery的顶级对象" class="headerlink" title="jQuery的顶级对象$"></a>jQuery的顶级对象$</h2><p>$就是指jQuery，代码里它们可以互相替换  $ = jQuery<br>他们之间的关系，类似于原生js里面的window和无window</p><h2 id="jQuery对象和DOM对象的区别"><a href="#jQuery对象和DOM对象的区别" class="headerlink" title="jQuery对象和DOM对象的区别"></a>jQuery对象和DOM对象的区别</h2><p>用原生js获取的对象就是DOM对象； document.querySeletor(“div”)<br>用jQuery方法获取的对象就是jQuery对象； $(“div”)<br>jquery对象是对DOM对象进行包装后产生的，是伪数组形式；<br>两种对象只能使用各自的属性和方法</p><h2 id="两种对象转换："><a href="#两种对象转换：" class="headerlink" title="两种对象转换："></a>两种对象转换：</h2><p>jq对象转dom对象：  $(“div”)[0] 或者 $(“div”).get(0)<br>dom对象转jq对象：    $(div) 里面的div已经获取到了所以不用加引号</p>]]></content>
      
      
      <categories>
          
          <category> jquery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地存储</title>
      <link href="/2019/05/14/2.webAPI/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
      <url>/2019/05/14/2.webAPI/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-本地存储特性"><a href="#1-本地存储特性" class="headerlink" title="1.本地存储特性"></a>1.本地存储特性</h2><p>数据存储在用户浏览器中（不与服务器打交道）<br>设置读取方便，刷新也不会丢失</p><h2 id="2-window-sessionStorage"><a href="#2-window-sessionStorage" class="headerlink" title="2.window.sessionStorage"></a>2.window.sessionStorage</h2><p>1.生命周期为关闭浏览器窗口<br>2.存储在当前页面内存，只在同一个页面以下数据共享<br>3.以键值对形式存储<br>4.最大5M</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">存储： sessionStorage.setItem(<span class="string">'key'</span>,value)</span><br><span class="line">获取： sessionStorage.getItem(<span class="string">'key'</span>)</span><br><span class="line">删除： sessionStorage.removeItem(<span class="string">'key'</span>)</span><br><span class="line">删除所有: sessionStorage.clear()</span><br></pre></td></tr></table></figure><h2 id="3-window-localStorage"><a href="#3-window-localStorage" class="headerlink" title="3.window.localStorage"></a>3.window.localStorage</h2><p>1.存储到本地内存，不同页面也可以数据共享<br>2.最大20M<br>3.生命周期为永久<br>方法和sessionStorage完全类似</p>]]></content>
      
      
      <categories>
          
          <category> WebAPI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>移动端网页特效案例</title>
      <link href="/2019/05/14/2.webAPI/%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88%E6%A1%88%E4%BE%8B/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88%E6%A1%88%E4%BE%8B/"/>
      <url>/2019/05/14/2.webAPI/%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88%E6%A1%88%E4%BE%8B/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="一、触屏事件"><a href="#一、触屏事件" class="headerlink" title="一、触屏事件"></a>一、触屏事件</h1><h2 id="1-常见触摸事件"><a href="#1-常见触摸事件" class="headerlink" title="1.常见触摸事件"></a>1.常见触摸事件</h2><p><code>touchstart</code>  手指触摸元素<br><code>touchmove</code> 手指在元素上移动<br><code>touchend</code> 手指不再触摸元素</p><h2 id="2-触摸事件对象"><a href="#2-触摸事件对象" class="headerlink" title="2.触摸事件对象"></a>2.触摸事件对象</h2><p><code>e.touches</code>  正在触摸屏幕的所有手指列表<br><code>e.targetTouches</code> 正在触摸当前dom元素的手指列表<br><code>e.changedTouches</code> 手指状态发生改变的列表 从无到有或者从有到无<br>手指离开屏幕时 touches和targetTouches没有了，但是changedTouches还有<br><code>e.targetTouches[0]</code> 是触摸元素的第一个手指的相关信息 包括坐标,触摸对象等；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">e.clientX 手指在可视区的X坐标</span><br><span class="line">e.clientY 手指在可视区的Y坐标</span><br><span class="line">e.pageX 手指在页面文档的X坐标</span><br><span class="line">e.pageY 手指在页面文档的Y坐标</span><br><span class="line">e.screenX 手指在手机屏幕的X坐标</span><br><span class="line">e.screenY 手指在手机屏幕的Y坐标</span><br></pre></td></tr></table></figure><h1 id="二、移动端轮播图"><a href="#二、移动端轮播图" class="headerlink" title="二、移动端轮播图"></a>二、移动端轮播图</h1><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190525/HNQ4xw5KAKJR.png?imageslim" alt="Image"></p><h2 id="1-步骤"><a href="#1-步骤" class="headerlink" title="1.步骤"></a>1.步骤</h2><p>（1）搭建结构和样式：ol里面的小圆点不再自动生成，ul不添加定位。因为移动位置是使用translate方法不需要定位。<br>（2）自动轮播功能：使用 定时器+CSS3过渡+translate移动位置；<br>　　　注意无缝滚动功能需要克隆图片，向左滑动功能也需要克隆图片<br>（3）小圆点跟随滚动变化样式： 不再使用排他方法，使用classList操作；也是在过渡结束后圆点才发生变化<br>（4）手指拖动功能： 和手指拖动盒子写法类似<br>（5）判断滑动完播放哪一张图片</p><h2 id="2-新知识"><a href="#2-新知识" class="headerlink" title="2.新知识"></a>2.新知识</h2><p>transitionend事件 过渡结束<br><code>element.classList</code> 返回元素的类名 伪数组形式<br><code>div.classList.add(&#39;类名&#39;)</code> 给div追加一个新类名<br>　　　不会覆盖以前的类<br>　　　一次只能添加一个类名，注意不加.<br><code>div.classList.remove(&#39;类名&#39;)</code> div删除一个类名<br><code>div.classList.toggle(&#39;类名&#39;)</code> 切换类名<br>　　　自动检测，如果有此类则去掉，如果没有则加上；<br><code>div.classList.item(索引)</code>  获取div的第n个类名<br><code>div.classList.contains(&#39;类名&#39;)</code> 判断是否有这个类名<br>　　　如果有返回true 没有返回false</p><h2 id="3-源码"><a href="#3-源码" class="headerlink" title="3.源码"></a>3.源码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> focus = <span class="built_in">document</span>.querySelector(<span class="string">'.focus'</span>);</span><br><span class="line">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>);</span><br><span class="line">    <span class="keyword">var</span> ol = <span class="built_in">document</span>.querySelector(<span class="string">'ol'</span>);</span><br><span class="line">    <span class="keyword">var</span> focusWidth = focus.offsetWidth;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.自动播放功能</span></span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">var</span> x = -index * focusWidth;</span><br><span class="line">        ul.style.transition = <span class="string">'all .3s'</span>;</span><br><span class="line">        ul.style.transform = <span class="string">'translateX('</span> + x + <span class="string">'px)'</span>;</span><br><span class="line">    &#125;, <span class="number">1500</span>);</span><br><span class="line">    <span class="comment">//无缝滚动，判断条件在每次播放完成之后再检测，需要使用transitionend事件</span></span><br><span class="line">    ul.addEventListener(<span class="string">'transitionend'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//播放到最后一张或再往后时跳到图1</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//无过渡的跳到第一张，因此先去掉过渡</span></span><br><span class="line">            ul.style.transition = <span class="string">'none'</span>;</span><br><span class="line">            <span class="comment">//直接跳到第一张</span></span><br><span class="line">            <span class="keyword">var</span> x = -index * focusWidth;</span><br><span class="line">            ul.style.transform = <span class="string">'translateX('</span> + x + <span class="string">'px)'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果拖动到最左边的图3(索引是负数),跳到索引是2的图3位置</span></span><br><span class="line">        <span class="comment">//---目前不会出现索引负数，等下面添加了手指滑动事件才有可能出现</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            index = <span class="number">2</span>;</span><br><span class="line">            ul.style.transition = <span class="string">'none'</span>;</span><br><span class="line">            <span class="keyword">var</span> x = -index * focusWidth;</span><br><span class="line">            ul.style.transform = <span class="string">'translateX('</span> + x + <span class="string">'px)'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.小圆点跟随变化功能</span></span><br><span class="line">        <span class="comment">// 也要写在transitionend里面，因为是每次滚动完一张小圆点发生变化</span></span><br><span class="line">        <span class="comment">// 选出带current类名的圆点，去掉类名</span></span><br><span class="line">        ol.querySelector(<span class="string">'.current'</span>).classList.remove(<span class="string">'current'</span>);</span><br><span class="line">        <span class="comment">//滚动到的那一张（即index）的小圆圈加上类名  </span></span><br><span class="line">        <span class="comment">//小圆圈索引是0-2 index在这里的取值也被限制为0-2</span></span><br><span class="line">        ol.children[index].classList.add(<span class="string">'current'</span>);</span><br><span class="line">        <span class="comment">//可以加上过渡效果更美观，在css里设置</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.手指滑动功能</span></span><br><span class="line">    <span class="keyword">var</span> startX = <span class="number">0</span>; <span class="comment">//手指初始坐标</span></span><br><span class="line">    <span class="keyword">var</span> moveX = <span class="number">0</span>; <span class="comment">//手指移动距离</span></span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>; <span class="comment">//判断手指是否移动的变量</span></span><br><span class="line">    ul.addEventListener(<span class="string">'touchstart'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        startX = e.targetTouches[<span class="number">0</span>].pageX;</span><br><span class="line">        <span class="comment">//手指触摸停止定时器</span></span><br><span class="line">        clearInterval(timer);</span><br><span class="line">    &#125;);</span><br><span class="line">    ul.addEventListener(<span class="string">'touchmove'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        moveX = e.targetTouches[<span class="number">0</span>].pageX - startX;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移动ul:  ul原来位置+移动距离</span></span><br><span class="line">        <span class="keyword">var</span> x = -index * focusWidth + moveX;</span><br><span class="line">        ul.style.transition = <span class="string">'none'</span>;</span><br><span class="line">        ul.style.transform = <span class="string">'translateX('</span> + x + <span class="string">'px)'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手指移动过，设flag为true</span></span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//判断滑动完播放哪一张图片</span></span><br><span class="line">    ul.addEventListener(<span class="string">'touchend'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//用户有可能只是单击后松手，也会触发touchend事件，但是此时没有移动，判断moveX没有意义，所以设置flag判断用户是否移动了手指，如果移动了再判断moveX</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="comment">//移动超过50像素，就切换图片</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(moveX) &gt; <span class="number">50</span>) &#123;</span><br><span class="line">                <span class="comment">// 右划播放上一张，左滑播放下一张</span></span><br><span class="line">                <span class="keyword">if</span> (moveX &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    index--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (moveX &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//判断完后移动距离</span></span><br><span class="line">                <span class="keyword">var</span> x = -index * focusWidth;</span><br><span class="line">                ul.style.transition = <span class="string">'all .3s'</span>;</span><br><span class="line">                ul.style.transform = <span class="string">'translateX('</span> + x + <span class="string">'px)'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//不超过50像素，回弹到原来位置</span></span><br><span class="line">                <span class="keyword">var</span> x = -index * focusWidth;</span><br><span class="line">                ul.style.transition = <span class="string">'all .3s'</span>;</span><br><span class="line">                ul.style.transform = <span class="string">'translateX('</span> + x + <span class="string">'px)'</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//手指离开重新开始定时器，先清除，保证只有一个定时器</span></span><br><span class="line">        clearInterval(timer);</span><br><span class="line">        timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">var</span> x = -index * focusWidth;</span><br><span class="line">            ul.style.transition = <span class="string">'all .3s'</span>;</span><br><span class="line">            ul.style.transform = <span class="string">'translateX('</span> + x + <span class="string">'px)'</span>;</span><br><span class="line">        &#125;, <span class="number">1500</span>);</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="三、移动端返回顶部"><a href="#三、移动端返回顶部" class="headerlink" title="三、移动端返回顶部"></a>三、移动端返回顶部</h1><p>和PC端写法一样</p><h1 id="四、移动端click延时问题"><a href="#四、移动端click延时问题" class="headerlink" title="四、移动端click延时问题"></a>四、移动端click延时问题</h1><p>移动端click事件会有300ms的延时，原因是移动端屏幕双击会缩放页面；<br>解决方案：<br>1.禁用缩放 user-scalable=no 禁止双击缩放<br>2.自己封装函数判断是否是点击事件<br>3.使用fastclick插件</p><h1 id="五、移动端插件"><a href="#五、移动端插件" class="headerlink" title="五、移动端插件"></a>五、移动端插件</h1><h2 id="1-swiper插件-轮播图插件"><a href="#1-swiper插件-轮播图插件" class="headerlink" title="1.swiper插件 轮播图插件"></a>1.swiper插件 轮播图插件</h2><p><a href="https://www.swiper.com.cn/" target="_blank" rel="noopener">https://www.swiper.com.cn/</a><br>1.引入swiper.min.css文件和swiper.min.js<br>2.在demo文件夹找到想要的轮播图效果，去对应的源代码里复制html和样式<br>3.复制swiperjs代码</p><h2 id="2-superslide插件"><a href="#2-superslide插件" class="headerlink" title="2.superslide插件"></a>2.superslide插件</h2><p><a href="http://www.superslide2.com/" target="_blank" rel="noopener">http://www.superslide2.com/</a></p><h2 id="3-iscroll滚动弹回插件"><a href="#3-iscroll滚动弹回插件" class="headerlink" title="3.iscroll滚动弹回插件"></a>3.iscroll滚动弹回插件</h2><p><a href="https://github.com/cubiq/iscroll" target="_blank" rel="noopener">https://github.com/cubiq/iscroll</a></p><h2 id="4-zy-media-js移动端视频插件"><a href="#4-zy-media-js移动端视频插件" class="headerlink" title="4.zy.media.js移动端视频插件"></a>4.zy.media.js移动端视频插件</h2><h2 id="5-插件使用总结："><a href="#5-插件使用总结：" class="headerlink" title="5.插件使用总结："></a>5.插件使用总结：</h2><pre><code>1.确认插件实现的功能2.去官网查看使用说明3.下载插件4.打开demo实例文件，查看需要引入的相关文件，并且引入5.复制demo实例文件中的结构html，样式css以及js代码</code></pre><h1 id="六、移动端常用开发框架"><a href="#六、移动端常用开发框架" class="headerlink" title="六、移动端常用开发框架"></a>六、移动端常用开发框架</h1><p>框架，顾名思义就是一套架构，它会基于自身的特点向用户提供一套较为完整的解决方案。框架的控制权在框架本身，使用者要按照框架所规定的某种规范进行开发。</p><p>插件一般是为了解决某个问题而专门存在，其功能单一，并且比较小。<br>前端常用的框架有 Bootstrap、Vue、Angular、React 等。既能开发PC端，也能开发移动端<br>前端常用的移动端插件有 swiper、superslide、iscroll等。<br>框架： 大而全，一整套解决方案<br>插件： 小而专一，某个功能的解决方案<br>bootstrap轮播图<br>1.引入jquery.min.js文件和bootstrap.min.js<br>2.引入bootstrap.min.css<br>3.把html代码复制进focus盒子里，更改图片</p>]]></content>
      
      
      <categories>
          
          <category> WebAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PC端网页特效案例</title>
      <link href="/2019/05/14/2.webAPI/%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88%E6%A1%88%E4%BE%8B/PC%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88%E6%A1%88%E4%BE%8B/"/>
      <url>/2019/05/14/2.webAPI/%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88%E6%A1%88%E4%BE%8B/PC%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="一、网页轮播图"><a href="#一、网页轮播图" class="headerlink" title="一、网页轮播图"></a>一、网页轮播图</h1><h2 id="1-结构搭建"><a href="#1-结构搭建" class="headerlink" title="1.结构搭建"></a>1.结构搭建</h2><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190525/W0D7LIbLoYmb.png?imageslim" alt="Image">    </p><h2 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2.步骤"></a>2.步骤</h2><p>动态设置ul的宽度<br>1）鼠标经过轮播图区域左右箭头才显示<br>2）动态生成小圆圈<br>3）点击小圆圈切换图片 配合animate函数<br>    - 变量index 是点击时小圆圈的索引号<br>4）点击方向箭头切换图片，小圆圈也跟着变化<br>    - 变量num 控制箭头切换图片<br>    - 变量circle 是小圆圈跟随变化新的索引号<br>    - 克隆最后一张图实现无缝滚动<br>5）自动播放：<br>定时器 + 手动调用点击事件 arrowr.click();<br>鼠标经过停止定时器<br>6）添加节流阀：<br>防止轮播图按钮连续点击造成播放过快。<br>节流阀目的：当上一个函数动画内容执行完毕，再去执行下一个函数动画，让事件无法连续触发。<br>核心实现思路：利用回调函数，添加一个变量来控制，锁住函数和解锁函数。<br>开始设置一个变量<code>var flag= true;</code><br><code>If(flag){flag = false; do something}       关闭水龙头</code><br><code>利用回调函数动画执行完毕， flag = true     打开水龙头</code></p><h2 id="3-源码"><a href="#3-源码" class="headerlink" title="3.源码"></a>3.源码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> focus = <span class="built_in">document</span>.querySelector(<span class="string">'.focus'</span>);</span><br><span class="line">    <span class="keyword">var</span> arrowl = <span class="built_in">document</span>.querySelector(<span class="string">'.arrow-l'</span>);</span><br><span class="line">    <span class="keyword">var</span> arrowr = <span class="built_in">document</span>.querySelector(<span class="string">'.arrow-r'</span>);</span><br><span class="line">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>);</span><br><span class="line">    <span class="keyword">var</span> imglis = ul.children;</span><br><span class="line">    <span class="keyword">var</span> ol = <span class="built_in">document</span>.querySelector(<span class="string">'ol'</span>);</span><br><span class="line">    <span class="keyword">var</span> focusWidth = focus.offsetWidth;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示隐藏功能</span></span><br><span class="line">    focus.addEventListener(<span class="string">'mouseenter'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        arrowl.style.display = <span class="string">'block'</span>;</span><br><span class="line">        arrowr.style.display = <span class="string">'block'</span>;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">    &#125;)</span><br><span class="line">    focus.addEventListener(<span class="string">'mouseleave'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        arrowl.style.display = <span class="string">'none'</span>;</span><br><span class="line">        arrowr.style.display = <span class="string">'none'</span>;</span><br><span class="line">        timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            arrowr.click();</span><br><span class="line">        &#125;, <span class="number">1500</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//动态生成圆圈</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; imglis.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">        li.setAttribute(<span class="string">'index'</span>, i);</span><br><span class="line">        ol.appendChild(li);</span><br><span class="line">        <span class="comment">//点击圆圈切换图片和圆圈样式</span></span><br><span class="line">        li.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//排他思想设置小圆圈颜色</span></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ol.children.length; i++) &#123;</span><br><span class="line">                ol.children[i].className = <span class="string">''</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.className = <span class="string">'current'</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> index = <span class="keyword">this</span>.getAttribute(<span class="string">'index'</span>);</span><br><span class="line">            num = index;</span><br><span class="line">            circle = index;</span><br><span class="line">            animate(ul, -index * focusWidth);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    ol.children[<span class="number">0</span>].className = <span class="string">'current'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//右按钮功能</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> circle = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> lastli = imglis[<span class="number">0</span>].cloneNode(<span class="literal">true</span>);</span><br><span class="line">    ul.appendChild(lastli);</span><br><span class="line"></span><br><span class="line">    arrowr.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (num == ul.children.length - <span class="number">1</span>) &#123;</span><br><span class="line">                ul.style.left = <span class="number">0</span>;</span><br><span class="line">                num = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            num++;</span><br><span class="line">            animate(ul, -num * focusWidth, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            circle++;</span><br><span class="line">            <span class="keyword">if</span> (circle == ol.children.length) &#123;</span><br><span class="line">                circle = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ol.children.length; i++) &#123;</span><br><span class="line">                ol.children[i].className = <span class="string">''</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ol.children[circle].className = <span class="string">'current'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//左按钮功能</span></span><br><span class="line">    arrowl.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">                ul.style.left = -focusWidth * (ul.children.length - <span class="number">1</span>) + <span class="string">'px'</span>;</span><br><span class="line">                num = ul.children.length - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            num--;</span><br><span class="line">            animate(ul, -num * focusWidth, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            circle--;</span><br><span class="line">            <span class="keyword">if</span> (circle &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                circle = ol.children.length - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ol.children.length; i++) &#123;</span><br><span class="line">                ol.children[i].className = <span class="string">''</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ol.children[circle].className = <span class="string">'current'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//自动轮播定时器</span></span><br><span class="line">    <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        arrowr.click();</span><br><span class="line">    &#125;, <span class="number">1500</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="二、返回顶部案例"><a href="#二、返回顶部案例" class="headerlink" title="二、返回顶部案例"></a>二、返回顶部案例</h1><h2 id="1-窗口滚动事件"><a href="#1-窗口滚动事件" class="headerlink" title="1.窗口滚动事件"></a>1.窗口滚动事件</h2><p><code>window.scroll(x,y);</code>  使窗口滚动到某个坐标，x和y不写单位<br><code>window.pageYOffset</code> 是页面被卷去的头部  IE9 以上兼容</p><h2 id="2-思想"><a href="#2-思想" class="headerlink" title="2.思想"></a>2.思想</h2><p>修改animate函数来实现缓慢滚动到顶部</p><h1 id="三、筋斗云案例"><a href="#三、筋斗云案例" class="headerlink" title="三、筋斗云案例"></a>三、筋斗云案例</h1><p>利用animate函数 记录点击的位置，作为下一次移动的起点</p>]]></content>
      
      
      <categories>
          
          <category> WebAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js动画函数</title>
      <link href="/2019/05/14/2.webAPI/BOM/5.JS%E5%8A%A8%E7%94%BB%E5%87%BD%E6%95%B0/"/>
      <url>/2019/05/14/2.webAPI/BOM/5.JS%E5%8A%A8%E7%94%BB%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、动画实现原理"><a href="#一、动画实现原理" class="headerlink" title="一、动画实现原理"></a>一、动画实现原理</h1><h2 id="1-核心原理"><a href="#1-核心原理" class="headerlink" title="1.核心原理"></a>1.核心原理</h2><p>通过定时器 setInterval() 不断移动盒子位置</p><h2 id="2-实现步骤："><a href="#2-实现步骤：" class="headerlink" title="2.实现步骤："></a>2.实现步骤：</h2><p>1.获得盒子当前位置<br>2.让盒子在当前位置加上1个移动距离<br>3.利用定时器不断重复这个操作<br>4.加一个结束定时器的条件<br>5.注意此元素需要添加定位，才能使用element.style.left</p><h1 id="二、动画函数封装"><a href="#二、动画函数封装" class="headerlink" title="二、动画函数封装"></a>二、动画函数封装</h1><h2 id="1-封装函数"><a href="#1-封装函数" class="headerlink" title="1.封装函数"></a>1.封装函数</h2><p>把动画封装进一个函数，传的参数是 obj调用对象 和 target动画结束条件</p><h2 id="2-给不同元素添加不同定时器"><a href="#2-给不同元素添加不同定时器" class="headerlink" title="2.给不同元素添加不同定时器"></a>2.给不同元素添加不同定时器</h2><p>可以减少内存占用<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190525/YglwUtGXe9NJ.png?imageslim" alt="Image"><br>把var timer 改成 obj.timer，这样每个调用函数的元素都有了自己的定时器</p><h1 id="三、缓动动画"><a href="#三、缓动动画" class="headerlink" title="三、缓动动画"></a>三、缓动动画</h1><h2 id="1-核心原理-1"><a href="#1-核心原理-1" class="headerlink" title="1.核心原理"></a>1.核心原理</h2><p>缓动：运动速度慢慢变小，实现缓慢停下来的效果<br>让盒子每次移动的距离慢慢变小： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">step = (目标位置-现在位置) / <span class="number">10</span>;</span><br><span class="line">step = step &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step);</span><br></pre></td></tr></table></figure><p>步长如果是正值向上取值，如果是负值向下取整<br>封装的缓动动画用于轮播图案例里 实现图片滚动效果</p><h2 id="2-缓动动画添加回调函数"><a href="#2-缓动动画添加回调函数" class="headerlink" title="2.缓动动画添加回调函数"></a>2.缓动动画添加回调函数</h2><p>回调函数原理： 把函数P当做一个参数传递到另外一个函数fn里，当fn全部执行完毕之后才会执行此函数P，这个过程称为回调<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190525/jUee2pFPX7fm.png?imageslim" alt="Image"><br>根据定义 定时器全部执行完才执行回调函数，因此回调函数写在定时器结束时。如果有回调函数 则调用此函数；</p>]]></content>
      
      
      <categories>
          
          <category> WebAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js的执行机制</title>
      <link href="/2019/05/14/2.webAPI/BOM/4.JS%E7%9A%84%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/05/14/2.webAPI/BOM/4.JS%E7%9A%84%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>JS执行机制</p><h1 id="一、JS是单线程"><a href="#一、JS是单线程" class="headerlink" title="一、JS是单线程"></a>一、JS是单线程</h1><p>js代码是从上往下执行，同一时间只能做一件事,称为js单线程<br>单线程导致的问题就是后面的任务等待前面任务完成，如果前面任务很耗时（比如读取网络数据），后面任务不得不一直等待</p><h1 id="二、同步和异步"><a href="#二、同步和异步" class="headerlink" title="二、同步和异步"></a>二、同步和异步</h1><p>HTML5提出了同步任务和异步任务的概念</p><h2 id="1-同步任务"><a href="#1-同步任务" class="headerlink" title="1.同步任务"></a>1.同步任务</h2><p>在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务； 形成执行栈    </p><h2 id="2-异步任务"><a href="#2-异步任务" class="headerlink" title="2.异步任务"></a>2.异步任务</h2><p>不进入主线程、而进入‘任务队列’的任务，当主线程中的任务运行完了，才会从‘任务队列’取出异步任务放入主线程执行。<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190525/9EutwcwXfKh9.png?imageslim" alt="Image">     </p><h1 id="三、JS事件循环"><a href="#三、JS事件循环" class="headerlink" title="三、JS事件循环"></a>三、JS事件循环</h1><p>主线程执行完毕，查询任务队列，取出一个任务推入主线程运行；反复以上过程称为事件循环<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190525/PJywDry0ayyb.png?imageslim" alt="Image"></p>]]></content>
      
      
      <categories>
          
          <category> WebAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BOM三大系列</title>
      <link href="/2019/05/14/2.webAPI/BOM/3.BOM%E4%B8%89%E5%A4%A7%E7%B3%BB%E5%88%97/"/>
      <url>/2019/05/14/2.webAPI/BOM/3.BOM%E4%B8%89%E5%A4%A7%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="一、offset系列"><a href="#一、offset系列" class="headerlink" title="一、offset系列"></a>一、offset系列</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>元素偏移量 动态获得元素在网页中的位置或大小，返回数值没有单位；</p><h2 id="2-属性"><a href="#2-属性" class="headerlink" title="2.属性"></a>2.属性</h2><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190525/afM5Jis7SW4l.png?imageslim" alt="Image"></p><p>offsetTop和offsetLeft以带有定位的父元素为准，如果没有父亲或者父亲没有定位，则以Body为准</p><h2 id="3-offset和style的区别"><a href="#3-offset和style的区别" class="headerlink" title="3.offset和style的区别"></a>3.offset和style的区别</h2><p>style只能获得行内样式表的样式值，offset所有样式写法都可以获得。<br>style获得的left和top是带有单位的字符串，offsetLeft和Top获得不带单位的数值<br>style不包含padding和border，offset包含padding和border<br>style可以读写，而offset是只读属性<br>获取元素的大小位置用offset，更改元素的大小位置用style</p><p><strong>案例：</strong><br>1.拖拽的模态框<br>2.京东放大镜：</p><p>鼠标经过小图片盒子，蒙层和大图片盒子显示，离开隐藏<br>蒙层跟随鼠标，且不超出小盒子<br>移动蒙层时大图片等比例移动</p><p>求大图移动距离的公式：<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190525/lNwrKcSMpc0i.png?imageslim" alt="Image"></p><p>如果大图片和蒙层都是正方形，只要计算一个比例，如果不是正方形要计算宽和高两个比例</p><h1 id="二、client系列"><a href="#二、client系列" class="headerlink" title="二、client系列"></a>二、client系列</h1><h2 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1.定义"></a>1.定义</h2><p>获取元素可视区的相关信息</p><h2 id="2-client系列属性"><a href="#2-client系列属性" class="headerlink" title="2.client系列属性"></a>2.client系列属性</h2><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190525/PDunjAa9uFk0.png?imagesli" alt="Image"><br>和offsetWidth唯一的区别是clientWidth不包含边框</p><h1 id="三、scroll系列"><a href="#三、scroll系列" class="headerlink" title="三、scroll系列"></a>三、scroll系列</h1><h2 id="1-定义-2"><a href="#1-定义-2" class="headerlink" title="1.定义"></a>1.定义</h2><p>scroll 系列的相关属性可以动态的得到该元素内容的实际大小、滚动距离</p><h2 id="2-scroll系列属性"><a href="#2-scroll系列属性" class="headerlink" title="2.scroll系列属性"></a>2.scroll系列属性</h2><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190525/5c6pP1s7kk2x.png?imageslim" alt="Image"><br>scrollTop和scrollHeight 常用<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190525/KUMH12U4SN3f.png?imageslim" alt="Image">                        </p><h2 id="3-scroll事件"><a href="#3-scroll事件" class="headerlink" title="3.scroll事件"></a>3.scroll事件</h2><p><code>scroll</code> 滚动事件 只要滚动就会触发<br><code>window.pageYOffset</code> 是页面被卷去的头部  IE9 以上兼容<br><code>window.pageXOffset</code> 是页面被卷去的左侧  IE9 以上兼容<br><code>元素.scrollTop</code> 是元素被卷去的头部<br><code>元素.scrollLeft</code> 是元素被卷去的左侧</p><p>案例： 随着页面滚动，侧边栏发生变化</p>]]></content>
      
      
      <categories>
          
          <category> WebAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BOM三大对象</title>
      <link href="/2019/05/14/2.webAPI/BOM/2.BOM%E4%B8%89%E5%A4%A7%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/05/14/2.webAPI/BOM/2.BOM%E4%B8%89%E5%A4%A7%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="一、location对象"><a href="#一、location对象" class="headerlink" title="一、location对象"></a>一、location对象</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><pre><code>window的location属性用于获取或设置窗体的URL，返回的是一个对象</code></pre><h2 id="2-URL"><a href="#2-URL" class="headerlink" title="2.URL"></a>2.URL</h2><p>统一资源定位符 格式：<br><code>protocol://host[:port]/path/[?query]#fragment</code><br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190525/mNM8pYKkq7kw.png?imageslim" alt="Image"></p><h2 id="3-属性"><a href="#3-属性" class="headerlink" title="3.属性"></a>3.属性</h2><p>重点记住href和search<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190525/XwqIcSj9HHSV.png?imageslim" alt="Image"></p><h2 id="4-方法"><a href="#4-方法" class="headerlink" title="4.方法"></a>4.方法</h2><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190525/nRL0iMQ2eij2.png?imageslim" alt="Image">    </p><h1 id="二、navigator对象"><a href="#二、navigator对象" class="headerlink" title="二、navigator对象"></a>二、navigator对象</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>包含浏览器相关信息</p><h2 id="2-常用属性"><a href="#2-常用属性" class="headerlink" title="2.常用属性"></a>2.常用属性</h2><p>navigator.userAgent<br>前端也可以判断访问类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>((navigator.userAgent.match(<span class="regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">"手机链接"</span>;     </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">"PC链接"</span>;     </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="三、history对象"><a href="#三、history对象" class="headerlink" title="三、history对象"></a>三、history对象</h1><h2 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1.定义"></a>1.定义</h2><p>window对象给我们提供了一个history对象，与浏览器历史记录进行交互。<br>该对象包含浏览器访问过的URL</p><h2 id="2-方法"><a href="#2-方法" class="headerlink" title="2.方法"></a>2.方法</h2><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190525/f649lwXnB1NV.png?imageslim" alt="Image">        </p>]]></content>
      
      
      <categories>
          
          <category> WebAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BOM介绍和常用事件</title>
      <link href="/2019/05/14/2.webAPI/BOM/1.BOM%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%B8%B8%E7%94%A8%E4%BA%8B%E4%BB%B6/"/>
      <url>/2019/05/14/2.webAPI/BOM/1.BOM%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%B8%B8%E7%94%A8%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="一、BOM概述"><a href="#一、BOM概述" class="headerlink" title="一、BOM概述"></a>一、BOM概述</h1><h2 id="1-什么是BOM"><a href="#1-什么是BOM" class="headerlink" title="1.什么是BOM"></a>1.什么是BOM</h2><p>浏览器对象模型，提供了与浏览器窗口进行交互的对象<br>BOM的核心对象是window<br>BOM是非标准的，兼容性较差，不同浏览器厂商的BOM可能不同</p><h2 id="2-BOM的构成"><a href="#2-BOM的构成" class="headerlink" title="2.BOM的构成"></a>2.BOM的构成</h2><p>BOM包含DOM<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190525/ShyMnvO6msYS.png?imageslim" alt="Image">    </p><h2 id="3-window对象"><a href="#3-window对象" class="headerlink" title="3.window对象"></a>3.window对象</h2><p>window是浏览器的顶级对象，是一个全局对象；<br>全局变量和方法都可以被window调用，直接调用时相当于省略了window<br>window有一个特殊属性<code>window.name</code></p><h1 id="二、window对象常见事件"><a href="#二、window对象常见事件" class="headerlink" title="二、window对象常见事件"></a>二、window对象常见事件</h1><p>以下事件都有两种添加方式,带on和不带on</p><h2 id="1-窗口加载事件"><a href="#1-窗口加载事件" class="headerlink" title="1.窗口加载事件"></a>1.窗口加载事件</h2><pre><code>load </code></pre><p>整个页面全部加载完才执行里面的代码，可以利用此事件把js代码放到任意位置<br>传统方式只能写一次，addEventListener()可以写多个</p><pre><code>DOMContentLoaded</code></pre><p>DOM元素加载完就执行代码，不包括图片文字css等元素，加载速度更快</p><h2 id="2-调整窗口大小事件"><a href="#2-调整窗口大小事件" class="headerlink" title="2.调整窗口大小事件"></a>2.调整窗口大小事件</h2><p><code>resize</code> 浏览器窗口大小发生变化就会触发事件<br><code>window.innerWidth</code> 当前浏览器窗口宽度<br><code>window.innerHeight</code> 当前浏览器窗口高度</p><h1 id="三、定时器"><a href="#三、定时器" class="headerlink" title="三、定时器"></a>三、定时器</h1><h2 id="1-setTimeout延时器"><a href="#1-setTimeout延时器" class="headerlink" title="1.setTimeout延时器"></a>1.setTimeout延时器</h2><pre><code>window.setTimeout(调用函数, 延迟毫秒数)</code></pre><p>延迟一段时间后开始执行函数，只执行一次<br>window一般省略<br>调用函数可以写函数名或整个函数<br>延迟毫秒数如果省略是0立即执行<br>页面中可能有很多定时器，需要给定时器起名字区分</p><h2 id="2-setInterval定时器"><a href="#2-setInterval定时器" class="headerlink" title="2.setInterval定时器"></a>2.setInterval定时器</h2><pre><code>setInterval(调用函数, 间隔毫秒数)</code></pre><p>间隔多少时间重复执行 第一次调用也会有延迟时间，可以先调用一次函数 再定时</p><h2 id="3-停止定时器"><a href="#3-停止定时器" class="headerlink" title="3.停止定时器"></a>3.停止定时器</h2><pre><code>clearTimeout(定时器名字);clearInterval(定时器名字);</code></pre><h1 id="四、this指向问题"><a href="#四、this指向问题" class="headerlink" title="四、this指向问题"></a>四、this指向问题</h1><p>this的指向在函数执行时才能确定，一般指向调用函数的对象<br>全局作用域下、或者普通函数中this永远指向window（注意定时器里面的this指向window）；<br>方法/事件调用中 this指向方法/事件的调用者；<br>构造函数中 this指向函数的实例对象</p>]]></content>
      
      
      <categories>
          
          <category> WebAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用鼠标和键盘事件</title>
      <link href="/2019/05/14/2.webAPI/DOM/9.%E5%B8%B8%E7%94%A8%E9%BC%A0%E6%A0%87%E5%92%8C%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/"/>
      <url>/2019/05/14/2.webAPI/DOM/9.%E5%B8%B8%E7%94%A8%E9%BC%A0%E6%A0%87%E5%92%8C%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-常用鼠标事件："><a href="#1-常用鼠标事件：" class="headerlink" title="1.常用鼠标事件："></a>1.常用鼠标事件：</h2><pre><code>click 点击  focus 获得焦点  blur 失去焦点 mouseover 鼠标经过mouseout 鼠标离开mouseenter 鼠标经过（不冒泡）mouseleave 鼠标离开（不冒泡）mousemove 鼠标移动 只要移动鼠标就会触发事件contextmenu 右键菜单 阻止默认行为可以禁用右键菜单selectstart 鼠标开始选中 阻止默认行为可以禁止选中文字</code></pre><h2 id="2-鼠标事件对象："><a href="#2-鼠标事件对象：" class="headerlink" title="2.鼠标事件对象："></a>2.鼠标事件对象：</h2><pre><code>e.clientX 鼠标在可视区的X坐标e.clientY 鼠标在可视区的Y坐标e.pageX 鼠标在页面文档的X坐标e.pageY 鼠标在页面文档的Y坐标e.screenX 鼠标在电脑屏幕的X坐标e.screenY 鼠标在电脑屏幕的Y坐标</code></pre><h2 id="3-常用键盘事件"><a href="#3-常用键盘事件" class="headerlink" title="3.常用键盘事件"></a>3.常用键盘事件</h2><pre><code>keyup     键盘弹起触发keydown     键盘按下触发 keypress     键盘按下触发 不识别功能键如ctrl shift 方向键等        </code></pre><p>如果三个事件都存在，执行顺序： 先keydown – keypress –keyup后</p><h2 id="4-键盘事件对象"><a href="#4-键盘事件对象" class="headerlink" title="4.键盘事件对象"></a>4.键盘事件对象</h2><pre><code>e.keyCode 返回该键的ASCII码值 </code></pre><p>keyup和keydown不区分字母大小写 a和A都是65<br>keypress区分大小写</p>]]></content>
      
      
      <categories>
          
          <category> WebAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件高级</title>
      <link href="/2019/05/14/2.webAPI/DOM/8.%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7/"/>
      <url>/2019/05/14/2.webAPI/DOM/8.%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="一、传统操作事件"><a href="#一、传统操作事件" class="headerlink" title="一、传统操作事件"></a>一、传统操作事件</h1><h2 id="1-传统方式注册"><a href="#1-传统方式注册" class="headerlink" title="1.传统方式注册"></a>1.传统方式注册</h2><p>行内注册<code>&lt;button onclick = &#39;alert(&#39;hello&#39;)&#39;&gt;点击&lt;/button&gt;</code><br>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var btn = document.querySelector(&apos;button&apos;);</span><br><span class="line">btn.onclick = function()&#123;&#125;;</span><br></pre></td></tr></table></figure><p>特点：同一个事件只能注册一个监听器(即回调函数)</p><h2 id="2-传统方式删除"><a href="#2-传统方式删除" class="headerlink" title="2.传统方式删除"></a>2.传统方式删除</h2><p>元素.onclick = null;<br>或者把function设置为null</p><h1 id="二、方法监听操作事件"><a href="#二、方法监听操作事件" class="headerlink" title="二、方法监听操作事件"></a>二、方法监听操作事件</h1><h2 id="1-方法监听注册"><a href="#1-方法监听注册" class="headerlink" title="1.方法监听注册"></a>1.方法监听注册</h2><pre><code>元素.addEventListener(&apos;事件类型&apos;,监听器,[第三个参数]);</code></pre><p>例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.addEventListener(&apos;click&apos;, function()&#123;</span><br><span class="line">alert(&apos;hello&apos;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>事件类型要加引号，且不带on;<br>同一个元素 同一个事件可以添加多个监听器（事件处理程序）<br>第三个参数下面事件流有解释</p><p>IE9以下用attachEvent(‘事件类型带on’，监听器); 只在IE浏览器有效</p><h2 id="2-方法监听删除"><a href="#2-方法监听删除" class="headerlink" title="2.方法监听删除"></a>2.方法监听删除</h2><pre><code>元素.removeEventListener（&apos;事件类型&apos;,监听器名字 ） </code></pre><p>要写函数名字所以要把函数单独声明，删除时不带()</p><p>IE9以下使用 detachEvent(‘onclick’,fn)</p><h1 id="三、DOM事件流"><a href="#三、DOM事件流" class="headerlink" title="三、DOM事件流"></a>三、DOM事件流</h1><h2 id="1-事件流定义"><a href="#1-事件流定义" class="headerlink" title="1.事件流定义"></a>1.事件流定义</h2><p>js代码只能执行捕获或冒泡其中一个阶段<br>传统的添加事件方法onclick、attachEvent只能获取冒泡阶段，看不到捕获状态<br>addEventListener第三个参数如果为true是捕获阶段，为false或省略是冒泡阶段<br>有的事件是没有冒泡的如blur focus mouseenter mouseleave<br>当处于目标阶段时，捕获和冒泡按照代码书写顺序执行，不一定是先捕获再冒泡<br>事件流和位置没有关系，只要有嵌套都会传播事件</p><h1 id="四、事件对象-事件源参数"><a href="#四、事件对象-事件源参数" class="headerlink" title="四、事件对象(事件源参数)"></a>四、事件对象(事件源参数)</h1><p>可以自己定义名称event、evt、e<br>事件对象写在侦听器的小括号里，当形参来看；<br>有事件就存在事件对象，不需要传递参数，系统自动创建；<br>包含了事件相关的信息集合，如鼠标事件集合、键盘事件集合<br>IE678只兼容window.event，兼容性处理： e = e || window.event</p><h2 id="1-事件对象常见的属性"><a href="#1-事件对象常见的属性" class="headerlink" title="1.事件对象常见的属性"></a>1.事件对象常见的属性</h2><p><code>e.target</code> 返回触发事件的对象  和this的区别：this是返回绑定事件的对象<br><code>e.srcElement</code> IE678兼容 返回触发事件的对象<br><code>e.type</code> 返回事件类型</p><h2 id="2-事件对象常见的方法"><a href="#2-事件对象常见的方法" class="headerlink" title="2.事件对象常见的方法"></a>2.事件对象常见的方法</h2><p><strong>1.阻止默认行为</strong><br>让链接不跳转 让提交按钮不提交<br><code>e.preventDefault();</code> 是方法  标准写法 不支持ie678<br><code>return false; return</code>后面代码不执行 仅限于传统注册方式<br><code>e.returnValue;</code> 是属性  非标准 ie678使用<br><strong>2.阻止冒泡</strong><br><code>e.stopPropagtion();</code> 写在哪里从哪个元素开始不再冒泡</p><p>事件冒泡的应用：事件委托<br>原理：把事件注册给父元素，利用冒泡原理，子元素冒泡到父元素上，减少dom操作次数提高性能</p>]]></content>
      
      
      <categories>
          
          <category> WebAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>节点和节点操作</title>
      <link href="/2019/05/14/2.webAPI/DOM/7.%E8%8A%82%E7%82%B9%E5%92%8C%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/05/14/2.webAPI/DOM/7.%E8%8A%82%E7%82%B9%E5%92%8C%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="一、为什么学节点操作"><a href="#一、为什么学节点操作" class="headerlink" title="一、为什么学节点操作"></a>一、为什么学节点操作</h1><p>利用节点间的关系获取元素更简单，逻辑性比较强</p><h1 id="二、节点概述"><a href="#二、节点概述" class="headerlink" title="二、节点概述"></a>二、节点概述</h1><h2 id="1-什么是节点"><a href="#1-什么是节点" class="headerlink" title="1.什么是节点"></a>1.什么是节点</h2><p>网页中所有内容（属性、文本、元素等）都是节点，在DOM中用node表示</p><h2 id="2-节点属性和分类"><a href="#2-节点属性和分类" class="headerlink" title="2.节点属性和分类"></a>2.节点属性和分类</h2><p>nodeType节点类型 元素节点是1  属性节点是2 文本节点是3<br>nodeName节点名称<br>nodeValue节点值<br>我们主要操作的是<strong>元素节点</strong></p><h1 id="三、节点层级"><a href="#三、节点层级" class="headerlink" title="三、节点层级"></a>三、节点层级</h1><p>如果没有找到节点返回null</p><h2 id="1-父节点"><a href="#1-父节点" class="headerlink" title="1.父节点"></a>1.父节点</h2><pre><code>element.parentNode</code></pre><p>得到离元素最近的父亲节点（亲爸爸）</p><h2 id="2-子节点"><a href="#2-子节点" class="headerlink" title="2.子节点"></a>2.子节点</h2><pre><code>element.childNodes 得到所有子节点的集合，包括所有节点类型，不提倡使用element.children 得到子元素节点的集合，只获得元素节点，实际常用element.firstChild 得到第一个子节点 .lastChild 得到最后一个子节点element.firstElementChild 得到第一个子元素节点  IE9以上支持element.lastElementChild 得到第一个子元素节点 IE9以上支持</code></pre><p>实际开发使用children加索引号选择first和last，既没有兼容性问题又能选择元素节点<br>        如第一个ul.children[0]<br>        最后一个ul.children[ul.children.length-1]</p><h2 id="3-兄弟节点-使用较少"><a href="#3-兄弟节点-使用较少" class="headerlink" title="3.兄弟节点 使用较少"></a>3.兄弟节点 使用较少</h2><pre><code>node.nextSibling 下一个兄弟节点 包括所有类型node.previousSibling 上一个兄弟节点 包括所有类型node.nextElementSibling 下一个兄弟元素节点 IE9以上支持node.previousElementSibling 上一个兄弟元素节点 IE9以上支持</code></pre><h1 id="四、节点操作"><a href="#四、节点操作" class="headerlink" title="四、节点操作"></a>四、节点操作</h1><h2 id="1-创建节点"><a href="#1-创建节点" class="headerlink" title="1.创建节点"></a>1.创建节点</h2><pre><code>document.createElement(&apos;标签名&apos;)</code></pre><p>创建完要添加才能看到</p><h2 id="2-添加节点"><a href="#2-添加节点" class="headerlink" title="2.添加节点"></a>2.添加节点</h2><pre><code>父节点.appendChild(子节点)  </code></pre><p>添加的子节点是放在父亲的末尾</p><pre><code>父节点.insertBefore(&apos;要插入的节点&apos;, 子节点) </code></pre><p>添加在某个子节点之前</p><h2 id="3-删除节点"><a href="#3-删除节点" class="headerlink" title="3.删除节点"></a>3.删除节点</h2><pre><code>父节点.removeChild(子节点)</code></pre><h2 id="4-克隆节点"><a href="#4-克隆节点" class="headerlink" title="4.克隆节点"></a>4.克隆节点</h2><pre><code>node.cloneNode(参数) 得到node的克隆节点</code></pre><p>参数：true 表示完全克隆，默认false 只克隆元素标签  </p><h1 id="三种动态创建元素区别"><a href="#三种动态创建元素区别" class="headerlink" title="三种动态创建元素区别"></a>三种动态创建元素区别</h1><p>创建多个元素时<br><code>document.write(&#39;&lt;p&gt;&lt;/p&gt;&#39;)</code>直接将内容写入页面的内容流，但是页面加载完毕会导致页面重绘<br><code>innerHTML</code>拼接字符串时，效率比较低，采取数组形式效率很高但是结构较复杂<br><code>createElement(&#39;p&#39;)</code>创建多个元素效率稍低，但是结构更清晰</p>]]></content>
      
      
      <categories>
          
          <category> WebAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义属性</title>
      <link href="/2019/05/14/2.webAPI/DOM/6.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7/"/>
      <url>/2019/05/14/2.webAPI/DOM/6.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="自定义属性操作"><a href="#自定义属性操作" class="headerlink" title="自定义属性操作"></a>自定义属性操作</h2><p>自定义属性是程序员自己创建的属性</p><h3 id="1）获取属性值有两种方法："><a href="#1）获取属性值有两种方法：" class="headerlink" title="1）获取属性值有两种方法："></a>1）获取属性值有两种方法：</h3><pre><code>element.属性名  只能获取内置属性element.getAttribute(&apos;属性名&apos;)  还可以获取自定义属性，获取到的是字符型</code></pre><h3 id="2）修改属性值的两种方法："><a href="#2）修改属性值的两种方法：" class="headerlink" title="2）修改属性值的两种方法："></a>2）修改属性值的两种方法：</h3><pre><code>element.属性名 = &apos;属性值&apos;;  只能修改内置属性element.setAttribute(&apos;属性名&apos;,&apos;属性值&apos;);  可以修改自定义属性</code></pre><h3 id="3）移除属性的方法"><a href="#3）移除属性的方法" class="headerlink" title="3）移除属性的方法"></a>3）移除属性的方法</h3><pre><code>element.removeAttribute(&apos;属性名&apos;);</code></pre><h2 id="tab栏切换案例-重要"><a href="#tab栏切换案例-重要" class="headerlink" title="tab栏切换案例 重要"></a>tab栏切换案例 重要</h2><p>设置自定义属性判断用户点了哪一个tab栏</p><h2 id="H5自定义属性"><a href="#H5自定义属性" class="headerlink" title="H5自定义属性"></a>H5自定义属性</h2><p>属性有时不好确认是内置属性还是自定义属性；<br>H5规定所有新增的自定义属性命名都由data-开头</p><p>H5新增了获取自定义属性的方法： (IE11以上支持)<br>例如自定义属性是data-index-name，获取时：<code>element.dataset.indexName</code>或<code>element.dataset[&#39;indexName&#39;]</code><br>dataset是一个集合 里面存放了所有以data-开头的自定义属性</p>]]></content>
      
      
      <categories>
          
          <category> WebAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排他思想</title>
      <link href="/2019/05/14/2.webAPI/DOM/5.%E6%8E%92%E4%BB%96%E6%80%9D%E6%83%B3/"/>
      <url>/2019/05/14/2.webAPI/DOM/5.%E6%8E%92%E4%BB%96%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p>如果有同一组元素，我们想要某一个元素实现某种样式， 需要用到循环的排他思想算法：<br>1.所有元素全部清除样式<br>2.给当前元素设置样式<br>3.注意顺序不能颠倒<br>利用双层for循环<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190525/izPokjzR8tgX.png?imageslim" alt="Image"><br>案例：百度换肤<br>案例：隔行变色<br>案例：全选反选 重点</p>]]></content>
      
      
      <categories>
          
          <category> WebAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM元素操作</title>
      <link href="/2019/05/14/2.webAPI/DOM/4.DOM%E5%85%83%E7%B4%A0%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/05/14/2.webAPI/DOM/4.DOM%E5%85%83%E7%B4%A0%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="1-改变元素内容"><a href="#1-改变元素内容" class="headerlink" title="1.改变元素内容"></a>1.改变元素内容</h1><p><code>element.innerText  = 内容;</code><br><code>element.innerHTML  = 内容;</code><br>都可以读写，获取/修改文字内容<br>获取的区别：<br>    <code>innerText 不获取空格 标签 只会获取文本</code><br>    <code>innerHTML 获取空格 标签 和文本</code><br>设置内容时的区别：<br>    <code>innerText 不会解析html标签</code><br>    <code>innerHTML 会解析html标签</code></p><hr><h1 id="2-修改元素属性"><a href="#2-修改元素属性" class="headerlink" title="2.修改元素属性"></a>2.修改元素属性</h1><p><code>element.属性 = 属性值;</code><br>案例： 分时问候</p><hr><h1 id="3-修改表单元素的属性"><a href="#3-修改表单元素的属性" class="headerlink" title="3.修改表单元素的属性"></a>3.修改表单元素的属性</h1><p>修改表单元素里面的内容 是通过改变value属性修改的；<br>其他可以操作的表单属性还有<code>type value checked selected disabled</code><br>使用举例：btn.disabled = true; 表示此按钮被禁用了</p><p>事件下的this指向事件的调用者<br>属性名 = 属性值 js里用true表示 如<code>checked，disabled，selected</code></p><p>案例：密码框文字显示隐藏</p><hr><h1 id="4-修改样式属性"><a href="#4-修改样式属性" class="headerlink" title="4.修改样式属性"></a>4.修改样式属性</h1><h2 id="1）行内样式操作"><a href="#1）行内样式操作" class="headerlink" title="1）行内样式操作"></a>1）行内样式操作</h2><p><code>element.style.属性=&#39;属性值&#39;;</code><br>属性采取驼峰命名法书写，如fontSize,backgroundColor<br>修改完，生成的是行内样式 权重比较高<br>案例：循环精灵图、显示隐藏文本框内容</p><h2 id="2）类名样式操作"><a href="#2）类名样式操作" class="headerlink" title="2）类名样式操作"></a>2）类名样式操作</h2><p><code>element.className = &#39;类名&#39;;</code><br>有很多样式需要修改时，style方式书写较为麻烦，采取类名修改样式属性<br>在css新类里写好要变化的样式，在事件函数里设置<br>        element.className = ‘类名’<br>更改元素的样式<br>*<em>注意: *</em>会覆盖原来的类名，要保留原来的类名需要在两个类之间加空格</p>]]></content>
      
      
      <categories>
          
          <category> WebAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM元素获取</title>
      <link href="/2019/05/14/2.webAPI/DOM/3.DOM%E5%85%83%E7%B4%A0%E8%8E%B7%E5%8F%96/"/>
      <url>/2019/05/14/2.webAPI/DOM/3.DOM%E5%85%83%E7%B4%A0%E8%8E%B7%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<p><strong>元素才能使用这些方法</strong></p><h2 id="1-根据id获取"><a href="#1-根据id获取" class="headerlink" title="1.根据id获取"></a>1.根据id获取</h2><p><code>document.getElementById(&quot;id值&quot;)</code><br>id加引号 区分大小写<br>只能是document<br>返回的是DOM的元素对象,类型是object<br>console.dir(元素);可以查看元素对象的详细信息</p><h2 id="2-根据标签名获取"><a href="#2-根据标签名获取" class="headerlink" title="2.根据标签名获取"></a>2.根据标签名获取</h2><p><code>getElementsByTagName()</code><br>括号里标签名要加引号；<br>返回的是元素对象的集合，以伪数组的形式存储；<br>可以通过遍历的方式依次打印元素对象<br>元素对象是动态的<br>可以通过<code>element.getElementsByTagName(&#39;&#39;)</code>获取某种元素里面的所有标签</p><h2 id="3-根据类名获取"><a href="#3-根据类名获取" class="headerlink" title="3.根据类名获取"></a>3.根据类名获取</h2><p><code>getElementsByClassName()</code><br>返回的也是伪数组形式的对象集合，想要访问单个对象需要加索引号</p><h2 id="4-H5新增获取元素的方法"><a href="#4-H5新增获取元素的方法" class="headerlink" title="4.H5新增获取元素的方法"></a>4.H5新增获取元素的方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.querySelector(&apos;#id&apos;)</span><br><span class="line">document.querySelector(&apos;.classname&apos;) </span><br><span class="line">document.querySelector(&apos;标签名&apos;)</span><br></pre></td></tr></table></figure><p>如果有多个相同的id、类名、标签名，只获取第一个<br>如果想获取全部的，使用<code>document.querySelectorAll()</code><br>返回的是伪数组对象集合nodelist<br>括号里面还可以写div:first-child</p><h2 id="5-获取特殊元素"><a href="#5-获取特殊元素" class="headerlink" title="5.获取特殊元素"></a>5.获取特殊元素</h2><p>1)获取body元素<br><code>document.body</code><br>2)获取html元素<br><code>document.documentElement</code></p>]]></content>
      
      
      <categories>
          
          <category> WebAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件基础</title>
      <link href="/2019/05/14/2.webAPI/DOM/2.%E4%BA%8B%E4%BB%B6%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/05/14/2.webAPI/DOM/2.%E4%BA%8B%E4%BB%B6%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="1-事件概述"><a href="#1-事件概述" class="headerlink" title="1.事件概述"></a>1.事件概述</h2><p>事件：可以被js侦测到的行为</p><h2 id="2-事件三要素"><a href="#2-事件三要素" class="headerlink" title="2.事件三要素"></a>2.事件三要素</h2><ul><li>事件源 事件被触发的对象 谁被触发</li><li>事件类型 如何触发 什么事件</li><li>事件处理程序 通过一个函数赋值的方式完成<br>例如<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.onclick = function() &#123;</span><br><span class="line">alert(&apos;hello&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-事件执行的步骤"><a href="#3-事件执行的步骤" class="headerlink" title="3.事件执行的步骤"></a>3.事件执行的步骤</h2><ul><li>获取事件源  </li><li>注册事件/绑定事件  不是必须有的</li><li>添加事件处理程序 函数赋值</li></ul>]]></content>
      
      
      <categories>
          
          <category> WebAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API和DOM简介</title>
      <link href="/2019/05/14/2.webAPI/DOM/1.API%E5%92%8CDOM%E6%A6%82%E5%BF%B5/"/>
      <url>/2019/05/14/2.webAPI/DOM/1.API%E5%92%8CDOM%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="一、API"><a href="#一、API" class="headerlink" title="一、API"></a>一、API</h1><h2 id="1-Web-APIs和js基础关联性"><a href="#1-Web-APIs和js基础关联性" class="headerlink" title="1.Web APIs和js基础关联性"></a>1.Web APIs和js基础关联性</h2><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190524/ko6kIKqonlsF.png?imageslim" alt="Image"></p><h2 id="2-API和Web-API"><a href="#2-API和Web-API" class="headerlink" title="2.API和Web API"></a>2.API和Web API</h2><p>API:应用程序编程接口，是给程序员提供的一种工具，以便轻松实现想要的功能<br>Web API:浏览器提供的操作浏览器功能（BOM）和页面元素（DOM）的API，主要针对浏览器做交互效果</p><h1 id="二、DOM"><a href="#二、DOM" class="headerlink" title="二、DOM"></a>二、DOM</h1><h2 id="1-DOM简介"><a href="#1-DOM简介" class="headerlink" title="1.DOM简介"></a>1.DOM简介</h2><p>文档对象模型，处理HTML和XML的标准编程接口。可以改变网页的内容、结构和样式<br>DOM树：<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190524/UoqjwpaqNzMq.png?imageslim" alt="Image"><br>文档： document     元素：element所有标签     节点： node所有内容<br>DOM把以上内容都看做是对象</p>]]></content>
      
      
      <categories>
          
          <category> WebAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单类型和复杂类型</title>
      <link href="/2019/05/13/1.js%E5%9F%BA%E7%A1%80/9.%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%A4%8D%E6%9D%82%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/05/13/1.js%E5%9F%BA%E7%A1%80/9.%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%A4%8D%E6%9D%82%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="一、简单数据类型（值类型）"><a href="#一、简单数据类型（值类型）" class="headerlink" title="一、简单数据类型（值类型）"></a>一、简单数据类型（值类型）</h1><h2 id="1-五大类"><a href="#1-五大类" class="headerlink" title="1.五大类"></a>1.五大类</h2><p><code>string ，number，boolean，undefined，null(null是一个空object)</code></p><h2 id="2-存储方式"><a href="#2-存储方式" class="headerlink" title="2.存储方式"></a>2.存储方式</h2><p>存储在栈中，内存直接开辟空间，存放的是值</p><h2 id="3-参数传递"><a href="#3-参数传递" class="headerlink" title="3.参数传递"></a>3.参数传递</h2><p>函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的<strong>值复制</strong>了一份给形参，那么在方法内部对形参做任何修改，都不会影响到外部的变量。</p><h1 id="二、复杂数据类型（引用类型）"><a href="#二、复杂数据类型（引用类型）" class="headerlink" title="二、复杂数据类型（引用类型）"></a>二、复杂数据类型（引用类型）</h1><h2 id="1-用new声明的都是"><a href="#1-用new声明的都是" class="headerlink" title="1.用new声明的都是"></a>1.用new声明的都是</h2><p>Object、Array、Date等</p><h2 id="2-存储方式-1"><a href="#2-存储方式-1" class="headerlink" title="2.存储方式"></a>2.存储方式</h2><p>在栈里存放的是地址（16进制），地址指向堆内存里的数据， 真正的对象实例存放在堆空间中</p><h2 id="3-参数传递-1"><a href="#3-参数传递-1" class="headerlink" title="3.参数传递"></a>3.参数传递</h2><p>函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的<strong>堆地址复制</strong>给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内置对象</title>
      <link href="/2019/05/13/1.js%E5%9F%BA%E7%A1%80/8.%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/05/13/1.js%E5%9F%BA%E7%A1%80/8.%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h1><h2 id="1-js对象分类"><a href="#1-js对象分类" class="headerlink" title="1.js对象分类"></a>1.js对象分类</h2><p>自定义对象（ECMAScript）、内置对象（ECMAScript）、浏览器对象（JSAPI）</p><h2 id="2-什么是内置对象"><a href="#2-什么是内置对象" class="headerlink" title="2.什么是内置对象"></a>2.什么是内置对象</h2><p>JS自带的一些对象，提供了常用的功能和方法，优点：帮助我们快速开发</p><h2 id="3-有哪些内置对象"><a href="#3-有哪些内置对象" class="headerlink" title="3.有哪些内置对象"></a>3.有哪些内置对象</h2><p>Math,Date,Array,String等</p><hr><h1 id="二、内置对象学习方法"><a href="#二、内置对象学习方法" class="headerlink" title="二、内置对象学习方法"></a>二、内置对象学习方法</h1><h2 id="1-MDN"><a href="#1-MDN" class="headerlink" title="1.MDN"></a>1.MDN</h2><p><a href="http://developer.mozilla.org" target="_blank" rel="noopener">http://developer.mozilla.org</a></p><h2 id="2-使用内置对象的方法"><a href="#2-使用内置对象的方法" class="headerlink" title="2.使用内置对象的方法"></a>2.使用内置对象的方法</h2><p>  查阅该方法的功能<br>  查看里面参数的意义和类型<br>  查看返回值的意义和类型<br>  通过demo进行测试</p><hr><h1 id="三、Math对象"><a href="#三、Math对象" class="headerlink" title="三、Math对象"></a>三、Math对象</h1><p>Math不是构造函数，不需要new关键字</p><h2 id="1-属性PI，最大值max最小值min"><a href="#1-属性PI，最大值max最小值min" class="headerlink" title="1.属性PI，最大值max最小值min"></a>1.属性PI，最大值max最小值min</h2><pre><code>Math.PIMath.max()Math.min()</code></pre><h2 id="2-绝对值"><a href="#2-绝对值" class="headerlink" title="2.绝对值"></a>2.绝对值</h2><pre><code>Math.abs();</code></pre><h2 id="3-三个取整方法"><a href="#3-三个取整方法" class="headerlink" title="3.三个取整方法"></a>3.三个取整方法</h2><pre><code>向下取整： Math.floor();向上取整： Math.ceil();四舍五入： Math.round();    注意Math.round(-1.5) 结果是-1 因为.5往大了取</code></pre><h2 id="4-随机数方法"><a href="#4-随机数方法" class="headerlink" title="4.随机数方法"></a>4.随机数方法</h2><pre><code>Math.random()返回随机小数，默认范围在[0,1)之间；括号内没有参数；1）想要得到两个数之间的随机整数，包括最小和最大值：function getRandom(min, max) {    return Math.floor(Math.random() * (max - min + 1)) + min;  }2）随机点名    把数组的索引号改成随机整数即可，范围在 0 ~ length-1之间</code></pre><hr><h1 id="四、日期对象"><a href="#四、日期对象" class="headerlink" title="四、日期对象"></a>四、日期对象</h1><p>Date()是构造函数，必须使用new来调用 类似的还有Array()和Object()</p><h2 id="1-使用Date"><a href="#1-使用Date" class="headerlink" title="1.使用Date"></a>1.使用Date</h2><pre><code>如果没有参数 返回系统当前时间    var date1 = new Date();  有参数时：     参数是数字型 var date2 = new Date(2019,10,01);    11月    参数是字符串型 var date3 = new Date(&apos;2019-10-1 10:59:00&apos;);</code></pre><h2 id="2-日期的方法：格式化日期"><a href="#2-日期的方法：格式化日期" class="headerlink" title="2.日期的方法：格式化日期"></a>2.日期的方法：格式化日期</h2><p>var date = new Date();<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190526/nMYv7O8QJMHw.png?imageslim" alt="mark"></p><pre><code>方法：    date.getFullYear() 获取年份    date.getMonth() 获取月份 取值是0-11    date.getDate() 获取日    date.getDay() 获取周几 取值是0-6 对应周日-周六    date.getHours()  获取时    date.getMinutes() 获取分    date.getSeconds() 获取秒获取毫秒值的方法： 自1970年1月1日开始    date.valueOf()  获取当前毫秒数    date.getTime()  获取当前毫秒数    var times = +new Date(); 最常用              不给参数是当前时间             给参数是指定时间的毫秒数    Date.now()  h5新增 不需要new对象</code></pre><h2 id="倒计时案例："><a href="#倒计时案例：" class="headerlink" title="倒计时案例："></a>倒计时案例：</h2><p>用 时间戳（毫秒数） 转换为时分秒<br>输入时间总毫秒数 - 当前时间总毫秒数 获得 倒计时总时间<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190526/9G3XdiEmCqUo.png?imageslim" alt="mark"></p><hr><h1 id="五、数组对象"><a href="#五、数组对象" class="headerlink" title="五、数组对象"></a>五、数组对象</h1><h2 id="1-判断对象是否某种类型"><a href="#1-判断对象是否某种类型" class="headerlink" title="1.判断对象是否某种类型"></a>1.判断对象是否某种类型</h2><pre><code>var arr =[];1.instanceof方法        arr instanceof Array  返回true      null instanceof Object返回true2.Array.isArray(arr) 返回true</code></pre><h2 id="2-添加删除数组元素的方法"><a href="#2-添加删除数组元素的方法" class="headerlink" title="2.添加删除数组元素的方法"></a>2.添加删除数组元素的方法</h2><pre><code>数组名.push(元素);     向数组末尾添加元素 返回值是数组长度数组名.pop();         删除数组末尾的元素 返回值是被删除的元素数组名.unshift(元素);     在数组前面添加元素 返回值是数组长度数组名.shift();         删除数组第一个元素 返回值是被删除的元素</code></pre><h2 id="3-数组排序"><a href="#3-数组排序" class="headerlink" title="3.数组排序"></a>3.数组排序</h2><pre><code>数组名.reverse(); 翻转数组元素 返回新数组 改变原数组数组名.sort(); 给数组元素排序，参数是排序函数 返回新数组 改变原数组sort(function(a,b){    return a-b; //升序    return b-a; //降序})</code></pre><h2 id="4-数组元素索引方法"><a href="#4-数组元素索引方法" class="headerlink" title="4.数组元素索引方法"></a>4.数组元素索引方法</h2><pre><code>数组名.indexOf(元素)      从前往后查找    只返回第一个满足条件的索引号；    数组中如果没有该元素返回-1；数组名.lastIndexOf(元素)      倒着查找 返回值相同</code></pre><p>利用此方法实现数组去重<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190526/H20KEJIBbFzY.png?imageslim" alt="mark"></p><h2 id="5-数组转换为字符串"><a href="#5-数组转换为字符串" class="headerlink" title="5.数组转换为字符串"></a>5.数组转换为字符串</h2><pre><code>arr.toString()arr.join(‘分隔符’)  不写分隔符默认是逗号 常用的分隔符  -  &amp;</code></pre><h2 id="6-其他方法"><a href="#6-其他方法" class="headerlink" title="6.其他方法"></a>6.其他方法</h2><pre><code>arr1.concat(arr2)  连接两个数组     返回新数组     不改变原数组slice(开始索引,结束索引)  截取数组     不改变原数组    截取部分数组元素 包含开始不包含结束      返回截取掉的新数组    如果只给一个参数，从此索引开始往后截取splice(开始索引，截取长度，替换元素)  截取数组     返回截取掉的新数组    改变原数组     替换元素是替换了被截取掉的元素</code></pre><hr><h1 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h1><h2 id="1-基本包装类型"><a href="#1-基本包装类型" class="headerlink" title="1.基本包装类型"></a>1.基本包装类型</h2><p>概念<br>对象才有属性和方法，为什么字符串也有length属性？<br>因为存在基本包装类型：JS 把 简单数据类型 包装成 复杂数据类型</p><p>后台包装过程：<br>    1.创建对象，变量是b<br>    2.把变量b给变量a<br>    3.销毁变量b<br>基本包装类型创建完就销毁，不能再添加其他属性和方法。<br>可以使用部分js定义的属性和方法</p><h2 id="2-字符串不可变性"><a href="#2-字符串不可变性" class="headerlink" title="2.字符串不可变性"></a>2.字符串不可变性</h2><p>给字符串重新赋值，不会删除原有的字符串，只是改变了字符串变量的内存地址。原来的内存空间仍然存在。因此不要大量拼接字符串，可以把数据放在数组里，然后转换为字符串。</p><h2 id="3-字符串方法"><a href="#3-字符串方法" class="headerlink" title="3.字符串方法"></a>3.字符串方法</h2><p><strong>所有字符串方法都不改变原来的字符串</strong></p><h3 id="1-查找字符位置"><a href="#1-查找字符位置" class="headerlink" title="1.查找字符位置"></a>1.查找字符位置</h3><pre><code>indexOf(&apos;字符&apos;,起始位置)和数组的indexOf方法相同，找到返回索引值，找不到返回-1案例：统计某个字符出现的位置和次数</code></pre><h3 id="2-查找对应位置的字符"><a href="#2-查找对应位置的字符" class="headerlink" title="2.查找对应位置的字符"></a>2.查找对应位置的字符</h3><pre><code>str.charAt(索引）        返回对应索引的字符str.charCodeAt(索引)       返回字符的ASCII码，可以判断用户按下的哪个键str[索引] H5新增</code></pre><h3 id="3-拼接字符串"><a href="#3-拼接字符串" class="headerlink" title="3.拼接字符串"></a>3.拼接字符串</h3><pre><code>str1.concat(str2) 把str1和str2相连  返回新字符串 推荐使用加号</code></pre><h3 id="4-转换成大写"><a href="#4-转换成大写" class="headerlink" title="4.转换成大写"></a>4.转换成大写</h3><pre><code>str.toUpperCase() 把整个字符串转换成大写str[i].toUpperCase()  可以单独转换某个字符</code></pre><h3 id="5-转换成小写"><a href="#5-转换成小写" class="headerlink" title="5.转换成小写"></a>5.转换成小写</h3><pre><code>str.toLowerCase() 把整个字符串转换成小写str[i].toLowerCase() 单独转换某个字符</code></pre><h3 id="6-截取"><a href="#6-截取" class="headerlink" title="6.截取"></a>6.截取</h3><pre><code>substring(开始索引，结束索引); 包括开始不包括结束，如果只有一个值，从该索引截取到字符串末尾</code></pre><h3 id="7-替换字符"><a href="#7-替换字符" class="headerlink" title="7.替换字符"></a>7.替换字符</h3><pre><code>str.replace(&apos;a&apos;,&apos;b&apos;)  把字符a 替换为字符b 只会替换第一个遇到的字符    </code></pre><h3 id="8-转换成数组"><a href="#8-转换成数组" class="headerlink" title="8.转换成数组"></a>8.转换成数组</h3><pre><code>str.split(&apos;分隔符&apos;)  把字符串转换为数组，并添加分隔符分隔符取决于原来字符串内的分隔符</code></pre>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
            <tag> 内置对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象</title>
      <link href="/2019/05/13/1.js%E5%9F%BA%E7%A1%80/7.%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/05/13/1.js%E5%9F%BA%E7%A1%80/7.%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="一、对象概念"><a href="#一、对象概念" class="headerlink" title="一、对象概念"></a>一、对象概念</h1><h2 id="1-什么是对象"><a href="#1-什么是对象" class="headerlink" title="1.什么是对象"></a>1.什么是对象</h2><p>是一个具体的事物，不能是泛指的概念<br>JS中，对象是一组无序的相关属性和方法的集合，<br>键值对的集合、数据集和功能集 的集合</p><h2 id="2-为什么需要对象"><a href="#2-为什么需要对象" class="headerlink" title="2.为什么需要对象"></a>2.为什么需要对象</h2><p>和变量和数组相比，对象可以保存的信息结构更清晰</p><h1 id="二、创建对象的三种方式"><a href="#二、创建对象的三种方式" class="headerlink" title="二、创建对象的三种方式"></a>二、创建对象的三种方式</h1><h2 id="1-用字面量创建"><a href="#1-用字面量创建" class="headerlink" title="1.用字面量创建"></a>1.用字面量创建</h2><p>方式1    var 对象字面量： {属性和方法}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">name : <span class="string">'shawn'</span>,</span><br><span class="line">sayHi : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式2 创建空对象，再添加值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj =&#123;&#125;;</span><br><span class="line">obj.name=<span class="string">'shawn'</span>;</span><br><span class="line">obj.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-使用Object"><a href="#2-使用Object" class="headerlink" title="2.使用Object"></a>2.使用Object</h2><p>方式1 先创建空对象再给值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.name = <span class="string">'shawn'</span>;</span><br></pre></td></tr></table></figure><p>方式2 创建同时赋值：    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;</span><br><span class="line">name : <span class="string">'shawn'</span>,</span><br><span class="line">age : <span class="number">18</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-使用构造函数创建对象"><a href="#3-使用构造函数创建对象" class="headerlink" title="3.使用构造函数创建对象"></a>3.使用构造函数创建对象</h2><p>以上方式一次只能创建一个对象<br>构造函数： 把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面，这种思想称为工厂模式；<br>    构造函数里面封装的是对象，泛指的某一大类;对象是特指的某一个<br>语法格式：<br>    声明：    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 构造函数名(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.属性 = 值；</span><br><span class="line"><span class="keyword">this</span>.方法 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：<code>var  对象名 = new 构造函数名(实参);</code><br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190526/SEYJWlvB0TTh.png?imageslim" alt="mark">        </p><p>1.构造函数名首字母要大写；<br>2.构造函数不需要return就可以返回结果，返回的是对象；<br>3.调用构造函数必须使用new关键字</p><p>利用构造函数创建对象的过程也称为对象的实例化</p><p>ps:工厂模式和构造函数封装对象的不同之处：<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190526/y8R94kw8rh5g.png?imageslim" alt="mark"><br>函数名首字母不需要大小；内部需要定义一个空对象；需要return此对象；不需要使用new和this关键字</p><h2 id="4-对象的使用方法"><a href="#4-对象的使用方法" class="headerlink" title="4.对象的使用方法"></a>4.对象的使用方法</h2><p>1）获取对象的属性<br>    方法1： 对象名.属性名  <code>obj.name</code><br>    方法2： 对象名[‘属性名’]   <code>obj[&#39;age&#39;]</code><br>2）调用对象的方法： 对象名.方法名  <code>obj.sayHi();</code></p><h1 id="三、new关键字"><a href="#三、new关键字" class="headerlink" title="三、new关键字"></a>三、new关键字</h1><p>new的执行过程<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190526/unQzcVf4UKME.png?imageslim" alt="mark">    </p><h1 id="四、对象的遍历"><a href="#四、对象的遍历" class="headerlink" title="四、对象的遍历"></a>四、对象的遍历</h1><p>使用for in 语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(变量 <span class="keyword">in</span> 对象) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(k);  <span class="comment">//输出属性名和方法名</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[k]);  <span class="comment">//输出属性值和方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作用域和预解析</title>
      <link href="/2019/05/13/1.js%E5%9F%BA%E7%A1%80/6.%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%A2%84%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/05/13/1.js%E5%9F%BA%E7%A1%80/6.%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%A2%84%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h1><h2 id="1-什么是作用域"><a href="#1-什么是作用域" class="headerlink" title="1.什么是作用域"></a>1.什么是作用域</h2><p>代码名字（变量）在某个范围内起作用，这个范围就是作用域<br>目的是为了提高程序的可靠性，减少命名冲突<br>不同作用域下，相同的名字不会冲突</p><h2 id="2-js作用域分类（ES6之前）"><a href="#2-js作用域分类（ES6之前）" class="headerlink" title="2.js作用域分类（ES6之前）"></a>2.js作用域分类（ES6之前）</h2><p>全局作用域：整个script标签或者整个js文件<br>局部作用域：代码名字只在函数内部起作用<br>现阶段没有块级作用域，在ES6中新增了块级作用域，即{ }花括号里面的变量外面不能使用</p><h2 id="3-变量的作用域"><a href="#3-变量的作用域" class="headerlink" title="3.变量的作用域"></a>3.变量的作用域</h2><p>根据作用域的不同，变量分为两种，全局变量和局部变量<br>    全局变量：在任何地方都可以使用；只有在浏览器关闭时才会销毁，占内存更多<br>    局部变量：在函数内部的变量，只能在当前函数内使用；函数结束时就会销毁，节约内存空间</p><p>在函数内部 不声明只赋值的变量 也属于全局变量<br>函数的形参也属于局部变量</p><h2 id="4-作用域链"><a href="#4-作用域链" class="headerlink" title="4.作用域链"></a>4.作用域链</h2><p>函数嵌套时，内部函数可以访问外部函数的变量，用链式查找的方式决定变量的值，这种结构称为作用域链。取值按照就近原则。</p><h1 id="二、预解析"><a href="#二、预解析" class="headerlink" title="二、预解析"></a>二、预解析</h1><p>js解释器运行js代码分为两步<br>    1.预解析 ：把js代码所有var和function提升到当前作用域的最前面<br>    2.代码执行 ：从上到下执行代码</p><h1 id="1-变量预解析（变量提升）：只提升声明，不提升赋值"><a href="#1-变量预解析（变量提升）：只提升声明，不提升赋值" class="headerlink" title="1.变量预解析（变量提升）：只提升声明，不提升赋值"></a>1.变量预解析（变量提升）：只提升声明，不提升赋值</h1><p>变量：<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190526/3OhXKN0D8m4L.png?imageslim" alt="mark"><br>函数以变量形式声明时：<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190526/LCntf5zB4B58.png?imageslim" alt="mark"></p><h1 id="2-函数预解析（函数提升）："><a href="#2-函数预解析（函数提升）：" class="headerlink" title="2.函数预解析（函数提升）："></a>2.函数预解析（函数提升）：</h1><p>函数以这种形式声明时<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190526/QcbeaYtFJDEY.png?imageslim" alt="mark"><br>只提升函数声明，不调用函数。因此声明和调用的先后顺序不影响执行。<br>案例<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190526/QyCog6HlvvL6.png?imageslim" alt="mark"><br>输出 9 9 9 9 9 error</p><p>在函数内部，形参与变量名重名时，以形参为主<br>函数内部，只给值不声明是全局变量。但是不能和形参重名，重名的话就不是全局变量了<br>函数调用时，不会改变函数原来的作用域</p><p>​                ​            </p>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数</title>
      <link href="/2019/05/13/1.js%E5%9F%BA%E7%A1%80/5.%E5%87%BD%E6%95%B0/"/>
      <url>/2019/05/13/1.js%E5%9F%BA%E7%A1%80/5.%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、函数的概念"><a href="#一、函数的概念" class="headerlink" title="一、函数的概念"></a>一、函数的概念</h1><h2 id="1-为什么需要函数"><a href="#1-为什么需要函数" class="headerlink" title="1.为什么需要函数"></a>1.为什么需要函数</h2><p>让大量代码可以被重复使用；<br>代码模块化；</p><h2 id="2-函数"><a href="#2-函数" class="headerlink" title="2.函数"></a>2.函数</h2><p>封装了一块可以被重复执行调用的代码块,对外只提供一个简单的函数接口</p><h1 id="二、函数的使用"><a href="#二、函数的使用" class="headerlink" title="二、函数的使用"></a>二、函数的使用</h1><p>两个步骤：</p><h2 id="1-声明函数"><a href="#1-声明函数" class="headerlink" title="1.声明函数"></a>1.声明函数</h2><p>方式1    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function 函数名() &#123;</span><br><span class="line">函数体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var 函数名 = function()&#123;</span><br><span class="line">函数体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用时    fn();<br>fn是变量名 不是函数名<br>函数表达式也可以传递参数</p><p>函数名一般是动词，驼峰命名法；</p><h2 id="2-调用函数"><a href="#2-调用函数" class="headerlink" title="2.调用函数"></a>2.调用函数</h2><p>函数名();</p><p>函数不调用，自己不执行；</p><h1 id="三、函数的参数"><a href="#三、函数的参数" class="headerlink" title="三、函数的参数"></a>三、函数的参数</h1><p>形参和实参<br>声明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function 函数名（形参1，形参2...）&#123;</span><br><span class="line">函数体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：<br>    <code>函数名(实参1，实参2...);</code></p><p>形参是接收实参的，类似于变量；<br>函数的参数可有可无，数量不限；</p><p>形参和实参个数关系：<br>    个数相等：一一匹配；<br>    实参个数 &gt; 形参个数：舍弃多余的实参；<br>    实参个数 &lt; 形参个数：没有接收到值的形参是undifined；</p><h1 id="四、函数的返回值"><a href="#四、函数的返回值" class="headerlink" title="四、函数的返回值"></a>四、函数的返回值</h1><h2 id="1-return语句"><a href="#1-return语句" class="headerlink" title="1.return语句"></a>1.return语句</h2><p>声明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function 函数名() &#123;</span><br><span class="line">函数体；</span><br><span class="line">return 需要返回的值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：<br>    <code>函数名();</code></p><p>函数体内不应该写输出语句<br>使用return把函数结果返回给调用者，即 函数名() = 返回的值；</p><p>return只能返回一个值，如果写了多个，只会返回最后一个值；想返回多个值可以使用数组；</p><h2 id="2-return会终止函数"><a href="#2-return会终止函数" class="headerlink" title="2.return会终止函数"></a>2.return会终止函数</h2><p>return之后的函数语句不再执行，退出函数并返回值</p><h2 id="3-函数没有return返回undifined"><a href="#3-函数没有return返回undifined" class="headerlink" title="3.函数没有return返回undifined"></a>3.函数没有return返回undifined</h2><p>只要是函数都有返回值，函数没有return时返回值是undifined</p><h1 id="五、arguments的使用"><a href="#五、arguments的使用" class="headerlink" title="五、arguments的使用"></a>五、arguments的使用</h1><p>由于不确定传递多少个实参过来，<br>可以用arguments存储所有传递过来的实参，不再使用形参，跟形参无关<br>    1.arguments是伪数组，具有length属性和索引，但是没有真正数组的一些方法<br>    2.可以按照数组的方式遍历arguments<br>    3.只有函数才有arguments对象，每个函数都内置此对象<br>一般形参和实参数量匹配，arguments用的不多</p><h1 id="六、函数可以相互调用"><a href="#六、函数可以相互调用" class="headerlink" title="六、函数可以相互调用"></a>六、函数可以相互调用</h1><p>可以在一个函数内调用另外一个函数<br>函数可以 以参数的形式 传递，称为回调函数</p><p>​                ​            </p>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/2019/05/13/1.js%E5%9F%BA%E7%A1%80/4.%E6%95%B0%E7%BB%84/"/>
      <url>/2019/05/13/1.js%E5%9F%BA%E7%A1%80/4.%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h1><p>什么是数组<br>    数组Array是一组数据的集合存放在单个变量名下，其中每个数据称为数组元素。<br>    数组可以存放任意类型的元素,一般一个数组只存放一种</p><h1 id="二、创建数组"><a href="#二、创建数组" class="headerlink" title="二、创建数组"></a>二、创建数组</h1><p>1.利用new创建数组<br>    <code>var arr = new Array();</code><br>    <code>var arr = new Array(1,2,3,4);</code><br>2.利用数组字面量创建数组 常用方式<br>    <code>var arr = [];   创建空数组</code><br>    <code>var arr = [1, 2, &#39;pink&#39;, true];  创建非空数组</code></p><p>区别： 当new Array()括号里只有一个数字时，代表的是数组的长度</p><h1 id="三、获取数组元素"><a href="#三、获取数组元素" class="headerlink" title="三、获取数组元素"></a>三、获取数组元素</h1><p>1.数组的索引<br>    索引又称作下标，是访问元素的序号，从0开始；<br>    用索引来访问数组元素；<br>2.数组长度<br>    arr.length 数组元素的个数  会自动检测数组元素的变化改变length大小<br>    与索引的关系： <code>arr.length - 1 = 数组最大索引值</code><br>3.遍历数组<br>    把数组的每个元素都访问一次，称为数组遍历<br>    利用循环：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;  <span class="comment">//i当索引使用</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、增加-修改-删除数组元素"><a href="#四、增加-修改-删除数组元素" class="headerlink" title="四、增加/修改/删除数组元素"></a>四、增加/修改/删除数组元素</h1><p>1.修改数组长度新增元素<br>    数组长度arr.length是可变化的<br>        <code>arr.length = 5;</code><br>    新增的数组元素是undifined;<br>2.修改索引号新增元素<br>    假设<code>arr = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;];</code><br>    此时索引是0-3，没有4，当设置 <code>arr[4] = &#39;e&#39;</code>时会在后面追加一个新元素e<br>    如果索引号已经占用，会覆盖掉原有的元素，实现修改效果<br>3.清空数组<br>    <code>arr.length = 0或Null;</code></p>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流程控制</title>
      <link href="/2019/05/13/1.js%E5%9F%BA%E7%A1%80/3.js%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>/2019/05/13/1.js%E5%9F%BA%E7%A1%80/3.js%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>流程控制：控制代码按照什么顺序执行<br>主要有顺序，分支，循环</p><h1 id="一-顺序流程控制"><a href="#一-顺序流程控制" class="headerlink" title="一.顺序流程控制"></a>一.顺序流程控制</h1><p>从上到下，顺序执行</p><h1 id="二-分支流程控制"><a href="#二-分支流程控制" class="headerlink" title="二.分支流程控制"></a>二.分支流程控制</h1><p>根据不同条件，执行不同代码，得到不同结果<br>1） if语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if (条件表达式1) &#123;</span><br><span class="line">语句1；</span><br><span class="line">&#125; else if (条件表达式2) &#123;</span><br><span class="line">语句2；</span><br><span class="line">&#125; else if (条件表达式3) &#123;</span><br><span class="line">语句3；</span><br><span class="line">....</span><br><span class="line">&#125; else &#123;</span><br><span class="line">// 上述条件都不成立执行此处代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2） switch 语句</p><p>当要针对变量设置一系列的特定值的选项时，就可以使用 switch语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">switch (表达式) &#123;</span><br><span class="line">case value1:</span><br><span class="line">表达式等于value1时要执行的代码；</span><br><span class="line">break;</span><br><span class="line">case value2:</span><br><span class="line">表达式等于value2时要执行的代码；</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">表达式不等于任何一个value时要执行的代码；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的判断相等是===，类型和取值全相等才执行下面的语句<br>case后面不要加判断条件，而是确定的值<br>switch括号里的可以是变量或者表达式，一般是变量<br>如果不加break，会执行下一个case里的语句</p><h1 id="三-三元表达式"><a href="#三-三元表达式" class="headerlink" title="三.三元表达式"></a>三.三元表达式</h1><p>表达式是有返回值的</p><p>格式：<code>条件表达式1？表达式2：表达式3</code></p><p>如果表达式1为 true ，则返回表达式2的值，如果表达式1为 false，则返回表达式3的值</p><h1 id="四-循环流程控制"><a href="#四-循环流程控制" class="headerlink" title="四.循环流程控制"></a>四.循环流程控制</h1><h2 id="1-循环的目的"><a href="#1-循环的目的" class="headerlink" title="1.循环的目的"></a>1.循环的目的</h2><p>重复执行某些语句<br>    循环体：被重复执行的代码<br>    终止条件：决定能否继续重复执行的条件</p><h2 id="2-三种循环语句"><a href="#2-三种循环语句" class="headerlink" title="2.三种循环语句"></a>2.三种循环语句</h2><p>1）for循环<br>重复执行某些代码，通常跟计数有关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (初始化变量；条件表达式；操作表达式) &#123;</span><br><span class="line">循环体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化变量：用var声明的一个普通变量i，通常用于计数器使用<br>条件表达式：决定每一次循环是否执行，即终止条件<br>操作表达式：每次循环最后执行的代码，常用于 更新 计数器变量i </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (i=1;i&lt;=10;i++)&#123;</span><br><span class="line">循环体执行10次;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for循环可以重复执行不同的代码，因为有变量i的存在；<br>循环体也可以是for循环，这样称作循环嵌套</p><p>2）while循环<br>一般用于不知道循环次数时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while (条件表达式) &#123;</span><br><span class="line">循环体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>条件表达式为真时执行循环体，否则跳出循环；<br>循环体里要有操作表达式，更新计数器变量，防止死循环</p><p>3）do while循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">do &#123;</span><br><span class="line">循环体；</span><br><span class="line">&#125; while (条件表达式)</span><br></pre></td></tr></table></figure><p>先执行一次循环体，再判断条件是否为真继续循环</p><h2 id="3-continue和break关键字"><a href="#3-continue和break关键字" class="headerlink" title="3.continue和break关键字"></a>3.continue和break关键字</h2><p>1）continue<br>跳出本次循环，继续下一次循环<br>2）break<br>跳出整个循环，不再执行其他循环次数</p>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运算符</title>
      <link href="/2019/05/13/1.js%E5%9F%BA%E7%A1%80/2.js%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2019/05/13/1.js%E5%9F%BA%E7%A1%80/2.js%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1.算术运算符"></a>1.算术运算符</h1><p>加 减 乘 除 取余<br><code>+  -  *  /  %</code><br>1.浮点数直接运算会出现误差<br>2.不能直接判断两个浮点数是否相等<br>3.取余可以判断一个数能否被整除，余数是0就能整除<br>4.算术运算符优先级 先乘除后加减 有括号先算括号内的</p><h1 id="2-表达式和返回值"><a href="#2-表达式和返回值" class="headerlink" title="2.表达式和返回值"></a>2.表达式和返回值</h1><p>由数字、变量和运算符组成的式子称为表达式<br>表达式的结果称为返回值<br>只要是表达式都有返回值</p><h1 id="3-递增和递减运算符"><a href="#3-递增和递减运算符" class="headerlink" title="3.递增和递减运算符"></a>3.递增和递减运算符</h1><p>递增++ 和 递减– ，必须配合变量使用<br>前置++n: 先加1 后返回值<br>后置n++: 先返回值 后加1<br>单行写的时候没有区别，后面如果还有计算、或者直接输出就有区别</p><h1 id="4-比较运算符"><a href="#4-比较运算符" class="headerlink" title="4.比较运算符"></a>4.比较运算符</h1><p>返回结果是boolean型<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190526/S1Ht9K2Dtd5g.png?imageslim" alt="mark"></p><h1 id="5-逻辑运算符"><a href="#5-逻辑运算符" class="headerlink" title="5.逻辑运算符"></a>5.逻辑运算符</h1><p>用布尔值进行运算，返回值也是布尔值<br><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190526/GgYJtyVxg3U3.png?imageslim" alt="mark"></p><h1 id="6-逻辑中断（短路运算）"><a href="#6-逻辑中断（短路运算）" class="headerlink" title="6.逻辑中断（短路运算）"></a>6.逻辑中断（短路运算）</h1><p>原理：多个表达式进行逻辑运算时，左边的值可以确定时，就不再计算右边的表达式<br>    逻辑与&amp;&amp;：（找错）  表达式1 &amp;&amp; 表达式2<br>        如果有false，输出此false，如果没有，返回最后一个表达式<br>    逻辑或||：（找对） 表达式1 || 表达式2<br>        如果有true，输出此true，如果没有，返回最后一个表达式</p><h1 id="7-赋值运算符"><a href="#7-赋值运算符" class="headerlink" title="7.赋值运算符"></a>7.赋值运算符</h1><p><code>=  +=  -=  *=  /=  %=</code><br>n+=2 等价于 n = n + 2</p><h1 id="8-运算符优先级"><a href="#8-运算符优先级" class="headerlink" title="8.运算符优先级"></a>8.运算符优先级</h1><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190526/vfjyozcab6V1.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量和数据类型</title>
      <link href="/2019/05/13/1.js%E5%9F%BA%E7%A1%80/1.%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/05/13/1.js%E5%9F%BA%E7%A1%80/1.%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="一、js介绍"><a href="#一、js介绍" class="headerlink" title="一、js介绍"></a>一、js介绍</h1><h2 id="1-为什么学习JavaScript"><a href="#1-为什么学习JavaScript" class="headerlink" title="1.为什么学习JavaScript"></a>1.为什么学习JavaScript</h2><p>一开始的作用：判断用户的输入，验证表单<br>现在的意义：页面特效、移动端开发、异步和服务器交互ajax、服务端开发 </p><h2 id="2-浏览器是如何工作的"><a href="#2-浏览器是如何工作的" class="headerlink" title="2.浏览器是如何工作的"></a>2.浏览器是如何工作的</h2><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190526/39XqGt97Enfc.png?imageslim" alt="mark"><br>User Interface: 用户界面<br>Browser engine： 浏览器引擎 查询和操作渲染引擎<br>Rendering engine：渲染引擎 解释执行html和css代码<br>JavaScript Interpreter：js解析器 解释执行javascript<br>Networking：网络 向服务器发送和接收请求<br>UI Backend： UI后端 绘制组合框和弹出窗口<br>Data Persistence：数据持久化 浏览器存储数据 cookie、html5中的sessionStorage</p><h2 id="3-JavaScript语言介绍"><a href="#3-JavaScript语言介绍" class="headerlink" title="3.JavaScript语言介绍"></a>3.JavaScript语言介绍</h2><p>js是脚本语言，不需要编译，边解析边执行。<br>编译：一次性把代码转换成CPU可以读懂的语言，一行一行执行<br>解释：一行一行解析，解析一行执行一行</p><p>js是客户端的脚本语言，因为它运行在浏览器上<br>js是直译型、弱类型、可以跨平台、面对对象开发的语言</p><h2 id="4-JavaScript的组成"><a href="#4-JavaScript的组成" class="headerlink" title="4.JavaScript的组成"></a>4.JavaScript的组成</h2><p>ECMAScript：JavaScript语法规范<br>DOM: JavaScript操作网页元素的API<br>BOM:    JavaScript操作浏览器部分功能的API</p><h1 id="二、js书写位置"><a href="#二、js书写位置" class="headerlink" title="二、js书写位置"></a>二、js书写位置</h1><h2 id="引入方式："><a href="#引入方式：" class="headerlink" title="引入方式："></a>引入方式：</h2><p>1.行内式：写在标签内 <code>&lt;button onclick=&quot;alert(&#39;成功&#39;)&quot;&gt; &lt;/button&gt;</code><br>2.内嵌式：写在html文件里面，head之内添加<code>&lt;script&gt;js代码&lt;/script&gt;</code><br>3.外部式：引入 <code>&lt;script src=&quot;main.js&quot;&gt; &lt;/script&gt;</code> 中间不可以再写js代码</p><h2 id="script标签的属性"><a href="#script标签的属性" class="headerlink" title="script标签的属性"></a>script标签的属性</h2><p>src: script文件路径<br>type: 默认是text/javascript 可以省略<br>async: 异步，并列执行 取值仅有一个值async<br>sync： 同步，线性执行<br>differ: 异步执行，在整个html文档都执行完之后再执行外部脚本，只有外部脚本可以使用，取值只有differ</p><h1 id="三、js注释"><a href="#三、js注释" class="headerlink" title="三、js注释"></a>三、js注释</h1><p><code>单行 //  快捷键 ctrl+/</code><br>多行 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/*   </span><br><span class="line">快捷键 修改为 crtl + shift + /</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h1 id="四、输入输出语句"><a href="#四、输入输出语句" class="headerlink" title="四、输入输出语句"></a>四、输入输出语句</h1><p>输入语句：<br><code>prompt(&quot;提示信息&quot;,&quot;默认值&quot;); 浏览器弹出输入框,取到的值是字符型的</code></p><p>输出语句：<br><code>alert(msg);</code> 浏览器弹出警示框 比如弹出变量值 <code>alert(&#39;变量值是&#39; + num);</code><br><code>console.log(msg);</code> 浏览器控制台打印输出日志 想要输出多个变量 用逗号分隔<br><code>document.write(&quot;&quot;);</code> 输出内容 在浏览器中显示 换行是用<code>&lt;br /&gt;</code></p><h1 id="五、变量"><a href="#五、变量" class="headerlink" title="五、变量"></a>五、变量</h1><h2 id="1-变量："><a href="#1-变量：" class="headerlink" title="1.变量："></a>1.变量：</h2><p>存放数据的容器，通过变量名获取数据<br>变量是在内存中存放数据的空间 </p><h2 id="2-定义变量两种方式："><a href="#2-定义变量两种方式：" class="headerlink" title="2.定义变量两种方式："></a>2.定义变量两种方式：</h2><p><code>var 变量名=值；</code><br><code>var 变量名； 变量名=值；</code><br>也可以一次声明多个变量 var name,age,sex；</p><p>只声明不赋值，该值是undifined<br>只赋值不声明，浏览器会根据赋值自动声明<br>既不声明也不赋值，会报错</p><p>定义变量后，存储在内存中，基本变量存储在栈中，复杂变量存储在堆中</p><h2 id="3-变量命名："><a href="#3-变量命名：" class="headerlink" title="3.变量命名："></a>3.变量命名：</h2><ul><li>变量命名规则：<br> 1.由字母、数字、下划线和$组成，开头不能是数字<br> 2.不能是关键字和保留字，不使用name<br> 3.区分大小写</li><li>变量命名规范：<br> 1.命名要有意义<br> 2.遵守驼峰命名法，首字母小写，其他单词第一个字母大写</li></ul><p><strong>练习</strong>  交换两个变量的值<br>    两种办法：使用中间变量、不使用中间变量</p><h2 id="4-获取变量类型"><a href="#4-获取变量类型" class="headerlink" title="4.获取变量类型"></a>4.获取变量类型</h2><p>使用<code>变量.typeof</code>方法</p><h1 id="六、简单数据类型"><a href="#六、简单数据类型" class="headerlink" title="六、简单数据类型"></a>六、简单数据类型</h1><h2 id="1-简介："><a href="#1-简介：" class="headerlink" title="1.简介："></a>1.简介：</h2><p>js是动态语言，数据类型是可以变化的。变量的数据类型是在程序运行过程中确定的，根据等号右边的值</p><h2 id="2-简单数据类型："><a href="#2-简单数据类型：" class="headerlink" title="2.简单数据类型："></a>2.简单数据类型：</h2><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190526/3FR5jRw30AaQ.png?imageslim" alt="mark"></p><p>1）number 数字型<br>        取值可以是整数或者小数，也可以是各种进制的数。0开头是八进制数，0x开头是十六进制数<br>        js里面数字有最大值和最小值： Number.MAX_VALUE Number.MIN_VALUE<br>        数字型三个特殊值： 无穷大 Infinity  无穷小 -Infinity  非数字 NaN（not a number）<br>        isNaN() 方法用来判断变量是不是非数字<br>            如果不是数字返回true，如果是数字或者能转换成数字，则返回false<br>            NaN和任何值都不相等，包括它自己。</p><p>2）string 字符串型<br>        取值必须加引号，引号可以是””，也可以是’’， 推荐使用单引号<br>        字符串嵌套时要使用不同的引号，外双内单或者外单内双<br>        转义字符：<br>        <img src="http://pt4il2v80.bkt.clouddn.com/blog/20190526/MBHUChas60WJ.png?imageslim" alt="mark">    </p><pre><code>转义字符只适用于console.log()的输出document.write() 换行使用br字符串长度属性： str.length       str[索引] 获取字符串的第几个字符 索引从0开始字符串拼接： newstr = str1 + str2;  数值相加，字符相连字符串和不同类型的值也可以拼接，结果都是字符串类型</code></pre><p>boolean和数字运算时，false和true 取值为0和1<br>undifined和数字相加结果是NaN<br>null和数字相加仍为原数字,null是对象类型</p><h1 id="七、数据类型转换"><a href="#七、数据类型转换" class="headerlink" title="七、数据类型转换"></a>七、数据类型转换</h1><p>chrome控制台输出蓝色是数字型，黑色是字符串型</p><h2 id="1-转换成字符串型"><a href="#1-转换成字符串型" class="headerlink" title="1.转换成字符串型"></a>1.转换成字符串型</h2><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190526/rIMS8zHNmz8y.png?imageslim" alt="mark"></p><p> 变量.toString()  里面的变量要先声明<br> String(变量或值)  强制转换<br> 隐式转换：和字符串相加</p><h2 id="2-转换为数字型"><a href="#2-转换为数字型" class="headerlink" title="2.转换为数字型"></a>2.转换为数字型</h2><p><img src="http://pt4il2v80.bkt.clouddn.com/blog/20190526/my2vtLI6YeL7.png?imageslim" alt="mark"><br>    parseInt(字符串)     把字符串转换成整数，取整且去掉字母（开头要是数字）<br>    parseFloat(字符串)    把字符串转换成浮点数，去掉字母（开头要是数字）<br>        parseInt和parseFloat括号里可以逗号+进制 这样会把字符串转换为指定进制的数字<br>    Number(变量)     把变量变成数字型，变量有字母结果就是NaN，null转换为0<br>    隐式转换 在变量前面加+号、 -0 、* 1 、/ 1；</p><h2 id="3-转换为boolean类型"><a href="#3-转换为boolean类型" class="headerlink" title="3.转换为boolean类型"></a>3.转换为boolean类型</h2><p>Boolean(变量)<br>    转换为false的情况： 变量是 0 、 NaN 、 undefined 、null 、”” 、false<br>    其他都是true<br>隐式转换： !!变量</p>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
